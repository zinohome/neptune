2021-11-08 at 18:41:04 | INFO | Neptune Start Up ....
2021-11-08 at 18:41:04 | INFO | API prefix is: [ /api/v2 ]
2021-11-08 at 18:41:04 | INFO | Neptune Starting ....
2021-11-08 at 18:41:04 | INFO | API cache does not exists ....
2021-11-08 at 18:41:18 | INFO | Neptune Shutting Down ....
2021-11-08 at 18:41:18 | INFO | API cache does not exists ....
2021-11-08 at 18:41:20 | INFO | Neptune Start Up ....
2021-11-08 at 18:41:20 | INFO | API prefix is: [ /api/v2 ]
2021-11-08 at 18:41:20 | INFO | Neptune Starting ....
2021-11-08 at 18:41:20 | INFO | API cache does not exists ....
2021-11-08 at 18:42:06 | INFO | Neptune Shutting Down ....
2021-11-08 at 18:42:06 | INFO | API cache does not exists ....
2021-11-08 at 18:42:08 | INFO | Neptune Start Up ....
2021-11-08 at 18:42:08 | INFO | API prefix is: [ /api/v1 ]
2021-11-08 at 18:42:08 | INFO | Neptune Starting ....
2021-11-08 at 18:42:08 | INFO | API cache does not exists ....
2021-11-08 at 18:43:33 | INFO | Neptune Shutting Down ....
2021-11-08 at 18:43:33 | INFO | API cache does not exists ....
2021-11-08 at 18:43:34 | INFO | Neptune Start Up ....
2021-11-08 at 18:43:34 | INFO | API prefix is: [ /api/v1 ]
2021-11-08 at 18:43:34 | INFO | Neptune Starting ....
2021-11-08 at 18:43:34 | INFO | API cache does not exists ....
2021-11-08 at 18:43:45 | INFO | Neptune Shutting Down ....
2021-11-08 at 18:43:45 | INFO | API cache does not exists ....
2021-11-08 at 18:43:47 | INFO | Neptune Start Up ....
2021-11-08 at 18:43:47 | INFO | API prefix is: [ /api/v1 ]
2021-11-08 at 18:43:47 | INFO | Neptune Starting ....
2021-11-08 at 18:43:47 | INFO | API cache does not exists ....
2021-11-08 at 18:44:04 | INFO | Neptune Shutting Down ....
2021-11-08 at 18:44:04 | INFO | API cache does not exists ....
2021-11-08 at 18:44:05 | INFO | Neptune Start Up ....
2021-11-08 at 18:44:05 | INFO | API prefix is: [ /api/v1 ]
2021-11-08 at 18:44:05 | INFO | Neptune Starting ....
2021-11-08 at 18:44:05 | INFO | API cache does not exists ....
2021-11-08 at 18:53:00 | INFO | Neptune Shutting Down ....
2021-11-08 at 18:53:00 | INFO | API cache does not exists ....
2021-11-08 at 18:53:01 | INFO | Neptune Start Up ....
2021-11-08 at 18:53:01 | INFO | API prefix is: [ /api/v1 ]
2021-11-08 at 18:53:01 | INFO | Neptune Starting ....
2021-11-08 at 18:53:01 | INFO | API cache does not exists ....
2021-11-08 at 18:53:28 | INFO | Neptune Shutting Down ....
2021-11-08 at 18:53:28 | INFO | API cache does not exists ....
2021-11-08 at 18:53:29 | INFO | Neptune Start Up ....
2021-11-08 at 18:53:29 | INFO | API prefix is: [ /api/v1 ]
2021-11-08 at 18:53:29 | INFO | Neptune Starting ....
2021-11-08 at 18:53:29 | INFO | API cache does not exists ....
2021-11-08 at 18:55:33 | INFO | Neptune Shutting Down ....
2021-11-08 at 18:55:33 | INFO | API cache does not exists ....
2021-11-08 at 18:55:35 | INFO | Neptune Start Up ....
2021-11-08 at 18:55:35 | INFO | API prefix is: [ /api/v1 ]
2021-11-08 at 18:55:35 | INFO | Neptune Starting ....
2021-11-08 at 18:55:35 | INFO | API cache does not exists ....
2021-11-08 at 19:01:53 | INFO | Neptune Shutting Down ....
2021-11-08 at 19:01:53 | INFO | API cache does not exists ....
2021-11-09 at 10:03:30 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:05:43 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:06:03 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:07:05 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:18:58 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:18:58 | DEBUG | Metadata cache save to [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ] 
2021-11-09 at 10:18:58 | DEBUG | Schema file does not exists, generate it from database ...
2021-11-09 at 10:18:58 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 10:18:59 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:18:59 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 10:18:59 | DEBUG | __class__
2021-11-09 at 10:18:59 | DEBUG | __class_getitem__
2021-11-09 at 10:18:59 | DEBUG | __contains__
2021-11-09 at 10:18:59 | DEBUG | __delattr__
2021-11-09 at 10:18:59 | DEBUG | __dict__
2021-11-09 at 10:18:59 | DEBUG | __dir__
2021-11-09 at 10:18:59 | DEBUG | __doc__
2021-11-09 at 10:18:59 | DEBUG | __eq__
2021-11-09 at 10:18:59 | DEBUG | __format__
2021-11-09 at 10:18:59 | DEBUG | __ge__
2021-11-09 at 10:18:59 | DEBUG | __getattribute__
2021-11-09 at 10:18:59 | DEBUG | __getstate__
2021-11-09 at 10:18:59 | DEBUG | __gt__
2021-11-09 at 10:18:59 | DEBUG | __hash__
2021-11-09 at 10:18:59 | DEBUG | __init__
2021-11-09 at 10:18:59 | DEBUG | __init_subclass__
2021-11-09 at 10:18:59 | DEBUG | __le__
2021-11-09 at 10:18:59 | DEBUG | __lt__
2021-11-09 at 10:18:59 | DEBUG | __module__
2021-11-09 at 10:18:59 | DEBUG | __ne__
2021-11-09 at 10:18:59 | DEBUG | __new__
2021-11-09 at 10:18:59 | DEBUG | __reduce__
2021-11-09 at 10:18:59 | DEBUG | __reduce_ex__
2021-11-09 at 10:18:59 | DEBUG | __repr__
2021-11-09 at 10:18:59 | DEBUG | __setattr__
2021-11-09 at 10:18:59 | DEBUG | __setstate__
2021-11-09 at 10:18:59 | DEBUG | __sizeof__
2021-11-09 at 10:18:59 | DEBUG | __str__
2021-11-09 at 10:18:59 | DEBUG | __subclasshook__
2021-11-09 at 10:18:59 | DEBUG | __visit_name__
2021-11-09 at 10:18:59 | DEBUG | __weakref__
2021-11-09 at 10:18:59 | DEBUG | _add_table
2021-11-09 at 10:18:59 | DEBUG | _bind
2021-11-09 at 10:18:59 | DEBUG | _bind_to
2021-11-09 at 10:18:59 | DEBUG | _compiler_dispatch
2021-11-09 at 10:18:59 | DEBUG | _fk_memos
2021-11-09 at 10:18:59 | DEBUG | _init_items
2021-11-09 at 10:18:59 | DEBUG | _original_compiler_dispatch
2021-11-09 at 10:18:59 | DEBUG | _remove_table
2021-11-09 at 10:18:59 | DEBUG | _schema_item_copy
2021-11-09 at 10:18:59 | DEBUG | _schemas
2021-11-09 at 10:18:59 | DEBUG | _sequences
2021-11-09 at 10:18:59 | DEBUG | _set_parent
2021-11-09 at 10:18:59 | DEBUG | _set_parent_with_dispatch
2021-11-09 at 10:18:59 | DEBUG | _use_schema_map
2021-11-09 at 10:18:59 | DEBUG | bind
2021-11-09 at 10:18:59 | DEBUG | clear
2021-11-09 at 10:18:59 | DEBUG | create_all
2021-11-09 at 10:18:59 | DEBUG | create_drop_stringify_dialect
2021-11-09 at 10:18:59 | DEBUG | dispatch
2021-11-09 at 10:18:59 | DEBUG | drop_all
2021-11-09 at 10:18:59 | DEBUG | get_children
2021-11-09 at 10:18:59 | DEBUG | info
2021-11-09 at 10:18:59 | DEBUG | is_bound
2021-11-09 at 10:18:59 | DEBUG | naming_convention
2021-11-09 at 10:18:59 | DEBUG | reflect
2021-11-09 at 10:18:59 | DEBUG | remove
2021-11-09 at 10:18:59 | DEBUG | schema
2021-11-09 at 10:18:59 | DEBUG | sorted_tables
2021-11-09 at 10:18:59 | DEBUG | tables
2021-11-09 at 10:18:59 | DEBUG | items
2021-11-09 at 10:18:59 | DEBUG | offices
2021-11-09 at 10:18:59 | DEBUG | productlines
2021-11-09 at 10:18:59 | DEBUG | tokens
2021-11-09 at 10:18:59 | DEBUG | zinopara
2021-11-09 at 10:18:59 | DEBUG | employees
2021-11-09 at 10:18:59 | DEBUG | products
2021-11-09 at 10:18:59 | DEBUG | customers
2021-11-09 at 10:18:59 | DEBUG | orders
2021-11-09 at 10:18:59 | DEBUG | payments
2021-11-09 at 10:18:59 | DEBUG | orderdetails
2021-11-09 at 10:18:59 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:19:58 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:19:58 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ]
2021-11-09 at 10:19:58 | DEBUG | Schema file does not exists, generate it from database ...
2021-11-09 at 10:19:58 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 10:19:58 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:19:58 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 10:19:58 | DEBUG | __class__
2021-11-09 at 10:19:58 | DEBUG | __class_getitem__
2021-11-09 at 10:19:58 | DEBUG | __contains__
2021-11-09 at 10:19:58 | DEBUG | __delattr__
2021-11-09 at 10:19:58 | DEBUG | __dict__
2021-11-09 at 10:19:58 | DEBUG | __dir__
2021-11-09 at 10:19:58 | DEBUG | __doc__
2021-11-09 at 10:19:58 | DEBUG | __eq__
2021-11-09 at 10:19:58 | DEBUG | __format__
2021-11-09 at 10:19:58 | DEBUG | __ge__
2021-11-09 at 10:19:58 | DEBUG | __getattribute__
2021-11-09 at 10:19:58 | DEBUG | __getstate__
2021-11-09 at 10:19:58 | DEBUG | __gt__
2021-11-09 at 10:19:58 | DEBUG | __hash__
2021-11-09 at 10:19:58 | DEBUG | __init__
2021-11-09 at 10:19:58 | DEBUG | __init_subclass__
2021-11-09 at 10:19:58 | DEBUG | __le__
2021-11-09 at 10:19:58 | DEBUG | __lt__
2021-11-09 at 10:19:58 | DEBUG | __module__
2021-11-09 at 10:19:58 | DEBUG | __ne__
2021-11-09 at 10:19:58 | DEBUG | __new__
2021-11-09 at 10:19:58 | DEBUG | __reduce__
2021-11-09 at 10:19:58 | DEBUG | __reduce_ex__
2021-11-09 at 10:19:58 | DEBUG | __repr__
2021-11-09 at 10:19:58 | DEBUG | __setattr__
2021-11-09 at 10:19:58 | DEBUG | __setstate__
2021-11-09 at 10:19:58 | DEBUG | __sizeof__
2021-11-09 at 10:19:58 | DEBUG | __str__
2021-11-09 at 10:19:58 | DEBUG | __subclasshook__
2021-11-09 at 10:19:58 | DEBUG | __visit_name__
2021-11-09 at 10:19:58 | DEBUG | __weakref__
2021-11-09 at 10:19:58 | DEBUG | _add_table
2021-11-09 at 10:19:58 | DEBUG | _bind
2021-11-09 at 10:19:58 | DEBUG | _bind_to
2021-11-09 at 10:19:58 | DEBUG | _compiler_dispatch
2021-11-09 at 10:19:58 | DEBUG | _fk_memos
2021-11-09 at 10:19:58 | DEBUG | _init_items
2021-11-09 at 10:19:58 | DEBUG | _original_compiler_dispatch
2021-11-09 at 10:19:58 | DEBUG | _remove_table
2021-11-09 at 10:19:58 | DEBUG | _schema_item_copy
2021-11-09 at 10:19:58 | DEBUG | _schemas
2021-11-09 at 10:19:58 | DEBUG | _sequences
2021-11-09 at 10:19:58 | DEBUG | _set_parent
2021-11-09 at 10:19:58 | DEBUG | _set_parent_with_dispatch
2021-11-09 at 10:19:58 | DEBUG | _use_schema_map
2021-11-09 at 10:19:58 | DEBUG | bind
2021-11-09 at 10:19:58 | DEBUG | clear
2021-11-09 at 10:19:58 | DEBUG | create_all
2021-11-09 at 10:19:58 | DEBUG | create_drop_stringify_dialect
2021-11-09 at 10:19:58 | DEBUG | dispatch
2021-11-09 at 10:19:58 | DEBUG | drop_all
2021-11-09 at 10:19:58 | DEBUG | get_children
2021-11-09 at 10:19:58 | DEBUG | info
2021-11-09 at 10:19:58 | DEBUG | is_bound
2021-11-09 at 10:19:58 | DEBUG | naming_convention
2021-11-09 at 10:19:58 | DEBUG | reflect
2021-11-09 at 10:19:58 | DEBUG | remove
2021-11-09 at 10:19:58 | DEBUG | schema
2021-11-09 at 10:19:58 | DEBUG | sorted_tables
2021-11-09 at 10:19:58 | DEBUG | tables
2021-11-09 at 10:19:58 | DEBUG | =================
2021-11-09 at 10:19:58 | DEBUG | items
2021-11-09 at 10:19:58 | DEBUG | offices
2021-11-09 at 10:19:58 | DEBUG | productlines
2021-11-09 at 10:19:58 | DEBUG | tokens
2021-11-09 at 10:19:58 | DEBUG | zinopara
2021-11-09 at 10:19:58 | DEBUG | employees
2021-11-09 at 10:19:58 | DEBUG | products
2021-11-09 at 10:19:58 | DEBUG | customers
2021-11-09 at 10:19:58 | DEBUG | orders
2021-11-09 at 10:19:58 | DEBUG | payments
2021-11-09 at 10:19:58 | DEBUG | orderdetails
2021-11-09 at 10:19:58 | DEBUG | ****************************************
2021-11-09 at 10:19:58 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:20:11 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:20:11 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ]
2021-11-09 at 10:20:11 | DEBUG | Schema file does not exists, generate it from database ...
2021-11-09 at 10:20:11 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 10:20:12 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:20:12 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 10:20:12 | DEBUG | __class__
2021-11-09 at 10:20:12 | DEBUG | __class_getitem__
2021-11-09 at 10:20:12 | DEBUG | __contains__
2021-11-09 at 10:20:12 | DEBUG | __delattr__
2021-11-09 at 10:20:12 | DEBUG | __dict__
2021-11-09 at 10:20:12 | DEBUG | __dir__
2021-11-09 at 10:20:12 | DEBUG | __doc__
2021-11-09 at 10:20:12 | DEBUG | __eq__
2021-11-09 at 10:20:12 | DEBUG | __format__
2021-11-09 at 10:20:12 | DEBUG | __ge__
2021-11-09 at 10:20:12 | DEBUG | __getattribute__
2021-11-09 at 10:20:12 | DEBUG | __getstate__
2021-11-09 at 10:20:12 | DEBUG | __gt__
2021-11-09 at 10:20:12 | DEBUG | __hash__
2021-11-09 at 10:20:12 | DEBUG | __init__
2021-11-09 at 10:20:12 | DEBUG | __init_subclass__
2021-11-09 at 10:20:12 | DEBUG | __le__
2021-11-09 at 10:20:12 | DEBUG | __lt__
2021-11-09 at 10:20:12 | DEBUG | __module__
2021-11-09 at 10:20:12 | DEBUG | __ne__
2021-11-09 at 10:20:12 | DEBUG | __new__
2021-11-09 at 10:20:12 | DEBUG | __reduce__
2021-11-09 at 10:20:12 | DEBUG | __reduce_ex__
2021-11-09 at 10:20:12 | DEBUG | __repr__
2021-11-09 at 10:20:12 | DEBUG | __setattr__
2021-11-09 at 10:20:12 | DEBUG | __setstate__
2021-11-09 at 10:20:12 | DEBUG | __sizeof__
2021-11-09 at 10:20:12 | DEBUG | __str__
2021-11-09 at 10:20:12 | DEBUG | __subclasshook__
2021-11-09 at 10:20:12 | DEBUG | __visit_name__
2021-11-09 at 10:20:12 | DEBUG | __weakref__
2021-11-09 at 10:20:12 | DEBUG | _add_table
2021-11-09 at 10:20:12 | DEBUG | _bind
2021-11-09 at 10:20:12 | DEBUG | _bind_to
2021-11-09 at 10:20:12 | DEBUG | _compiler_dispatch
2021-11-09 at 10:20:12 | DEBUG | _fk_memos
2021-11-09 at 10:20:12 | DEBUG | _init_items
2021-11-09 at 10:20:12 | DEBUG | _original_compiler_dispatch
2021-11-09 at 10:20:12 | DEBUG | _remove_table
2021-11-09 at 10:20:12 | DEBUG | _schema_item_copy
2021-11-09 at 10:20:12 | DEBUG | _schemas
2021-11-09 at 10:20:12 | DEBUG | _sequences
2021-11-09 at 10:20:12 | DEBUG | _set_parent
2021-11-09 at 10:20:12 | DEBUG | _set_parent_with_dispatch
2021-11-09 at 10:20:12 | DEBUG | _use_schema_map
2021-11-09 at 10:20:12 | DEBUG | bind
2021-11-09 at 10:20:12 | DEBUG | clear
2021-11-09 at 10:20:12 | DEBUG | create_all
2021-11-09 at 10:20:12 | DEBUG | create_drop_stringify_dialect
2021-11-09 at 10:20:12 | DEBUG | dispatch
2021-11-09 at 10:20:12 | DEBUG | drop_all
2021-11-09 at 10:20:12 | DEBUG | get_children
2021-11-09 at 10:20:12 | DEBUG | info
2021-11-09 at 10:20:12 | DEBUG | is_bound
2021-11-09 at 10:20:12 | DEBUG | naming_convention
2021-11-09 at 10:20:12 | DEBUG | reflect
2021-11-09 at 10:20:12 | DEBUG | remove
2021-11-09 at 10:20:12 | DEBUG | schema
2021-11-09 at 10:20:12 | DEBUG | sorted_tables
2021-11-09 at 10:20:12 | DEBUG | tables
2021-11-09 at 10:20:12 | DEBUG | ===================================================
2021-11-09 at 10:20:12 | DEBUG | items
2021-11-09 at 10:20:12 | DEBUG | offices
2021-11-09 at 10:20:12 | DEBUG | productlines
2021-11-09 at 10:20:12 | DEBUG | tokens
2021-11-09 at 10:20:12 | DEBUG | zinopara
2021-11-09 at 10:20:12 | DEBUG | employees
2021-11-09 at 10:20:12 | DEBUG | products
2021-11-09 at 10:20:12 | DEBUG | customers
2021-11-09 at 10:20:12 | DEBUG | orders
2021-11-09 at 10:20:12 | DEBUG | payments
2021-11-09 at 10:20:12 | DEBUG | orderdetails
2021-11-09 at 10:20:12 | DEBUG | ****************************************************
2021-11-09 at 10:20:12 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:20:52 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:20:52 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ]
2021-11-09 at 10:20:52 | DEBUG | Schema file does not exists, generate it from database ...
2021-11-09 at 10:20:52 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 10:20:53 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:20:53 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 10:20:53 | DEBUG | ****************************************************
2021-11-09 at 10:20:53 | DEBUG | __class__
2021-11-09 at 10:20:53 | DEBUG | __class_getitem__
2021-11-09 at 10:20:53 | DEBUG | __contains__
2021-11-09 at 10:20:53 | DEBUG | __delattr__
2021-11-09 at 10:20:53 | DEBUG | __dict__
2021-11-09 at 10:20:53 | DEBUG | __dir__
2021-11-09 at 10:20:53 | DEBUG | __doc__
2021-11-09 at 10:20:53 | DEBUG | __eq__
2021-11-09 at 10:20:53 | DEBUG | __format__
2021-11-09 at 10:20:53 | DEBUG | __ge__
2021-11-09 at 10:20:53 | DEBUG | __getattribute__
2021-11-09 at 10:20:53 | DEBUG | __getstate__
2021-11-09 at 10:20:53 | DEBUG | __gt__
2021-11-09 at 10:20:53 | DEBUG | __hash__
2021-11-09 at 10:20:53 | DEBUG | __init__
2021-11-09 at 10:20:53 | DEBUG | __init_subclass__
2021-11-09 at 10:20:53 | DEBUG | __le__
2021-11-09 at 10:20:53 | DEBUG | __lt__
2021-11-09 at 10:20:53 | DEBUG | __module__
2021-11-09 at 10:20:53 | DEBUG | __ne__
2021-11-09 at 10:20:53 | DEBUG | __new__
2021-11-09 at 10:20:53 | DEBUG | __reduce__
2021-11-09 at 10:20:53 | DEBUG | __reduce_ex__
2021-11-09 at 10:20:53 | DEBUG | __repr__
2021-11-09 at 10:20:53 | DEBUG | __setattr__
2021-11-09 at 10:20:53 | DEBUG | __setstate__
2021-11-09 at 10:20:53 | DEBUG | __sizeof__
2021-11-09 at 10:20:53 | DEBUG | __str__
2021-11-09 at 10:20:53 | DEBUG | __subclasshook__
2021-11-09 at 10:20:53 | DEBUG | __visit_name__
2021-11-09 at 10:20:53 | DEBUG | __weakref__
2021-11-09 at 10:20:53 | DEBUG | _add_table
2021-11-09 at 10:20:53 | DEBUG | _bind
2021-11-09 at 10:20:53 | DEBUG | _bind_to
2021-11-09 at 10:20:53 | DEBUG | _compiler_dispatch
2021-11-09 at 10:20:53 | DEBUG | _fk_memos
2021-11-09 at 10:20:53 | DEBUG | _init_items
2021-11-09 at 10:20:53 | DEBUG | _original_compiler_dispatch
2021-11-09 at 10:20:53 | DEBUG | _remove_table
2021-11-09 at 10:20:53 | DEBUG | _schema_item_copy
2021-11-09 at 10:20:53 | DEBUG | _schemas
2021-11-09 at 10:20:53 | DEBUG | _sequences
2021-11-09 at 10:20:53 | DEBUG | _set_parent
2021-11-09 at 10:20:53 | DEBUG | _set_parent_with_dispatch
2021-11-09 at 10:20:53 | DEBUG | _use_schema_map
2021-11-09 at 10:20:53 | DEBUG | bind
2021-11-09 at 10:20:53 | DEBUG | clear
2021-11-09 at 10:20:53 | DEBUG | create_all
2021-11-09 at 10:20:53 | DEBUG | create_drop_stringify_dialect
2021-11-09 at 10:20:53 | DEBUG | dispatch
2021-11-09 at 10:20:53 | DEBUG | drop_all
2021-11-09 at 10:20:53 | DEBUG | get_children
2021-11-09 at 10:20:53 | DEBUG | info
2021-11-09 at 10:20:53 | DEBUG | is_bound
2021-11-09 at 10:20:53 | DEBUG | naming_convention
2021-11-09 at 10:20:53 | DEBUG | reflect
2021-11-09 at 10:20:53 | DEBUG | remove
2021-11-09 at 10:20:53 | DEBUG | schema
2021-11-09 at 10:20:53 | DEBUG | sorted_tables
2021-11-09 at 10:20:53 | DEBUG | tables
2021-11-09 at 10:20:53 | DEBUG | ===================================================
2021-11-09 at 10:20:53 | DEBUG | items
2021-11-09 at 10:20:53 | DEBUG | offices
2021-11-09 at 10:20:53 | DEBUG | productlines
2021-11-09 at 10:20:53 | DEBUG | tokens
2021-11-09 at 10:20:53 | DEBUG | zinopara
2021-11-09 at 10:20:53 | DEBUG | employees
2021-11-09 at 10:20:53 | DEBUG | products
2021-11-09 at 10:20:53 | DEBUG | customers
2021-11-09 at 10:20:53 | DEBUG | orders
2021-11-09 at 10:20:53 | DEBUG | payments
2021-11-09 at 10:20:53 | DEBUG | orderdetails
2021-11-09 at 10:20:53 | DEBUG | ****************************************************
2021-11-09 at 10:20:53 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:21:47 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:21:47 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ]
2021-11-09 at 10:21:47 | DEBUG | Schema file does not exists, generate it from database ...
2021-11-09 at 10:21:47 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 10:21:47 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:21:47 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 10:21:47 | DEBUG | ****************************************************
2021-11-09 at 10:21:47 | DEBUG | __class__
2021-11-09 at 10:21:47 | DEBUG | __class_getitem__
2021-11-09 at 10:21:47 | DEBUG | __contains__
2021-11-09 at 10:21:47 | DEBUG | __delattr__
2021-11-09 at 10:21:47 | DEBUG | __dict__
2021-11-09 at 10:21:47 | DEBUG | __dir__
2021-11-09 at 10:21:47 | DEBUG | __doc__
2021-11-09 at 10:21:47 | DEBUG | __eq__
2021-11-09 at 10:21:47 | DEBUG | __format__
2021-11-09 at 10:21:47 | DEBUG | __ge__
2021-11-09 at 10:21:47 | DEBUG | __getattribute__
2021-11-09 at 10:21:47 | DEBUG | __getstate__
2021-11-09 at 10:21:47 | DEBUG | __gt__
2021-11-09 at 10:21:47 | DEBUG | __hash__
2021-11-09 at 10:21:47 | DEBUG | __init__
2021-11-09 at 10:21:47 | DEBUG | __init_subclass__
2021-11-09 at 10:21:47 | DEBUG | __le__
2021-11-09 at 10:21:47 | DEBUG | __lt__
2021-11-09 at 10:21:47 | DEBUG | __module__
2021-11-09 at 10:21:47 | DEBUG | __ne__
2021-11-09 at 10:21:47 | DEBUG | __new__
2021-11-09 at 10:21:47 | DEBUG | __reduce__
2021-11-09 at 10:21:47 | DEBUG | __reduce_ex__
2021-11-09 at 10:21:47 | DEBUG | __repr__
2021-11-09 at 10:21:47 | DEBUG | __setattr__
2021-11-09 at 10:21:47 | DEBUG | __setstate__
2021-11-09 at 10:21:47 | DEBUG | __sizeof__
2021-11-09 at 10:21:47 | DEBUG | __str__
2021-11-09 at 10:21:47 | DEBUG | __subclasshook__
2021-11-09 at 10:21:47 | DEBUG | __visit_name__
2021-11-09 at 10:21:47 | DEBUG | __weakref__
2021-11-09 at 10:21:47 | DEBUG | _add_table
2021-11-09 at 10:21:47 | DEBUG | _bind
2021-11-09 at 10:21:47 | DEBUG | _bind_to
2021-11-09 at 10:21:47 | DEBUG | _compiler_dispatch
2021-11-09 at 10:21:47 | DEBUG | _fk_memos
2021-11-09 at 10:21:47 | DEBUG | _init_items
2021-11-09 at 10:21:47 | DEBUG | _original_compiler_dispatch
2021-11-09 at 10:21:47 | DEBUG | _remove_table
2021-11-09 at 10:21:47 | DEBUG | _schema_item_copy
2021-11-09 at 10:21:47 | DEBUG | _schemas
2021-11-09 at 10:21:47 | DEBUG | _sequences
2021-11-09 at 10:21:47 | DEBUG | _set_parent
2021-11-09 at 10:21:47 | DEBUG | _set_parent_with_dispatch
2021-11-09 at 10:21:47 | DEBUG | _use_schema_map
2021-11-09 at 10:21:47 | DEBUG | bind
2021-11-09 at 10:21:47 | DEBUG | clear
2021-11-09 at 10:21:47 | DEBUG | create_all
2021-11-09 at 10:21:47 | DEBUG | create_drop_stringify_dialect
2021-11-09 at 10:21:47 | DEBUG | dispatch
2021-11-09 at 10:21:47 | DEBUG | drop_all
2021-11-09 at 10:21:47 | DEBUG | get_children
2021-11-09 at 10:21:47 | DEBUG | info
2021-11-09 at 10:21:47 | DEBUG | is_bound
2021-11-09 at 10:21:47 | DEBUG | naming_convention
2021-11-09 at 10:21:47 | DEBUG | reflect
2021-11-09 at 10:21:47 | DEBUG | remove
2021-11-09 at 10:21:47 | DEBUG | schema
2021-11-09 at 10:21:47 | DEBUG | sorted_tables
2021-11-09 at 10:21:47 | DEBUG | tables
2021-11-09 at 10:21:47 | DEBUG | ===================================================
2021-11-09 at 10:21:47 | DEBUG | items
2021-11-09 at 10:21:47 | DEBUG | offices
2021-11-09 at 10:21:47 | DEBUG | productlines
2021-11-09 at 10:21:47 | DEBUG | tokens
2021-11-09 at 10:21:47 | DEBUG | zinopara
2021-11-09 at 10:21:47 | DEBUG | employees
2021-11-09 at 10:21:47 | DEBUG | products
2021-11-09 at 10:21:47 | DEBUG | customers
2021-11-09 at 10:21:47 | DEBUG | orders
2021-11-09 at 10:21:47 | DEBUG | payments
2021-11-09 at 10:21:47 | DEBUG | orderdetails
2021-11-09 at 10:21:47 | DEBUG | ****************************************************
2021-11-09 at 10:21:47 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:22:42 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:22:42 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ]
2021-11-09 at 10:22:42 | DEBUG | Schema file does not exists, generate it from database ...
2021-11-09 at 10:22:42 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 10:22:42 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:22:42 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 10:22:42 | DEBUG | ****************************************************
2021-11-09 at 10:22:42 | DEBUG | __class__
2021-11-09 at 10:22:42 | DEBUG | __class_getitem__
2021-11-09 at 10:22:42 | DEBUG | __contains__
2021-11-09 at 10:22:42 | DEBUG | __delattr__
2021-11-09 at 10:22:42 | DEBUG | __dict__
2021-11-09 at 10:22:42 | DEBUG | __dir__
2021-11-09 at 10:22:42 | DEBUG | __doc__
2021-11-09 at 10:22:42 | DEBUG | __eq__
2021-11-09 at 10:22:42 | DEBUG | __format__
2021-11-09 at 10:22:42 | DEBUG | __ge__
2021-11-09 at 10:22:42 | DEBUG | __getattribute__
2021-11-09 at 10:22:42 | DEBUG | __getstate__
2021-11-09 at 10:22:42 | DEBUG | __gt__
2021-11-09 at 10:22:42 | DEBUG | __hash__
2021-11-09 at 10:22:42 | DEBUG | __init__
2021-11-09 at 10:22:42 | DEBUG | __init_subclass__
2021-11-09 at 10:22:42 | DEBUG | __le__
2021-11-09 at 10:22:42 | DEBUG | __lt__
2021-11-09 at 10:22:42 | DEBUG | __module__
2021-11-09 at 10:22:42 | DEBUG | __ne__
2021-11-09 at 10:22:42 | DEBUG | __new__
2021-11-09 at 10:22:42 | DEBUG | __reduce__
2021-11-09 at 10:22:42 | DEBUG | __reduce_ex__
2021-11-09 at 10:22:42 | DEBUG | __repr__
2021-11-09 at 10:22:42 | DEBUG | __setattr__
2021-11-09 at 10:22:42 | DEBUG | __setstate__
2021-11-09 at 10:22:42 | DEBUG | __sizeof__
2021-11-09 at 10:22:42 | DEBUG | __str__
2021-11-09 at 10:22:42 | DEBUG | __subclasshook__
2021-11-09 at 10:22:42 | DEBUG | __visit_name__
2021-11-09 at 10:22:42 | DEBUG | __weakref__
2021-11-09 at 10:22:42 | DEBUG | _add_table
2021-11-09 at 10:22:42 | DEBUG | _bind
2021-11-09 at 10:22:42 | DEBUG | _bind_to
2021-11-09 at 10:22:42 | DEBUG | _compiler_dispatch
2021-11-09 at 10:22:42 | DEBUG | _fk_memos
2021-11-09 at 10:22:42 | DEBUG | _init_items
2021-11-09 at 10:22:42 | DEBUG | _original_compiler_dispatch
2021-11-09 at 10:22:42 | DEBUG | _remove_table
2021-11-09 at 10:22:42 | DEBUG | _schema_item_copy
2021-11-09 at 10:22:42 | DEBUG | _schemas
2021-11-09 at 10:22:42 | DEBUG | _sequences
2021-11-09 at 10:22:42 | DEBUG | _set_parent
2021-11-09 at 10:22:42 | DEBUG | _set_parent_with_dispatch
2021-11-09 at 10:22:42 | DEBUG | _use_schema_map
2021-11-09 at 10:22:42 | DEBUG | bind
2021-11-09 at 10:22:42 | DEBUG | clear
2021-11-09 at 10:22:42 | DEBUG | create_all
2021-11-09 at 10:22:42 | DEBUG | create_drop_stringify_dialect
2021-11-09 at 10:22:42 | DEBUG | dispatch
2021-11-09 at 10:22:42 | DEBUG | drop_all
2021-11-09 at 10:22:42 | DEBUG | get_children
2021-11-09 at 10:22:42 | DEBUG | info
2021-11-09 at 10:22:42 | DEBUG | is_bound
2021-11-09 at 10:22:42 | DEBUG | naming_convention
2021-11-09 at 10:22:42 | DEBUG | reflect
2021-11-09 at 10:22:42 | DEBUG | remove
2021-11-09 at 10:22:42 | DEBUG | schema
2021-11-09 at 10:22:42 | DEBUG | sorted_tables
2021-11-09 at 10:22:42 | DEBUG | tables
2021-11-09 at 10:22:42 | DEBUG | ===================================================
2021-11-09 at 10:22:42 | DEBUG | items
2021-11-09 at 10:22:42 | DEBUG | offices
2021-11-09 at 10:22:42 | DEBUG | productlines
2021-11-09 at 10:22:42 | DEBUG | tokens
2021-11-09 at 10:22:42 | DEBUG | zinopara
2021-11-09 at 10:22:42 | DEBUG | employees
2021-11-09 at 10:22:42 | DEBUG | products
2021-11-09 at 10:22:42 | DEBUG | customers
2021-11-09 at 10:22:42 | DEBUG | orders
2021-11-09 at 10:22:42 | DEBUG | payments
2021-11-09 at 10:22:42 | DEBUG | orderdetails
2021-11-09 at 10:22:42 | DEBUG | ****************************************************
2021-11-09 at 10:22:42 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:31:53 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:31:53 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ]
2021-11-09 at 10:31:53 | DEBUG | Schema file does not exists, generate it from database ...
2021-11-09 at 10:31:53 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 10:31:53 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:31:53 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 10:31:53 | DEBUG | ****************************************************
2021-11-09 at 10:31:53 | DEBUG | __class__
2021-11-09 at 10:31:53 | DEBUG | __class_getitem__
2021-11-09 at 10:31:53 | DEBUG | __contains__
2021-11-09 at 10:31:53 | DEBUG | __delattr__
2021-11-09 at 10:31:53 | DEBUG | __dict__
2021-11-09 at 10:31:53 | DEBUG | __dir__
2021-11-09 at 10:31:53 | DEBUG | __doc__
2021-11-09 at 10:31:53 | DEBUG | __eq__
2021-11-09 at 10:31:53 | DEBUG | __format__
2021-11-09 at 10:31:53 | DEBUG | __ge__
2021-11-09 at 10:31:53 | DEBUG | __getattribute__
2021-11-09 at 10:31:53 | DEBUG | __getstate__
2021-11-09 at 10:31:53 | DEBUG | __gt__
2021-11-09 at 10:31:53 | DEBUG | __hash__
2021-11-09 at 10:31:53 | DEBUG | __init__
2021-11-09 at 10:31:53 | DEBUG | __init_subclass__
2021-11-09 at 10:31:53 | DEBUG | __le__
2021-11-09 at 10:31:53 | DEBUG | __lt__
2021-11-09 at 10:31:53 | DEBUG | __module__
2021-11-09 at 10:31:53 | DEBUG | __ne__
2021-11-09 at 10:31:53 | DEBUG | __new__
2021-11-09 at 10:31:53 | DEBUG | __reduce__
2021-11-09 at 10:31:53 | DEBUG | __reduce_ex__
2021-11-09 at 10:31:53 | DEBUG | __repr__
2021-11-09 at 10:31:53 | DEBUG | __setattr__
2021-11-09 at 10:31:53 | DEBUG | __setstate__
2021-11-09 at 10:31:53 | DEBUG | __sizeof__
2021-11-09 at 10:31:53 | DEBUG | __str__
2021-11-09 at 10:31:53 | DEBUG | __subclasshook__
2021-11-09 at 10:31:53 | DEBUG | __visit_name__
2021-11-09 at 10:31:53 | DEBUG | __weakref__
2021-11-09 at 10:31:53 | DEBUG | _add_table
2021-11-09 at 10:31:53 | DEBUG | _bind
2021-11-09 at 10:31:53 | DEBUG | _bind_to
2021-11-09 at 10:31:53 | DEBUG | _compiler_dispatch
2021-11-09 at 10:31:53 | DEBUG | _fk_memos
2021-11-09 at 10:31:53 | DEBUG | _init_items
2021-11-09 at 10:31:53 | DEBUG | _original_compiler_dispatch
2021-11-09 at 10:31:53 | DEBUG | _remove_table
2021-11-09 at 10:31:53 | DEBUG | _schema_item_copy
2021-11-09 at 10:31:53 | DEBUG | _schemas
2021-11-09 at 10:31:53 | DEBUG | _sequences
2021-11-09 at 10:31:53 | DEBUG | _set_parent
2021-11-09 at 10:31:53 | DEBUG | _set_parent_with_dispatch
2021-11-09 at 10:31:53 | DEBUG | _use_schema_map
2021-11-09 at 10:31:53 | DEBUG | bind
2021-11-09 at 10:31:53 | DEBUG | clear
2021-11-09 at 10:31:53 | DEBUG | create_all
2021-11-09 at 10:31:53 | DEBUG | create_drop_stringify_dialect
2021-11-09 at 10:31:53 | DEBUG | dispatch
2021-11-09 at 10:31:53 | DEBUG | drop_all
2021-11-09 at 10:31:53 | DEBUG | get_children
2021-11-09 at 10:31:53 | DEBUG | info
2021-11-09 at 10:31:53 | DEBUG | is_bound
2021-11-09 at 10:31:53 | DEBUG | naming_convention
2021-11-09 at 10:31:53 | DEBUG | reflect
2021-11-09 at 10:31:53 | DEBUG | remove
2021-11-09 at 10:31:53 | DEBUG | schema
2021-11-09 at 10:31:53 | DEBUG | sorted_tables
2021-11-09 at 10:31:53 | DEBUG | tables
2021-11-09 at 10:31:53 | DEBUG | ===================================================
2021-11-09 at 10:31:53 | DEBUG | items
2021-11-09 at 10:31:53 | DEBUG | offices
2021-11-09 at 10:31:53 | DEBUG | productlines
2021-11-09 at 10:31:53 | DEBUG | tokens
2021-11-09 at 10:31:53 | DEBUG | zinopara
2021-11-09 at 10:31:53 | DEBUG | employees
2021-11-09 at 10:31:53 | DEBUG | products
2021-11-09 at 10:31:53 | DEBUG | customers
2021-11-09 at 10:31:53 | DEBUG | orders
2021-11-09 at 10:31:53 | DEBUG | payments
2021-11-09 at 10:31:53 | DEBUG | orderdetails
2021-11-09 at 10:31:53 | DEBUG | ****************************************************
2021-11-09 at 10:31:53 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:32:42 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:32:42 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ]
2021-11-09 at 10:32:42 | DEBUG | Schema file does not exists, generate it from database ...
2021-11-09 at 10:32:42 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 10:32:43 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:32:43 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 10:32:43 | DEBUG | ****************************************************
2021-11-09 at 10:32:43 | DEBUG | __class__
2021-11-09 at 10:32:43 | DEBUG | __class_getitem__
2021-11-09 at 10:32:43 | DEBUG | __contains__
2021-11-09 at 10:32:43 | DEBUG | __delattr__
2021-11-09 at 10:32:43 | DEBUG | __dict__
2021-11-09 at 10:32:43 | DEBUG | __dir__
2021-11-09 at 10:32:43 | DEBUG | __doc__
2021-11-09 at 10:32:43 | DEBUG | __eq__
2021-11-09 at 10:32:43 | DEBUG | __format__
2021-11-09 at 10:32:43 | DEBUG | __ge__
2021-11-09 at 10:32:43 | DEBUG | __getattribute__
2021-11-09 at 10:32:43 | DEBUG | __getstate__
2021-11-09 at 10:32:43 | DEBUG | __gt__
2021-11-09 at 10:32:43 | DEBUG | __hash__
2021-11-09 at 10:32:43 | DEBUG | __init__
2021-11-09 at 10:32:43 | DEBUG | __init_subclass__
2021-11-09 at 10:32:43 | DEBUG | __le__
2021-11-09 at 10:32:43 | DEBUG | __lt__
2021-11-09 at 10:32:43 | DEBUG | __module__
2021-11-09 at 10:32:43 | DEBUG | __ne__
2021-11-09 at 10:32:43 | DEBUG | __new__
2021-11-09 at 10:32:43 | DEBUG | __reduce__
2021-11-09 at 10:32:43 | DEBUG | __reduce_ex__
2021-11-09 at 10:32:43 | DEBUG | __repr__
2021-11-09 at 10:32:43 | DEBUG | __setattr__
2021-11-09 at 10:32:43 | DEBUG | __setstate__
2021-11-09 at 10:32:43 | DEBUG | __sizeof__
2021-11-09 at 10:32:43 | DEBUG | __str__
2021-11-09 at 10:32:43 | DEBUG | __subclasshook__
2021-11-09 at 10:32:43 | DEBUG | __visit_name__
2021-11-09 at 10:32:43 | DEBUG | __weakref__
2021-11-09 at 10:32:43 | DEBUG | _add_table
2021-11-09 at 10:32:43 | DEBUG | _bind
2021-11-09 at 10:32:43 | DEBUG | _bind_to
2021-11-09 at 10:32:43 | DEBUG | _compiler_dispatch
2021-11-09 at 10:32:43 | DEBUG | _fk_memos
2021-11-09 at 10:32:43 | DEBUG | _init_items
2021-11-09 at 10:32:43 | DEBUG | _original_compiler_dispatch
2021-11-09 at 10:32:43 | DEBUG | _remove_table
2021-11-09 at 10:32:43 | DEBUG | _schema_item_copy
2021-11-09 at 10:32:43 | DEBUG | _schemas
2021-11-09 at 10:32:43 | DEBUG | _sequences
2021-11-09 at 10:32:43 | DEBUG | _set_parent
2021-11-09 at 10:32:43 | DEBUG | _set_parent_with_dispatch
2021-11-09 at 10:32:43 | DEBUG | _use_schema_map
2021-11-09 at 10:32:43 | DEBUG | bind
2021-11-09 at 10:32:43 | DEBUG | clear
2021-11-09 at 10:32:43 | DEBUG | create_all
2021-11-09 at 10:32:43 | DEBUG | create_drop_stringify_dialect
2021-11-09 at 10:32:43 | DEBUG | dispatch
2021-11-09 at 10:32:43 | DEBUG | drop_all
2021-11-09 at 10:32:43 | DEBUG | get_children
2021-11-09 at 10:32:43 | DEBUG | info
2021-11-09 at 10:32:43 | DEBUG | is_bound
2021-11-09 at 10:32:43 | DEBUG | naming_convention
2021-11-09 at 10:32:43 | DEBUG | reflect
2021-11-09 at 10:32:43 | DEBUG | remove
2021-11-09 at 10:32:43 | DEBUG | schema
2021-11-09 at 10:32:43 | DEBUG | sorted_tables
2021-11-09 at 10:32:43 | DEBUG | tables
2021-11-09 at 10:32:43 | DEBUG | ===================================================
2021-11-09 at 10:32:43 | DEBUG | items
2021-11-09 at 10:32:43 | DEBUG | offices
2021-11-09 at 10:32:43 | DEBUG | productlines
2021-11-09 at 10:32:43 | DEBUG | tokens
2021-11-09 at 10:32:43 | DEBUG | zinopara
2021-11-09 at 10:32:43 | DEBUG | employees
2021-11-09 at 10:32:43 | DEBUG | products
2021-11-09 at 10:32:43 | DEBUG | customers
2021-11-09 at 10:32:43 | DEBUG | orders
2021-11-09 at 10:32:43 | DEBUG | payments
2021-11-09 at 10:32:43 | DEBUG | orderdetails
2021-11-09 at 10:32:43 | DEBUG | ****************************************************
2021-11-09 at 10:32:43 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:33:31 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:33:31 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ]
2021-11-09 at 10:33:31 | DEBUG | Schema file exists, you can load it to application ...
2021-11-09 at 10:33:31 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:33:31 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 10:33:31 | DEBUG | ****************************************************
2021-11-09 at 10:33:31 | DEBUG | __class__
2021-11-09 at 10:33:31 | DEBUG | __class_getitem__
2021-11-09 at 10:33:31 | DEBUG | __contains__
2021-11-09 at 10:33:31 | DEBUG | __delattr__
2021-11-09 at 10:33:31 | DEBUG | __dict__
2021-11-09 at 10:33:31 | DEBUG | __dir__
2021-11-09 at 10:33:31 | DEBUG | __doc__
2021-11-09 at 10:33:31 | DEBUG | __eq__
2021-11-09 at 10:33:31 | DEBUG | __format__
2021-11-09 at 10:33:31 | DEBUG | __ge__
2021-11-09 at 10:33:31 | DEBUG | __getattribute__
2021-11-09 at 10:33:31 | DEBUG | __getstate__
2021-11-09 at 10:33:31 | DEBUG | __gt__
2021-11-09 at 10:33:31 | DEBUG | __hash__
2021-11-09 at 10:33:31 | DEBUG | __init__
2021-11-09 at 10:33:31 | DEBUG | __init_subclass__
2021-11-09 at 10:33:31 | DEBUG | __le__
2021-11-09 at 10:33:31 | DEBUG | __lt__
2021-11-09 at 10:33:31 | DEBUG | __module__
2021-11-09 at 10:33:31 | DEBUG | __ne__
2021-11-09 at 10:33:31 | DEBUG | __new__
2021-11-09 at 10:33:31 | DEBUG | __reduce__
2021-11-09 at 10:33:31 | DEBUG | __reduce_ex__
2021-11-09 at 10:33:31 | DEBUG | __repr__
2021-11-09 at 10:33:31 | DEBUG | __setattr__
2021-11-09 at 10:33:31 | DEBUG | __setstate__
2021-11-09 at 10:33:31 | DEBUG | __sizeof__
2021-11-09 at 10:33:31 | DEBUG | __str__
2021-11-09 at 10:33:31 | DEBUG | __subclasshook__
2021-11-09 at 10:33:31 | DEBUG | __visit_name__
2021-11-09 at 10:33:31 | DEBUG | __weakref__
2021-11-09 at 10:33:31 | DEBUG | _add_table
2021-11-09 at 10:33:31 | DEBUG | _bind
2021-11-09 at 10:33:31 | DEBUG | _bind_to
2021-11-09 at 10:33:31 | DEBUG | _compiler_dispatch
2021-11-09 at 10:33:31 | DEBUG | _fk_memos
2021-11-09 at 10:33:31 | DEBUG | _init_items
2021-11-09 at 10:33:31 | DEBUG | _original_compiler_dispatch
2021-11-09 at 10:33:31 | DEBUG | _remove_table
2021-11-09 at 10:33:31 | DEBUG | _schema_item_copy
2021-11-09 at 10:33:31 | DEBUG | _schemas
2021-11-09 at 10:33:31 | DEBUG | _sequences
2021-11-09 at 10:33:31 | DEBUG | _set_parent
2021-11-09 at 10:33:31 | DEBUG | _set_parent_with_dispatch
2021-11-09 at 10:33:31 | DEBUG | _use_schema_map
2021-11-09 at 10:33:31 | DEBUG | bind
2021-11-09 at 10:33:31 | DEBUG | clear
2021-11-09 at 10:33:31 | DEBUG | create_all
2021-11-09 at 10:33:31 | DEBUG | create_drop_stringify_dialect
2021-11-09 at 10:33:31 | DEBUG | dispatch
2021-11-09 at 10:33:31 | DEBUG | drop_all
2021-11-09 at 10:33:31 | DEBUG | get_children
2021-11-09 at 10:33:31 | DEBUG | info
2021-11-09 at 10:33:31 | DEBUG | is_bound
2021-11-09 at 10:33:31 | DEBUG | naming_convention
2021-11-09 at 10:33:31 | DEBUG | reflect
2021-11-09 at 10:33:31 | DEBUG | remove
2021-11-09 at 10:33:31 | DEBUG | schema
2021-11-09 at 10:33:31 | DEBUG | sorted_tables
2021-11-09 at 10:33:31 | DEBUG | tables
2021-11-09 at 10:33:31 | DEBUG | ===================================================
2021-11-09 at 10:33:31 | DEBUG | items
2021-11-09 at 10:33:31 | DEBUG | offices
2021-11-09 at 10:33:31 | DEBUG | productlines
2021-11-09 at 10:33:31 | DEBUG | tokens
2021-11-09 at 10:33:31 | DEBUG | zinopara
2021-11-09 at 10:33:31 | DEBUG | employees
2021-11-09 at 10:33:31 | DEBUG | products
2021-11-09 at 10:33:31 | DEBUG | customers
2021-11-09 at 10:33:31 | DEBUG | orders
2021-11-09 at 10:33:31 | DEBUG | payments
2021-11-09 at 10:33:31 | DEBUG | orderdetails
2021-11-09 at 10:33:31 | DEBUG | ****************************************************
2021-11-09 at 10:33:31 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:33:41 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:33:41 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ]
2021-11-09 at 10:33:41 | DEBUG | Schema file does not exists, generate it from database ...
2021-11-09 at 10:33:41 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 10:33:42 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:33:42 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 10:33:42 | DEBUG | ****************************************************
2021-11-09 at 10:33:42 | DEBUG | __class__
2021-11-09 at 10:33:42 | DEBUG | __class_getitem__
2021-11-09 at 10:33:42 | DEBUG | __contains__
2021-11-09 at 10:33:42 | DEBUG | __delattr__
2021-11-09 at 10:33:42 | DEBUG | __dict__
2021-11-09 at 10:33:42 | DEBUG | __dir__
2021-11-09 at 10:33:42 | DEBUG | __doc__
2021-11-09 at 10:33:42 | DEBUG | __eq__
2021-11-09 at 10:33:42 | DEBUG | __format__
2021-11-09 at 10:33:42 | DEBUG | __ge__
2021-11-09 at 10:33:42 | DEBUG | __getattribute__
2021-11-09 at 10:33:42 | DEBUG | __getstate__
2021-11-09 at 10:33:42 | DEBUG | __gt__
2021-11-09 at 10:33:42 | DEBUG | __hash__
2021-11-09 at 10:33:42 | DEBUG | __init__
2021-11-09 at 10:33:42 | DEBUG | __init_subclass__
2021-11-09 at 10:33:42 | DEBUG | __le__
2021-11-09 at 10:33:42 | DEBUG | __lt__
2021-11-09 at 10:33:42 | DEBUG | __module__
2021-11-09 at 10:33:42 | DEBUG | __ne__
2021-11-09 at 10:33:42 | DEBUG | __new__
2021-11-09 at 10:33:42 | DEBUG | __reduce__
2021-11-09 at 10:33:42 | DEBUG | __reduce_ex__
2021-11-09 at 10:33:42 | DEBUG | __repr__
2021-11-09 at 10:33:42 | DEBUG | __setattr__
2021-11-09 at 10:33:42 | DEBUG | __setstate__
2021-11-09 at 10:33:42 | DEBUG | __sizeof__
2021-11-09 at 10:33:42 | DEBUG | __str__
2021-11-09 at 10:33:42 | DEBUG | __subclasshook__
2021-11-09 at 10:33:42 | DEBUG | __visit_name__
2021-11-09 at 10:33:42 | DEBUG | __weakref__
2021-11-09 at 10:33:42 | DEBUG | _add_table
2021-11-09 at 10:33:42 | DEBUG | _bind
2021-11-09 at 10:33:42 | DEBUG | _bind_to
2021-11-09 at 10:33:42 | DEBUG | _compiler_dispatch
2021-11-09 at 10:33:42 | DEBUG | _fk_memos
2021-11-09 at 10:33:42 | DEBUG | _init_items
2021-11-09 at 10:33:42 | DEBUG | _original_compiler_dispatch
2021-11-09 at 10:33:42 | DEBUG | _remove_table
2021-11-09 at 10:33:42 | DEBUG | _schema_item_copy
2021-11-09 at 10:33:42 | DEBUG | _schemas
2021-11-09 at 10:33:42 | DEBUG | _sequences
2021-11-09 at 10:33:42 | DEBUG | _set_parent
2021-11-09 at 10:33:42 | DEBUG | _set_parent_with_dispatch
2021-11-09 at 10:33:42 | DEBUG | _use_schema_map
2021-11-09 at 10:33:42 | DEBUG | bind
2021-11-09 at 10:33:42 | DEBUG | clear
2021-11-09 at 10:33:42 | DEBUG | create_all
2021-11-09 at 10:33:42 | DEBUG | create_drop_stringify_dialect
2021-11-09 at 10:33:42 | DEBUG | dispatch
2021-11-09 at 10:33:42 | DEBUG | drop_all
2021-11-09 at 10:33:42 | DEBUG | get_children
2021-11-09 at 10:33:42 | DEBUG | info
2021-11-09 at 10:33:42 | DEBUG | is_bound
2021-11-09 at 10:33:42 | DEBUG | naming_convention
2021-11-09 at 10:33:42 | DEBUG | reflect
2021-11-09 at 10:33:42 | DEBUG | remove
2021-11-09 at 10:33:42 | DEBUG | schema
2021-11-09 at 10:33:42 | DEBUG | sorted_tables
2021-11-09 at 10:33:42 | DEBUG | tables
2021-11-09 at 10:33:42 | DEBUG | ===================================================
2021-11-09 at 10:33:42 | DEBUG | items
2021-11-09 at 10:33:42 | DEBUG | offices
2021-11-09 at 10:33:42 | DEBUG | productlines
2021-11-09 at 10:33:42 | DEBUG | tokens
2021-11-09 at 10:33:42 | DEBUG | zinopara
2021-11-09 at 10:33:42 | DEBUG | employees
2021-11-09 at 10:33:42 | DEBUG | products
2021-11-09 at 10:33:42 | DEBUG | customers
2021-11-09 at 10:33:42 | DEBUG | orders
2021-11-09 at 10:33:42 | DEBUG | payments
2021-11-09 at 10:33:42 | DEBUG | orderdetails
2021-11-09 at 10:33:42 | DEBUG | ****************************************************
2021-11-09 at 10:33:42 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:44:43 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:44:44 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ]
2021-11-09 at 10:44:44 | DEBUG | Generate Schema file from database ...
2021-11-09 at 10:44:44 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 10:44:44 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:44:44 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 10:44:44 | DEBUG | ****************************************************
2021-11-09 at 10:44:44 | DEBUG | __class__
2021-11-09 at 10:44:44 | DEBUG | __class_getitem__
2021-11-09 at 10:44:44 | DEBUG | __contains__
2021-11-09 at 10:44:44 | DEBUG | __delattr__
2021-11-09 at 10:44:44 | DEBUG | __dict__
2021-11-09 at 10:44:44 | DEBUG | __dir__
2021-11-09 at 10:44:44 | DEBUG | __doc__
2021-11-09 at 10:44:44 | DEBUG | __eq__
2021-11-09 at 10:44:44 | DEBUG | __format__
2021-11-09 at 10:44:44 | DEBUG | __ge__
2021-11-09 at 10:44:44 | DEBUG | __getattribute__
2021-11-09 at 10:44:44 | DEBUG | __getstate__
2021-11-09 at 10:44:44 | DEBUG | __gt__
2021-11-09 at 10:44:44 | DEBUG | __hash__
2021-11-09 at 10:44:44 | DEBUG | __init__
2021-11-09 at 10:44:44 | DEBUG | __init_subclass__
2021-11-09 at 10:44:44 | DEBUG | __le__
2021-11-09 at 10:44:44 | DEBUG | __lt__
2021-11-09 at 10:44:44 | DEBUG | __module__
2021-11-09 at 10:44:44 | DEBUG | __ne__
2021-11-09 at 10:44:44 | DEBUG | __new__
2021-11-09 at 10:44:44 | DEBUG | __reduce__
2021-11-09 at 10:44:44 | DEBUG | __reduce_ex__
2021-11-09 at 10:44:44 | DEBUG | __repr__
2021-11-09 at 10:44:44 | DEBUG | __setattr__
2021-11-09 at 10:44:44 | DEBUG | __setstate__
2021-11-09 at 10:44:44 | DEBUG | __sizeof__
2021-11-09 at 10:44:44 | DEBUG | __str__
2021-11-09 at 10:44:44 | DEBUG | __subclasshook__
2021-11-09 at 10:44:44 | DEBUG | __visit_name__
2021-11-09 at 10:44:44 | DEBUG | __weakref__
2021-11-09 at 10:44:44 | DEBUG | _add_table
2021-11-09 at 10:44:44 | DEBUG | _bind
2021-11-09 at 10:44:44 | DEBUG | _bind_to
2021-11-09 at 10:44:44 | DEBUG | _compiler_dispatch
2021-11-09 at 10:44:44 | DEBUG | _fk_memos
2021-11-09 at 10:44:44 | DEBUG | _init_items
2021-11-09 at 10:44:44 | DEBUG | _original_compiler_dispatch
2021-11-09 at 10:44:44 | DEBUG | _remove_table
2021-11-09 at 10:44:44 | DEBUG | _schema_item_copy
2021-11-09 at 10:44:44 | DEBUG | _schemas
2021-11-09 at 10:44:44 | DEBUG | _sequences
2021-11-09 at 10:44:44 | DEBUG | _set_parent
2021-11-09 at 10:44:44 | DEBUG | _set_parent_with_dispatch
2021-11-09 at 10:44:44 | DEBUG | _use_schema_map
2021-11-09 at 10:44:44 | DEBUG | bind
2021-11-09 at 10:44:44 | DEBUG | clear
2021-11-09 at 10:44:44 | DEBUG | create_all
2021-11-09 at 10:44:44 | DEBUG | create_drop_stringify_dialect
2021-11-09 at 10:44:44 | DEBUG | dispatch
2021-11-09 at 10:44:44 | DEBUG | drop_all
2021-11-09 at 10:44:44 | DEBUG | get_children
2021-11-09 at 10:44:44 | DEBUG | info
2021-11-09 at 10:44:44 | DEBUG | is_bound
2021-11-09 at 10:44:44 | DEBUG | naming_convention
2021-11-09 at 10:44:44 | DEBUG | reflect
2021-11-09 at 10:44:44 | DEBUG | remove
2021-11-09 at 10:44:44 | DEBUG | schema
2021-11-09 at 10:44:44 | DEBUG | sorted_tables
2021-11-09 at 10:44:44 | DEBUG | tables
2021-11-09 at 10:44:44 | DEBUG | ===================================================
2021-11-09 at 10:44:44 | DEBUG | items
2021-11-09 at 10:44:44 | DEBUG | offices
2021-11-09 at 10:44:44 | DEBUG | productlines
2021-11-09 at 10:44:44 | DEBUG | tokens
2021-11-09 at 10:44:44 | DEBUG | zinopara
2021-11-09 at 10:44:44 | DEBUG | employees
2021-11-09 at 10:44:44 | DEBUG | products
2021-11-09 at 10:44:44 | DEBUG | customers
2021-11-09 at 10:44:44 | DEBUG | orders
2021-11-09 at 10:44:44 | DEBUG | payments
2021-11-09 at 10:44:44 | DEBUG | orderdetails
2021-11-09 at 10:44:44 | DEBUG | ****************************************************
2021-11-09 at 10:44:44 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:45:44 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:45:44 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ]
2021-11-09 at 10:45:44 | DEBUG | Generate Schema file from database ...
2021-11-09 at 10:45:44 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 10:45:44 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:45:44 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 10:45:44 | DEBUG | ****************************************************
2021-11-09 at 10:45:44 | DEBUG | __class__
2021-11-09 at 10:45:44 | DEBUG | __class_getitem__
2021-11-09 at 10:45:44 | DEBUG | __contains__
2021-11-09 at 10:45:44 | DEBUG | __delattr__
2021-11-09 at 10:45:44 | DEBUG | __dict__
2021-11-09 at 10:45:44 | DEBUG | __dir__
2021-11-09 at 10:45:44 | DEBUG | __doc__
2021-11-09 at 10:45:44 | DEBUG | __eq__
2021-11-09 at 10:45:44 | DEBUG | __format__
2021-11-09 at 10:45:44 | DEBUG | __ge__
2021-11-09 at 10:45:44 | DEBUG | __getattribute__
2021-11-09 at 10:45:44 | DEBUG | __getstate__
2021-11-09 at 10:45:44 | DEBUG | __gt__
2021-11-09 at 10:45:44 | DEBUG | __hash__
2021-11-09 at 10:45:44 | DEBUG | __init__
2021-11-09 at 10:45:44 | DEBUG | __init_subclass__
2021-11-09 at 10:45:44 | DEBUG | __le__
2021-11-09 at 10:45:44 | DEBUG | __lt__
2021-11-09 at 10:45:44 | DEBUG | __module__
2021-11-09 at 10:45:44 | DEBUG | __ne__
2021-11-09 at 10:45:44 | DEBUG | __new__
2021-11-09 at 10:45:44 | DEBUG | __reduce__
2021-11-09 at 10:45:44 | DEBUG | __reduce_ex__
2021-11-09 at 10:45:44 | DEBUG | __repr__
2021-11-09 at 10:45:44 | DEBUG | __setattr__
2021-11-09 at 10:45:44 | DEBUG | __setstate__
2021-11-09 at 10:45:44 | DEBUG | __sizeof__
2021-11-09 at 10:45:44 | DEBUG | __str__
2021-11-09 at 10:45:44 | DEBUG | __subclasshook__
2021-11-09 at 10:45:44 | DEBUG | __visit_name__
2021-11-09 at 10:45:44 | DEBUG | __weakref__
2021-11-09 at 10:45:44 | DEBUG | _add_table
2021-11-09 at 10:45:44 | DEBUG | _bind
2021-11-09 at 10:45:44 | DEBUG | _bind_to
2021-11-09 at 10:45:44 | DEBUG | _compiler_dispatch
2021-11-09 at 10:45:44 | DEBUG | _fk_memos
2021-11-09 at 10:45:44 | DEBUG | _init_items
2021-11-09 at 10:45:44 | DEBUG | _original_compiler_dispatch
2021-11-09 at 10:45:44 | DEBUG | _remove_table
2021-11-09 at 10:45:44 | DEBUG | _schema_item_copy
2021-11-09 at 10:45:44 | DEBUG | _schemas
2021-11-09 at 10:45:44 | DEBUG | _sequences
2021-11-09 at 10:45:44 | DEBUG | _set_parent
2021-11-09 at 10:45:44 | DEBUG | _set_parent_with_dispatch
2021-11-09 at 10:45:44 | DEBUG | _use_schema_map
2021-11-09 at 10:45:44 | DEBUG | bind
2021-11-09 at 10:45:44 | DEBUG | clear
2021-11-09 at 10:45:44 | DEBUG | create_all
2021-11-09 at 10:45:44 | DEBUG | create_drop_stringify_dialect
2021-11-09 at 10:45:44 | DEBUG | dispatch
2021-11-09 at 10:45:44 | DEBUG | drop_all
2021-11-09 at 10:45:44 | DEBUG | get_children
2021-11-09 at 10:45:44 | DEBUG | info
2021-11-09 at 10:45:44 | DEBUG | is_bound
2021-11-09 at 10:45:44 | DEBUG | naming_convention
2021-11-09 at 10:45:44 | DEBUG | reflect
2021-11-09 at 10:45:44 | DEBUG | remove
2021-11-09 at 10:45:44 | DEBUG | schema
2021-11-09 at 10:45:44 | DEBUG | sorted_tables
2021-11-09 at 10:45:44 | DEBUG | tables
2021-11-09 at 10:45:44 | DEBUG | ===================================================
2021-11-09 at 10:45:44 | DEBUG | items
2021-11-09 at 10:45:44 | DEBUG | offices
2021-11-09 at 10:45:44 | DEBUG | productlines
2021-11-09 at 10:45:44 | DEBUG | tokens
2021-11-09 at 10:45:44 | DEBUG | zinopara
2021-11-09 at 10:45:44 | DEBUG | employees
2021-11-09 at 10:45:45 | DEBUG | products
2021-11-09 at 10:45:45 | DEBUG | customers
2021-11-09 at 10:45:45 | DEBUG | orders
2021-11-09 at 10:45:45 | DEBUG | payments
2021-11-09 at 10:45:45 | DEBUG | orderdetails
2021-11-09 at 10:45:45 | DEBUG | ****************************************************
2021-11-09 at 10:45:45 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 10:47:54 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:48:08 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:48:35 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:48:36 | DEBUG | UserFunc query():
2021-11-09 at 10:48:36 | DEBUG | sqlstr: select * from orders where id > :id limit 10
2021-11-09 at 10:48:36 | DEBUG | sqlparam: {'id': 10000}
2021-11-09 at 10:48:36 | DEBUG | SQL of Query: [ select * from orders where id > :id limit 10 ]
2021-11-09 at 10:48:36 | ERROR | Exception at userfunc query(): (pymysql.err.OperationalError) (1054, "Unknown column 'id' in 'where clause'")
[SQL: select * from orders where id > %(id)s limit 10]
[parameters: {'id': 10000}]
(Background on this error at: https://sqlalche.me/e/14/e3q8) 
2021-11-09 at 10:48:36 | DEBUG | {'updateResult': 'Error', 'updateError': 'Exception at userfunc query(): (pymysql.err.OperationalError) (1054, "Unknown column \'id\' in \'where clause\'")\n[SQL: select * from orders where id > %(id)s limit 10]\n[parameters: {\'id\': 10000}]\n(Background on this error at: https://sqlalche.me/e/14/e3q8) '}
2021-11-09 at 10:49:30 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:49:30 | DEBUG | UserFunc query():
2021-11-09 at 10:49:30 | DEBUG | sqlstr: select * from orders where orderNumber > :id limit 10
2021-11-09 at 10:49:30 | DEBUG | sqlparam: {'id': 10000}
2021-11-09 at 10:49:30 | DEBUG | SQL of Query: [ select * from orders where orderNumber > :id limit 10 ]
2021-11-09 at 10:49:30 | DEBUG | Select Result: [ <sqlalchemy.engine.cursor.LegacyCursorResult object at 0x10a4543a0> ]
2021-11-09 at 10:49:30 | DEBUG | Select Result Return : [ 10 ] rows 
2021-11-09 at 10:49:30 | DEBUG | {'data': [{'orderNumber': 10100, 'orderDate': '2013-01-06', 'requiredDate': '2013-01-13', 'shippedDate': '2013-01-10', 'status': 'Shipped', 'comments': None, 'customerNumber': 363}, {'orderNumber': 10101, 'orderDate': '2013-01-09', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-11', 'status': 'Shipped', 'comments': 'Check on availability.', 'customerNumber': 128}, {'orderNumber': 10102, 'orderDate': '2013-01-10', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-14', 'status': 'Shipped', 'comments': None, 'customerNumber': 181}, {'orderNumber': 10103, 'orderDate': '2013-01-29', 'requiredDate': '2013-02-07', 'shippedDate': '2013-02-02', 'status': 'Shipped', 'comments': None, 'customerNumber': 121}, {'orderNumber': 10104, 'orderDate': '2013-01-31', 'requiredDate': '2013-02-09', 'shippedDate': '2013-02-01', 'status': 'Shipped', 'comments': None, 'customerNumber': 141}, {'orderNumber': 10105, 'orderDate': '2013-02-11', 'requiredDate': '2013-02-21', 'shippedDate': '2013-02-12', 'status': 'Shipped', 'comments': None, 'customerNumber': 145}, {'orderNumber': 10106, 'orderDate': '2013-02-17', 'requiredDate': '2013-02-24', 'shippedDate': '2013-02-21', 'status': 'Shipped', 'comments': None, 'customerNumber': 278}, {'orderNumber': 10107, 'orderDate': '2013-02-24', 'requiredDate': '2013-03-03', 'shippedDate': '2013-02-26', 'status': 'Shipped', 'comments': 'Difficult to negotiate with customer. We need more marketing materials', 'customerNumber': 131}, {'orderNumber': 10108, 'orderDate': '2013-03-03', 'requiredDate': '2013-03-12', 'shippedDate': '2013-03-08', 'status': 'Shipped', 'comments': None, 'customerNumber': 385}, {'orderNumber': 10109, 'orderDate': '2013-03-10', 'requiredDate': '2013-03-19', 'shippedDate': '2013-03-11', 'status': 'Shipped', 'comments': 'Customer requested that FedEx Ground is used for this shipping', 'customerNumber': 486}]}
2021-11-09 at 10:51:34 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:51:34 | DEBUG | UserFunc query():
2021-11-09 at 10:51:34 | DEBUG | sqlstr: select * from orders where orderNumber > :id limit 10
2021-11-09 at 10:51:34 | DEBUG | sqlparam: {'id': 10000}
2021-11-09 at 10:51:34 | DEBUG | SQL of Query: [ select * from orders where orderNumber > :id limit 10 ]
2021-11-09 at 10:51:34 | DEBUG | Select Result: [ <sqlalchemy.engine.cursor.LegacyCursorResult object at 0x11211d2b0> ]
2021-11-09 at 10:51:34 | DEBUG | Select Result Return : [ 10 ] rows 
2021-11-09 at 10:51:34 | DEBUG | {'data': [{'orderNumber': 10100, 'orderDate': '2013-01-06', 'requiredDate': '2013-01-13', 'shippedDate': '2013-01-10', 'status': 'Shipped', 'comments': None, 'customerNumber': 363}, {'orderNumber': 10101, 'orderDate': '2013-01-09', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-11', 'status': 'Shipped', 'comments': 'Check on availability.', 'customerNumber': 128}, {'orderNumber': 10102, 'orderDate': '2013-01-10', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-14', 'status': 'Shipped', 'comments': None, 'customerNumber': 181}, {'orderNumber': 10103, 'orderDate': '2013-01-29', 'requiredDate': '2013-02-07', 'shippedDate': '2013-02-02', 'status': 'Shipped', 'comments': None, 'customerNumber': 121}, {'orderNumber': 10104, 'orderDate': '2013-01-31', 'requiredDate': '2013-02-09', 'shippedDate': '2013-02-01', 'status': 'Shipped', 'comments': None, 'customerNumber': 141}, {'orderNumber': 10105, 'orderDate': '2013-02-11', 'requiredDate': '2013-02-21', 'shippedDate': '2013-02-12', 'status': 'Shipped', 'comments': None, 'customerNumber': 145}, {'orderNumber': 10106, 'orderDate': '2013-02-17', 'requiredDate': '2013-02-24', 'shippedDate': '2013-02-21', 'status': 'Shipped', 'comments': None, 'customerNumber': 278}, {'orderNumber': 10107, 'orderDate': '2013-02-24', 'requiredDate': '2013-03-03', 'shippedDate': '2013-02-26', 'status': 'Shipped', 'comments': 'Difficult to negotiate with customer. We need more marketing materials', 'customerNumber': 131}, {'orderNumber': 10108, 'orderDate': '2013-03-03', 'requiredDate': '2013-03-12', 'shippedDate': '2013-03-08', 'status': 'Shipped', 'comments': None, 'customerNumber': 385}, {'orderNumber': 10109, 'orderDate': '2013-03-10', 'requiredDate': '2013-03-19', 'shippedDate': '2013-03-11', 'status': 'Shipped', 'comments': 'Customer requested that FedEx Ground is used for this shipping', 'customerNumber': 486}]}
2021-11-09 at 10:51:40 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:51:40 | DEBUG | UserFunc query():
2021-11-09 at 10:51:40 | DEBUG | sqlstr: select * from orders where orderNumber > :id limit 10
2021-11-09 at 10:51:40 | DEBUG | sqlparam: {'id': 10000}
2021-11-09 at 10:51:40 | DEBUG | SQL of Query: [ select * from orders where orderNumber > :id limit 10 ]
2021-11-09 at 10:51:40 | DEBUG | Select Result: [ <sqlalchemy.engine.cursor.LegacyCursorResult object at 0x105dbe3a0> ]
2021-11-09 at 10:51:40 | DEBUG | Select Result Return : [ 10 ] rows 
2021-11-09 at 10:51:40 | DEBUG | {'data': [{'orderNumber': 10100, 'orderDate': '2013-01-06', 'requiredDate': '2013-01-13', 'shippedDate': '2013-01-10', 'status': 'Shipped', 'comments': None, 'customerNumber': 363}, {'orderNumber': 10101, 'orderDate': '2013-01-09', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-11', 'status': 'Shipped', 'comments': 'Check on availability.', 'customerNumber': 128}, {'orderNumber': 10102, 'orderDate': '2013-01-10', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-14', 'status': 'Shipped', 'comments': None, 'customerNumber': 181}, {'orderNumber': 10103, 'orderDate': '2013-01-29', 'requiredDate': '2013-02-07', 'shippedDate': '2013-02-02', 'status': 'Shipped', 'comments': None, 'customerNumber': 121}, {'orderNumber': 10104, 'orderDate': '2013-01-31', 'requiredDate': '2013-02-09', 'shippedDate': '2013-02-01', 'status': 'Shipped', 'comments': None, 'customerNumber': 141}, {'orderNumber': 10105, 'orderDate': '2013-02-11', 'requiredDate': '2013-02-21', 'shippedDate': '2013-02-12', 'status': 'Shipped', 'comments': None, 'customerNumber': 145}, {'orderNumber': 10106, 'orderDate': '2013-02-17', 'requiredDate': '2013-02-24', 'shippedDate': '2013-02-21', 'status': 'Shipped', 'comments': None, 'customerNumber': 278}, {'orderNumber': 10107, 'orderDate': '2013-02-24', 'requiredDate': '2013-03-03', 'shippedDate': '2013-02-26', 'status': 'Shipped', 'comments': 'Difficult to negotiate with customer. We need more marketing materials', 'customerNumber': 131}, {'orderNumber': 10108, 'orderDate': '2013-03-03', 'requiredDate': '2013-03-12', 'shippedDate': '2013-03-08', 'status': 'Shipped', 'comments': None, 'customerNumber': 385}, {'orderNumber': 10109, 'orderDate': '2013-03-10', 'requiredDate': '2013-03-19', 'shippedDate': '2013-03-11', 'status': 'Shipped', 'comments': 'Customer requested that FedEx Ground is used for this shipping', 'customerNumber': 486}]}
2021-11-09 at 10:51:42 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:51:42 | DEBUG | UserFunc query():
2021-11-09 at 10:51:42 | DEBUG | sqlstr: select * from orders where orderNumber > :id limit 10
2021-11-09 at 10:51:42 | DEBUG | sqlparam: {'id': 10000}
2021-11-09 at 10:51:42 | DEBUG | SQL of Query: [ select * from orders where orderNumber > :id limit 10 ]
2021-11-09 at 10:51:42 | DEBUG | Select Result: [ <sqlalchemy.engine.cursor.LegacyCursorResult object at 0x106ab43a0> ]
2021-11-09 at 10:51:42 | DEBUG | Select Result Return : [ 10 ] rows 
2021-11-09 at 10:51:42 | DEBUG | {'data': [{'orderNumber': 10100, 'orderDate': '2013-01-06', 'requiredDate': '2013-01-13', 'shippedDate': '2013-01-10', 'status': 'Shipped', 'comments': None, 'customerNumber': 363}, {'orderNumber': 10101, 'orderDate': '2013-01-09', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-11', 'status': 'Shipped', 'comments': 'Check on availability.', 'customerNumber': 128}, {'orderNumber': 10102, 'orderDate': '2013-01-10', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-14', 'status': 'Shipped', 'comments': None, 'customerNumber': 181}, {'orderNumber': 10103, 'orderDate': '2013-01-29', 'requiredDate': '2013-02-07', 'shippedDate': '2013-02-02', 'status': 'Shipped', 'comments': None, 'customerNumber': 121}, {'orderNumber': 10104, 'orderDate': '2013-01-31', 'requiredDate': '2013-02-09', 'shippedDate': '2013-02-01', 'status': 'Shipped', 'comments': None, 'customerNumber': 141}, {'orderNumber': 10105, 'orderDate': '2013-02-11', 'requiredDate': '2013-02-21', 'shippedDate': '2013-02-12', 'status': 'Shipped', 'comments': None, 'customerNumber': 145}, {'orderNumber': 10106, 'orderDate': '2013-02-17', 'requiredDate': '2013-02-24', 'shippedDate': '2013-02-21', 'status': 'Shipped', 'comments': None, 'customerNumber': 278}, {'orderNumber': 10107, 'orderDate': '2013-02-24', 'requiredDate': '2013-03-03', 'shippedDate': '2013-02-26', 'status': 'Shipped', 'comments': 'Difficult to negotiate with customer. We need more marketing materials', 'customerNumber': 131}, {'orderNumber': 10108, 'orderDate': '2013-03-03', 'requiredDate': '2013-03-12', 'shippedDate': '2013-03-08', 'status': 'Shipped', 'comments': None, 'customerNumber': 385}, {'orderNumber': 10109, 'orderDate': '2013-03-10', 'requiredDate': '2013-03-19', 'shippedDate': '2013-03-11', 'status': 'Shipped', 'comments': 'Customer requested that FedEx Ground is used for this shipping', 'customerNumber': 486}]}
2021-11-09 at 10:51:44 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 10:51:44 | DEBUG | UserFunc query():
2021-11-09 at 10:51:44 | DEBUG | sqlstr: select * from orders where orderNumber > :id limit 10
2021-11-09 at 10:51:44 | DEBUG | sqlparam: {'id': 10000}
2021-11-09 at 10:51:44 | DEBUG | SQL of Query: [ select * from orders where orderNumber > :id limit 10 ]
2021-11-09 at 10:51:44 | DEBUG | Select Result: [ <sqlalchemy.engine.cursor.LegacyCursorResult object at 0x11060a1c0> ]
2021-11-09 at 10:51:44 | DEBUG | Select Result Return : [ 10 ] rows 
2021-11-09 at 10:51:44 | DEBUG | {'data': [{'orderNumber': 10100, 'orderDate': '2013-01-06', 'requiredDate': '2013-01-13', 'shippedDate': '2013-01-10', 'status': 'Shipped', 'comments': None, 'customerNumber': 363}, {'orderNumber': 10101, 'orderDate': '2013-01-09', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-11', 'status': 'Shipped', 'comments': 'Check on availability.', 'customerNumber': 128}, {'orderNumber': 10102, 'orderDate': '2013-01-10', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-14', 'status': 'Shipped', 'comments': None, 'customerNumber': 181}, {'orderNumber': 10103, 'orderDate': '2013-01-29', 'requiredDate': '2013-02-07', 'shippedDate': '2013-02-02', 'status': 'Shipped', 'comments': None, 'customerNumber': 121}, {'orderNumber': 10104, 'orderDate': '2013-01-31', 'requiredDate': '2013-02-09', 'shippedDate': '2013-02-01', 'status': 'Shipped', 'comments': None, 'customerNumber': 141}, {'orderNumber': 10105, 'orderDate': '2013-02-11', 'requiredDate': '2013-02-21', 'shippedDate': '2013-02-12', 'status': 'Shipped', 'comments': None, 'customerNumber': 145}, {'orderNumber': 10106, 'orderDate': '2013-02-17', 'requiredDate': '2013-02-24', 'shippedDate': '2013-02-21', 'status': 'Shipped', 'comments': None, 'customerNumber': 278}, {'orderNumber': 10107, 'orderDate': '2013-02-24', 'requiredDate': '2013-03-03', 'shippedDate': '2013-02-26', 'status': 'Shipped', 'comments': 'Difficult to negotiate with customer. We need more marketing materials', 'customerNumber': 131}, {'orderNumber': 10108, 'orderDate': '2013-03-03', 'requiredDate': '2013-03-12', 'shippedDate': '2013-03-08', 'status': 'Shipped', 'comments': None, 'customerNumber': 385}, {'orderNumber': 10109, 'orderDate': '2013-03-10', 'requiredDate': '2013-03-19', 'shippedDate': '2013-03-11', 'status': 'Shipped', 'comments': 'Customer requested that FedEx Ground is used for this shipping', 'customerNumber': 486}]}
2021-11-09 at 11:15:33 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 11:15:33 | DEBUG | UserFunc query():
2021-11-09 at 11:15:33 | DEBUG | sqlstr: select * from orders where orderNumber > :id limit 10
2021-11-09 at 11:15:33 | DEBUG | sqlparam: {'id': 10000}
2021-11-09 at 11:15:33 | DEBUG | SQL of Query: [ select * from orders where orderNumber > :id limit 10 ]
2021-11-09 at 11:15:33 | DEBUG | Select Result: [ <sqlalchemy.engine.cursor.LegacyCursorResult object at 0x10a4b83a0> ]
2021-11-09 at 11:15:33 | DEBUG | Select Result Return : [ 10 ] rows 
2021-11-09 at 11:15:33 | DEBUG | {'data': [{'orderNumber': 10100, 'orderDate': '2013-01-06', 'requiredDate': '2013-01-13', 'shippedDate': '2013-01-10', 'status': 'Shipped', 'comments': None, 'customerNumber': 363}, {'orderNumber': 10101, 'orderDate': '2013-01-09', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-11', 'status': 'Shipped', 'comments': 'Check on availability.', 'customerNumber': 128}, {'orderNumber': 10102, 'orderDate': '2013-01-10', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-14', 'status': 'Shipped', 'comments': None, 'customerNumber': 181}, {'orderNumber': 10103, 'orderDate': '2013-01-29', 'requiredDate': '2013-02-07', 'shippedDate': '2013-02-02', 'status': 'Shipped', 'comments': None, 'customerNumber': 121}, {'orderNumber': 10104, 'orderDate': '2013-01-31', 'requiredDate': '2013-02-09', 'shippedDate': '2013-02-01', 'status': 'Shipped', 'comments': None, 'customerNumber': 141}, {'orderNumber': 10105, 'orderDate': '2013-02-11', 'requiredDate': '2013-02-21', 'shippedDate': '2013-02-12', 'status': 'Shipped', 'comments': None, 'customerNumber': 145}, {'orderNumber': 10106, 'orderDate': '2013-02-17', 'requiredDate': '2013-02-24', 'shippedDate': '2013-02-21', 'status': 'Shipped', 'comments': None, 'customerNumber': 278}, {'orderNumber': 10107, 'orderDate': '2013-02-24', 'requiredDate': '2013-03-03', 'shippedDate': '2013-02-26', 'status': 'Shipped', 'comments': 'Difficult to negotiate with customer. We need more marketing materials', 'customerNumber': 131}, {'orderNumber': 10108, 'orderDate': '2013-03-03', 'requiredDate': '2013-03-12', 'shippedDate': '2013-03-08', 'status': 'Shipped', 'comments': None, 'customerNumber': 385}, {'orderNumber': 10109, 'orderDate': '2013-03-10', 'requiredDate': '2013-03-19', 'shippedDate': '2013-03-11', 'status': 'Shipped', 'comments': 'Customer requested that FedEx Ground is used for this shipping', 'customerNumber': 486}]}
2021-11-09 at 11:17:41 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 11:17:41 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ]
2021-11-09 at 11:17:41 | DEBUG | Generate Schema file from database ...
2021-11-09 at 11:17:41 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 11:17:42 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 11:17:42 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 11:17:42 | DEBUG | ****************************************************
2021-11-09 at 11:17:42 | DEBUG | __class__
2021-11-09 at 11:17:42 | DEBUG | __class_getitem__
2021-11-09 at 11:17:42 | DEBUG | __contains__
2021-11-09 at 11:17:42 | DEBUG | __delattr__
2021-11-09 at 11:17:42 | DEBUG | __dict__
2021-11-09 at 11:17:42 | DEBUG | __dir__
2021-11-09 at 11:17:42 | DEBUG | __doc__
2021-11-09 at 11:17:42 | DEBUG | __eq__
2021-11-09 at 11:17:42 | DEBUG | __format__
2021-11-09 at 11:17:42 | DEBUG | __ge__
2021-11-09 at 11:17:42 | DEBUG | __getattribute__
2021-11-09 at 11:17:42 | DEBUG | __getstate__
2021-11-09 at 11:17:42 | DEBUG | __gt__
2021-11-09 at 11:17:42 | DEBUG | __hash__
2021-11-09 at 11:17:42 | DEBUG | __init__
2021-11-09 at 11:17:42 | DEBUG | __init_subclass__
2021-11-09 at 11:17:42 | DEBUG | __le__
2021-11-09 at 11:17:42 | DEBUG | __lt__
2021-11-09 at 11:17:42 | DEBUG | __module__
2021-11-09 at 11:17:42 | DEBUG | __ne__
2021-11-09 at 11:17:42 | DEBUG | __new__
2021-11-09 at 11:17:42 | DEBUG | __reduce__
2021-11-09 at 11:17:42 | DEBUG | __reduce_ex__
2021-11-09 at 11:17:42 | DEBUG | __repr__
2021-11-09 at 11:17:42 | DEBUG | __setattr__
2021-11-09 at 11:17:42 | DEBUG | __setstate__
2021-11-09 at 11:17:42 | DEBUG | __sizeof__
2021-11-09 at 11:17:42 | DEBUG | __str__
2021-11-09 at 11:17:42 | DEBUG | __subclasshook__
2021-11-09 at 11:17:42 | DEBUG | __visit_name__
2021-11-09 at 11:17:42 | DEBUG | __weakref__
2021-11-09 at 11:17:42 | DEBUG | _add_table
2021-11-09 at 11:17:42 | DEBUG | _bind
2021-11-09 at 11:17:42 | DEBUG | _bind_to
2021-11-09 at 11:17:42 | DEBUG | _compiler_dispatch
2021-11-09 at 11:17:42 | DEBUG | _fk_memos
2021-11-09 at 11:17:42 | DEBUG | _init_items
2021-11-09 at 11:17:42 | DEBUG | _original_compiler_dispatch
2021-11-09 at 11:17:42 | DEBUG | _remove_table
2021-11-09 at 11:17:42 | DEBUG | _schema_item_copy
2021-11-09 at 11:17:42 | DEBUG | _schemas
2021-11-09 at 11:17:42 | DEBUG | _sequences
2021-11-09 at 11:17:42 | DEBUG | _set_parent
2021-11-09 at 11:17:42 | DEBUG | _set_parent_with_dispatch
2021-11-09 at 11:17:42 | DEBUG | _use_schema_map
2021-11-09 at 11:17:42 | DEBUG | bind
2021-11-09 at 11:17:42 | DEBUG | clear
2021-11-09 at 11:17:42 | DEBUG | create_all
2021-11-09 at 11:17:42 | DEBUG | create_drop_stringify_dialect
2021-11-09 at 11:17:42 | DEBUG | dispatch
2021-11-09 at 11:17:42 | DEBUG | drop_all
2021-11-09 at 11:17:42 | DEBUG | get_children
2021-11-09 at 11:17:42 | DEBUG | info
2021-11-09 at 11:17:42 | DEBUG | is_bound
2021-11-09 at 11:17:42 | DEBUG | naming_convention
2021-11-09 at 11:17:42 | DEBUG | reflect
2021-11-09 at 11:17:42 | DEBUG | remove
2021-11-09 at 11:17:42 | DEBUG | schema
2021-11-09 at 11:17:42 | DEBUG | sorted_tables
2021-11-09 at 11:17:42 | DEBUG | tables
2021-11-09 at 11:17:42 | DEBUG | ===================================================
2021-11-09 at 11:17:42 | DEBUG | items
2021-11-09 at 11:17:42 | DEBUG | offices
2021-11-09 at 11:17:42 | DEBUG | productlines
2021-11-09 at 11:17:42 | DEBUG | tokens
2021-11-09 at 11:17:42 | DEBUG | zinopara
2021-11-09 at 11:17:42 | DEBUG | employees
2021-11-09 at 11:17:42 | DEBUG | products
2021-11-09 at 11:17:42 | DEBUG | customers
2021-11-09 at 11:17:42 | DEBUG | orders
2021-11-09 at 11:17:42 | DEBUG | payments
2021-11-09 at 11:17:42 | DEBUG | orderdetails
2021-11-09 at 11:17:42 | DEBUG | ****************************************************
2021-11-09 at 11:17:42 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 11:26:29 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 11:26:44 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 11:26:44 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ]
2021-11-09 at 11:26:44 | DEBUG | Generate Schema file from database ...
2021-11-09 at 11:26:44 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 11:26:44 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 11:26:44 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 11:26:44 | DEBUG | table select():
2021-11-09 at 11:26:44 | DEBUG | tablename: orders
2021-11-09 at 11:26:44 | DEBUG | fieldlist: *
2021-11-09 at 11:26:44 | DEBUG | filter: None
2021-11-09 at 11:26:44 | DEBUG | limit: 20
2021-11-09 at 11:26:44 | DEBUG | offset: 0
2021-11-09 at 11:26:44 | DEBUG | order: None
2021-11-09 at 11:26:44 | DEBUG | group: None
2021-11-09 at 11:26:44 | DEBUG | distinct: False
2021-11-09 at 11:26:44 | DEBUG | count_only: False
2021-11-09 at 11:26:44 | DEBUG | include_count: False
2021-11-09 at 11:26:44 | DEBUG | Table Columns: [Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False)]
2021-11-09 at 11:26:44 | DEBUG | SQL of Select: [ SELECT mysqlsrc.orders.`orderNumber`, mysqlsrc.orders.`orderDate`, mysqlsrc.orders.`requiredDate`, mysqlsrc.orders.`shippedDate`, mysqlsrc.orders.`status`, mysqlsrc.orders.comments, mysqlsrc.orders.`customerNumber` 
FROM mysqlsrc.orders 
 LIMIT %(param_1)s, %(param_2)s ]
2021-11-09 at 11:26:44 | DEBUG | SQL of Count: [ SELECT count(mysqlsrc.orders.`orderNumber`) AS col_count 
FROM mysqlsrc.orders ]
2021-11-09 at 11:26:44 | DEBUG | SQL of Query Full : [ SELECT mysqlsrc.orders.`orderNumber`, mysqlsrc.orders.`orderDate`, mysqlsrc.orders.`requiredDate`, mysqlsrc.orders.`shippedDate`, mysqlsrc.orders.`status`, mysqlsrc.orders.comments, mysqlsrc.orders.`customerNumber` 
FROM mysqlsrc.orders 
 LIMIT %(param_1)s, %(param_2)s ]
2021-11-09 at 11:26:44 | DEBUG | SQL of Count Full : [ SELECT count(mysqlsrc.orders.`orderNumber`) AS col_count 
FROM mysqlsrc.orders ]
2021-11-09 at 11:26:44 | DEBUG | Select Count Result: [ <sqlalchemy.engine.cursor.CursorResult object at 0x102dd5a60> ]
2021-11-09 at 11:26:44 | DEBUG | Select Result: [ <sqlalchemy.engine.cursor.LegacyCursorResult object at 0x102dcbfd0> ]
2021-11-09 at 11:26:44 | DEBUG | Select Result Return : [ 20 ] rows 
2021-11-09 at 11:26:44 | DEBUG | {'data': [{'orderNumber': 10100, 'orderDate': '2013-01-06', 'requiredDate': '2013-01-13', 'shippedDate': '2013-01-10', 'status': 'Shipped', 'comments': None, 'customerNumber': 363}, {'orderNumber': 10101, 'orderDate': '2013-01-09', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-11', 'status': 'Shipped', 'comments': 'Check on availability.', 'customerNumber': 128}, {'orderNumber': 10102, 'orderDate': '2013-01-10', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-14', 'status': 'Shipped', 'comments': None, 'customerNumber': 181}, {'orderNumber': 10103, 'orderDate': '2013-01-29', 'requiredDate': '2013-02-07', 'shippedDate': '2013-02-02', 'status': 'Shipped', 'comments': None, 'customerNumber': 121}, {'orderNumber': 10104, 'orderDate': '2013-01-31', 'requiredDate': '2013-02-09', 'shippedDate': '2013-02-01', 'status': 'Shipped', 'comments': None, 'customerNumber': 141}, {'orderNumber': 10105, 'orderDate': '2013-02-11', 'requiredDate': '2013-02-21', 'shippedDate': '2013-02-12', 'status': 'Shipped', 'comments': None, 'customerNumber': 145}, {'orderNumber': 10106, 'orderDate': '2013-02-17', 'requiredDate': '2013-02-24', 'shippedDate': '2013-02-21', 'status': 'Shipped', 'comments': None, 'customerNumber': 278}, {'orderNumber': 10107, 'orderDate': '2013-02-24', 'requiredDate': '2013-03-03', 'shippedDate': '2013-02-26', 'status': 'Shipped', 'comments': 'Difficult to negotiate with customer. We need more marketing materials', 'customerNumber': 131}, {'orderNumber': 10108, 'orderDate': '2013-03-03', 'requiredDate': '2013-03-12', 'shippedDate': '2013-03-08', 'status': 'Shipped', 'comments': None, 'customerNumber': 385}, {'orderNumber': 10109, 'orderDate': '2013-03-10', 'requiredDate': '2013-03-19', 'shippedDate': '2013-03-11', 'status': 'Shipped', 'comments': 'Customer requested that FedEx Ground is used for this shipping', 'customerNumber': 486}, {'orderNumber': 10110, 'orderDate': '2013-03-18', 'requiredDate': '2013-03-24', 'shippedDate': '2013-03-20', 'status': 'Shipped', 'comments': None, 'customerNumber': 187}, {'orderNumber': 10111, 'orderDate': '2013-03-25', 'requiredDate': '2013-03-31', 'shippedDate': '2013-03-30', 'status': 'Shipped', 'comments': None, 'customerNumber': 129}, {'orderNumber': 10112, 'orderDate': '2013-03-24', 'requiredDate': '2013-04-03', 'shippedDate': '2013-03-29', 'status': 'Shipped', 'comments': 'Customer requested that ad materials (such as posters, pamphlets) be included in the shippment', 'customerNumber': 144}, {'orderNumber': 10113, 'orderDate': '2013-03-26', 'requiredDate': '2013-04-02', 'shippedDate': '2013-03-27', 'status': 'Shipped', 'comments': None, 'customerNumber': 124}, {'orderNumber': 10114, 'orderDate': '2013-04-01', 'requiredDate': '2013-04-07', 'shippedDate': '2013-04-02', 'status': 'Shipped', 'comments': None, 'customerNumber': 172}, {'orderNumber': 10115, 'orderDate': '2013-04-04', 'requiredDate': '2013-04-12', 'shippedDate': '2013-04-07', 'status': 'Shipped', 'comments': None, 'customerNumber': 424}, {'orderNumber': 10116, 'orderDate': '2013-04-11', 'requiredDate': '2013-04-19', 'shippedDate': '2013-04-13', 'status': 'Shipped', 'comments': None, 'customerNumber': 381}, {'orderNumber': 10117, 'orderDate': '2013-04-16', 'requiredDate': '2013-04-24', 'shippedDate': '2013-04-17', 'status': 'Shipped', 'comments': None, 'customerNumber': 148}, {'orderNumber': 10118, 'orderDate': '2013-04-21', 'requiredDate': '2013-04-29', 'shippedDate': '2013-04-26', 'status': 'Shipped', 'comments': 'Customer has worked with some of our vendors in the past and is aware of their MSRP', 'customerNumber': 216}, {'orderNumber': 10119, 'orderDate': '2013-04-28', 'requiredDate': '2013-05-05', 'shippedDate': '2013-05-02', 'status': 'Shipped', 'comments': None, 'customerNumber': 382}]}
2021-11-09 at 11:27:12 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 11:27:12 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ]
2021-11-09 at 11:27:12 | DEBUG | Generate Schema file from database ...
2021-11-09 at 11:27:12 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 11:27:12 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 11:27:12 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 11:27:12 | DEBUG | table select():
2021-11-09 at 11:27:12 | DEBUG | tablename: orders
2021-11-09 at 11:27:12 | DEBUG | fieldlist: *
2021-11-09 at 11:27:12 | DEBUG | filter: None
2021-11-09 at 11:27:12 | DEBUG | limit: 20
2021-11-09 at 11:27:12 | DEBUG | offset: 0
2021-11-09 at 11:27:12 | DEBUG | order: None
2021-11-09 at 11:27:12 | DEBUG | group: None
2021-11-09 at 11:27:12 | DEBUG | distinct: False
2021-11-09 at 11:27:12 | DEBUG | count_only: False
2021-11-09 at 11:27:12 | DEBUG | include_count: False
2021-11-09 at 11:27:12 | DEBUG | Table Columns: [Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False)]
2021-11-09 at 11:27:12 | DEBUG | SQL of Select: [ SELECT mysqlsrc.orders.`orderNumber`, mysqlsrc.orders.`orderDate`, mysqlsrc.orders.`requiredDate`, mysqlsrc.orders.`shippedDate`, mysqlsrc.orders.`status`, mysqlsrc.orders.comments, mysqlsrc.orders.`customerNumber` 
FROM mysqlsrc.orders 
 LIMIT %(param_1)s, %(param_2)s ]
2021-11-09 at 11:27:12 | DEBUG | SQL of Count: [ SELECT count(mysqlsrc.orders.`orderNumber`) AS col_count 
FROM mysqlsrc.orders ]
2021-11-09 at 11:27:12 | DEBUG | SQL of Query Full : [ SELECT mysqlsrc.orders.`orderNumber`, mysqlsrc.orders.`orderDate`, mysqlsrc.orders.`requiredDate`, mysqlsrc.orders.`shippedDate`, mysqlsrc.orders.`status`, mysqlsrc.orders.comments, mysqlsrc.orders.`customerNumber` 
FROM mysqlsrc.orders 
 LIMIT %(param_1)s, %(param_2)s ]
2021-11-09 at 11:27:12 | DEBUG | SQL of Count Full : [ SELECT count(mysqlsrc.orders.`orderNumber`) AS col_count 
FROM mysqlsrc.orders ]
2021-11-09 at 11:27:12 | DEBUG | Select Count Result: [ <sqlalchemy.engine.cursor.CursorResult object at 0x10f9a1af0> ]
2021-11-09 at 11:27:12 | DEBUG | Select Result: [ <sqlalchemy.engine.cursor.LegacyCursorResult object at 0x10f6e3fd0> ]
2021-11-09 at 11:27:12 | DEBUG | Select Result Return : [ 20 ] rows 
2021-11-09 at 11:27:12 | DEBUG | {'data': [{'orderNumber': 10100, 'orderDate': '2013-01-06', 'requiredDate': '2013-01-13', 'shippedDate': '2013-01-10', 'status': 'Shipped', 'comments': None, 'customerNumber': 363}, {'orderNumber': 10101, 'orderDate': '2013-01-09', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-11', 'status': 'Shipped', 'comments': 'Check on availability.', 'customerNumber': 128}, {'orderNumber': 10102, 'orderDate': '2013-01-10', 'requiredDate': '2013-01-18', 'shippedDate': '2013-01-14', 'status': 'Shipped', 'comments': None, 'customerNumber': 181}, {'orderNumber': 10103, 'orderDate': '2013-01-29', 'requiredDate': '2013-02-07', 'shippedDate': '2013-02-02', 'status': 'Shipped', 'comments': None, 'customerNumber': 121}, {'orderNumber': 10104, 'orderDate': '2013-01-31', 'requiredDate': '2013-02-09', 'shippedDate': '2013-02-01', 'status': 'Shipped', 'comments': None, 'customerNumber': 141}, {'orderNumber': 10105, 'orderDate': '2013-02-11', 'requiredDate': '2013-02-21', 'shippedDate': '2013-02-12', 'status': 'Shipped', 'comments': None, 'customerNumber': 145}, {'orderNumber': 10106, 'orderDate': '2013-02-17', 'requiredDate': '2013-02-24', 'shippedDate': '2013-02-21', 'status': 'Shipped', 'comments': None, 'customerNumber': 278}, {'orderNumber': 10107, 'orderDate': '2013-02-24', 'requiredDate': '2013-03-03', 'shippedDate': '2013-02-26', 'status': 'Shipped', 'comments': 'Difficult to negotiate with customer. We need more marketing materials', 'customerNumber': 131}, {'orderNumber': 10108, 'orderDate': '2013-03-03', 'requiredDate': '2013-03-12', 'shippedDate': '2013-03-08', 'status': 'Shipped', 'comments': None, 'customerNumber': 385}, {'orderNumber': 10109, 'orderDate': '2013-03-10', 'requiredDate': '2013-03-19', 'shippedDate': '2013-03-11', 'status': 'Shipped', 'comments': 'Customer requested that FedEx Ground is used for this shipping', 'customerNumber': 486}, {'orderNumber': 10110, 'orderDate': '2013-03-18', 'requiredDate': '2013-03-24', 'shippedDate': '2013-03-20', 'status': 'Shipped', 'comments': None, 'customerNumber': 187}, {'orderNumber': 10111, 'orderDate': '2013-03-25', 'requiredDate': '2013-03-31', 'shippedDate': '2013-03-30', 'status': 'Shipped', 'comments': None, 'customerNumber': 129}, {'orderNumber': 10112, 'orderDate': '2013-03-24', 'requiredDate': '2013-04-03', 'shippedDate': '2013-03-29', 'status': 'Shipped', 'comments': 'Customer requested that ad materials (such as posters, pamphlets) be included in the shippment', 'customerNumber': 144}, {'orderNumber': 10113, 'orderDate': '2013-03-26', 'requiredDate': '2013-04-02', 'shippedDate': '2013-03-27', 'status': 'Shipped', 'comments': None, 'customerNumber': 124}, {'orderNumber': 10114, 'orderDate': '2013-04-01', 'requiredDate': '2013-04-07', 'shippedDate': '2013-04-02', 'status': 'Shipped', 'comments': None, 'customerNumber': 172}, {'orderNumber': 10115, 'orderDate': '2013-04-04', 'requiredDate': '2013-04-12', 'shippedDate': '2013-04-07', 'status': 'Shipped', 'comments': None, 'customerNumber': 424}, {'orderNumber': 10116, 'orderDate': '2013-04-11', 'requiredDate': '2013-04-19', 'shippedDate': '2013-04-13', 'status': 'Shipped', 'comments': None, 'customerNumber': 381}, {'orderNumber': 10117, 'orderDate': '2013-04-16', 'requiredDate': '2013-04-24', 'shippedDate': '2013-04-17', 'status': 'Shipped', 'comments': None, 'customerNumber': 148}, {'orderNumber': 10118, 'orderDate': '2013-04-21', 'requiredDate': '2013-04-29', 'shippedDate': '2013-04-26', 'status': 'Shipped', 'comments': 'Customer has worked with some of our vendors in the past and is aware of their MSRP', 'customerNumber': 216}, {'orderNumber': 10119, 'orderDate': '2013-04-28', 'requiredDate': '2013-05-05', 'shippedDate': '2013-05-02', 'status': 'Shipped', 'comments': None, 'customerNumber': 382}]}
2021-11-09 at 11:32:30 | INFO | Neptune Start Up ....
2021-11-09 at 11:32:30 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 11:32:31 | INFO | Neptune Starting ....
2021-11-09 at 11:32:31 | INFO | API cache cleared ....
2021-11-09 at 11:32:33 | DEBUG | Access '/' : run in app_root()
2021-11-09 at 11:32:54 | DEBUG | Access '/token' : run in login_for_access_token(), input data username: [admin] and password: [admin]
2021-11-09 at 11:32:54 | DEBUG | authenticate_user with username: [admin] and password: [admin]
2021-11-09 at 11:32:54 | DEBUG | verify_password with hashed_password: [$2b$12$WGpjvAAjcew9hylrN0RdBOuzFPhdpj9OBp4Hqkz3xLUXuBh72u7xu]
2021-11-09 at 11:32:55 | DEBUG | create_access_token with encoded_jwt: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTYzNjQzMDU3NX0.BOqoH6UyBFaQgVwdu5DvpnZE75vF9UatDTiYVyKZDxM]
2021-11-09 at 11:33:00 | DEBUG | Access '/_schema' : run in get_schema()
2021-11-09 at 11:35:00 | INFO | Neptune Shutting Down ....
2021-11-09 at 11:35:00 | INFO | API cache does not exists ....
2021-11-09 at 11:35:01 | INFO | Neptune Start Up ....
2021-11-09 at 11:35:01 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 11:35:01 | INFO | Neptune Starting ....
2021-11-09 at 11:35:01 | INFO | API cache does not exists ....
2021-11-09 at 11:35:13 | DEBUG | Access '/_schema' : run in get_schema()
2021-11-09 at 11:35:13 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 11:35:13 | DEBUG | Metadata cache save to [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ] 
2021-11-09 at 11:35:13 | DEBUG | Generate Schema file from database ...
2021-11-09 at 11:35:13 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 11:35:13 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 11:35:13 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 11:35:27 | DEBUG | Access '/_schema/{table_name}' : run in get_table_schema(), input data table_name: [zinopara]
2021-11-09 at 11:39:26 | INFO | Neptune Shutting Down ....
2021-11-09 at 11:39:26 | INFO | API cache cleared ....
2021-11-09 at 11:39:27 | INFO | Neptune Start Up ....
2021-11-09 at 11:39:27 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 11:39:39 | INFO | Neptune Start Up ....
2021-11-09 at 11:39:39 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 11:41:35 | INFO | Neptune Start Up ....
2021-11-09 at 11:41:35 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 11:42:30 | INFO | Neptune Start Up ....
2021-11-09 at 11:42:30 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 11:44:42 | INFO | Neptune Start Up ....
2021-11-09 at 11:44:42 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 11:44:42 | INFO | Add Custom query ...
2021-11-09 at 11:44:42 | INFO | Neptune Starting ....
2021-11-09 at 11:44:42 | INFO | API cache does not exists ....
2021-11-09 at 11:45:11 | DEBUG | Access '/token' : run in login_for_access_token(), input data username: [admin] and password: [admin]
2021-11-09 at 11:45:11 | DEBUG | authenticate_user with username: [admin] and password: [admin]
2021-11-09 at 11:45:11 | DEBUG | verify_password with hashed_password: [$2b$12$WGpjvAAjcew9hylrN0RdBOuzFPhdpj9OBp4Hqkz3xLUXuBh72u7xu]
2021-11-09 at 11:45:12 | DEBUG | create_access_token with encoded_jwt: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTYzNjQzMTMxMn0.Nl_PkjjV_7f5TTTu8pd9kit63qwkkjAdCSRZ4SC7uWY]
2021-11-09 at 11:45:17 | DEBUG | Access '/sys/status' : run in main.py, input data: [ Confirm ]
2021-11-09 at 11:45:17 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 11:45:21 | DEBUG | Access '/sys/status' : run in main.py, input data: [ Confirm ]
2021-11-09 at 11:45:35 | INFO | Neptune Shutting Down ....
2021-11-09 at 11:45:35 | INFO | API cache does not exists ....
2021-11-09 at 11:45:36 | INFO | Neptune Start Up ....
2021-11-09 at 11:45:36 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 11:45:36 | INFO | Add Custom query ...
2021-11-09 at 11:45:36 | INFO | Neptune Starting ....
2021-11-09 at 11:45:36 | INFO | API cache does not exists ....
2021-11-09 at 11:45:37 | DEBUG | Access '/sys/status' : run in main.py, input data: [ Confirm ]
2021-11-09 at 11:45:37 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 11:45:49 | DEBUG | Access '/sys/reloadmeta' : run in reload_meta(), input data: [ Confirm ]
2021-11-09 at 11:45:49 | INFO | API cache does not exists ....
2021-11-09 at 11:45:49 | DEBUG | Metadata cache save to [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ] 
2021-11-09 at 11:45:49 | DEBUG | Generate Schema file from database ...
2021-11-09 at 11:45:49 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 11:45:50 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 11:45:50 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 11:45:50 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ]
2021-11-09 at 11:45:50 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 11:45:52 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 11:45:52 | DEBUG | Schema load with [ 22 ] tables and [ 0 ] views
2021-11-09 at 11:48:59 | INFO | Neptune Shutting Down ....
2021-11-09 at 11:48:59 | INFO | API cache cleared ....
2021-11-09 at 11:49:02 | INFO | Neptune Start Up ....
2021-11-09 at 11:49:02 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 11:49:02 | INFO | Add Custom query ...
2021-11-09 at 11:49:02 | INFO | Neptune Starting ....
2021-11-09 at 11:49:02 | INFO | API cache does not exists ....
2021-11-09 at 11:49:10 | INFO | Neptune Shutting Down ....
2021-11-09 at 11:49:10 | INFO | API cache does not exists ....
2021-11-09 at 11:49:12 | INFO | Neptune Start Up ....
2021-11-09 at 11:49:12 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 11:49:12 | INFO | Add Custom query ...
2021-11-09 at 11:49:12 | INFO | Neptune Starting ....
2021-11-09 at 11:49:12 | INFO | API cache does not exists ....
2021-11-09 at 12:26:46 | DEBUG | Access '/token' : run in login_for_access_token(), input data username: [admin] and password: [admin]
2021-11-09 at 12:26:46 | DEBUG | authenticate_user with username: [admin] and password: [admin]
2021-11-09 at 12:26:46 | DEBUG | verify_password with hashed_password: [$2b$12$WGpjvAAjcew9hylrN0RdBOuzFPhdpj9OBp4Hqkz3xLUXuBh72u7xu]
2021-11-09 at 12:26:47 | DEBUG | create_access_token with encoded_jwt: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTYzNjQzMzgwN30.F8jDw5adKe5ea7gsYivVBCqozD3Y95V0lpRVmuUQtZo]
2021-11-09 at 12:26:50 | DEBUG | Access '/users/me/' : run in read_users_me()
2021-11-09 at 12:27:07 | DEBUG | Access '/_table/{table_name}' : run in get_data(), input data table_name: [customers]
2021-11-09 at 12:27:07 | DEBUG | fieldlist: [*]
2021-11-09 at 12:27:07 | DEBUG | filter: [None]
2021-11-09 at 12:27:07 | DEBUG | filterparam: [None]
2021-11-09 at 12:27:07 | DEBUG | limit: [20]
2021-11-09 at 12:27:07 | DEBUG | offset: [0]
2021-11-09 at 12:27:07 | DEBUG | order: [None]
2021-11-09 at 12:27:07 | DEBUG | group: [None]
2021-11-09 at 12:27:07 | DEBUG | distinct: [False]
2021-11-09 at 12:27:07 | DEBUG | count_only: [False]
2021-11-09 at 12:27:07 | DEBUG | include_count: [False]
2021-11-09 at 12:27:07 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 12:27:08 | DEBUG | Metadata cache save to [ /Users/zhangjun/.pyAPI_cache/neptune_metadata ] 
2021-11-09 at 12:27:08 | DEBUG | Generate Schema file from database ...
2021-11-09 at 12:27:08 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 12:27:09 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 12:27:09 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 12:27:09 | DEBUG | table select():
2021-11-09 at 12:27:09 | DEBUG | tablename: customers
2021-11-09 at 12:27:09 | DEBUG | fieldlist: *
2021-11-09 at 12:27:09 | DEBUG | filter: None
2021-11-09 at 12:27:09 | DEBUG | limit: 20
2021-11-09 at 12:27:09 | DEBUG | offset: 0
2021-11-09 at 12:27:09 | DEBUG | order: None
2021-11-09 at 12:27:09 | DEBUG | group: None
2021-11-09 at 12:27:09 | DEBUG | distinct: False
2021-11-09 at 12:27:09 | DEBUG | count_only: False
2021-11-09 at 12:27:09 | DEBUG | include_count: False
2021-11-09 at 12:27:09 | DEBUG | TableModel Columns: [Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>)]
2021-11-09 at 12:27:09 | DEBUG | SQL of Select: [ SELECT mysqlsrc.customers.`customerNumber`, mysqlsrc.customers.`customerName`, mysqlsrc.customers.`contactLastName`, mysqlsrc.customers.`contactFirstName`, mysqlsrc.customers.phone, mysqlsrc.customers.`addressLine1`, mysqlsrc.customers.`addressLine2`, mysqlsrc.customers.city, mysqlsrc.customers.state, mysqlsrc.customers.`postalCode`, mysqlsrc.customers.country, mysqlsrc.customers.`salesRepEmployeeNumber`, mysqlsrc.customers.`creditLimit` 
FROM mysqlsrc.customers 
 LIMIT %(param_1)s, %(param_2)s ]
2021-11-09 at 12:27:09 | DEBUG | SQL of Count: [ SELECT count(mysqlsrc.customers.`customerNumber`) AS col_count 
FROM mysqlsrc.customers ]
2021-11-09 at 12:27:09 | DEBUG | SQL of Query Full : [ SELECT mysqlsrc.customers.`customerNumber`, mysqlsrc.customers.`customerName`, mysqlsrc.customers.`contactLastName`, mysqlsrc.customers.`contactFirstName`, mysqlsrc.customers.phone, mysqlsrc.customers.`addressLine1`, mysqlsrc.customers.`addressLine2`, mysqlsrc.customers.city, mysqlsrc.customers.state, mysqlsrc.customers.`postalCode`, mysqlsrc.customers.country, mysqlsrc.customers.`salesRepEmployeeNumber`, mysqlsrc.customers.`creditLimit` 
FROM mysqlsrc.customers 
 LIMIT %(param_1)s, %(param_2)s ]
2021-11-09 at 12:27:09 | DEBUG | SQL of Count Full : [ SELECT count(mysqlsrc.customers.`customerNumber`) AS col_count 
FROM mysqlsrc.customers ]
2021-11-09 at 12:27:09 | DEBUG | Select Count Result: [ <sqlalchemy.engine.cursor.CursorResult object at 0x10fa1fc10> ]
2021-11-09 at 12:27:09 | DEBUG | Select Result: [ <sqlalchemy.engine.cursor.LegacyCursorResult object at 0x10f96b100> ]
2021-11-09 at 12:27:09 | DEBUG | Select Result Return : [ 20 ] rows 
2021-11-09 at 12:27:34 | DEBUG | Access '/_table/{table_name}' : run in get_data(), input data table_name: [customers]
2021-11-09 at 12:27:34 | DEBUG | fieldlist: [*]
2021-11-09 at 12:27:34 | DEBUG | filter: [None]
2021-11-09 at 12:27:34 | DEBUG | filterparam: [None]
2021-11-09 at 12:27:34 | DEBUG | limit: [50]
2021-11-09 at 12:27:34 | DEBUG | offset: [0]
2021-11-09 at 12:27:34 | DEBUG | order: [None]
2021-11-09 at 12:27:34 | DEBUG | group: [None]
2021-11-09 at 12:27:34 | DEBUG | distinct: [True]
2021-11-09 at 12:27:34 | DEBUG | count_only: [False]
2021-11-09 at 12:27:34 | DEBUG | include_count: [True]
2021-11-09 at 12:27:34 | DEBUG | table select():
2021-11-09 at 12:27:34 | DEBUG | tablename: customers
2021-11-09 at 12:27:34 | DEBUG | fieldlist: *
2021-11-09 at 12:27:34 | DEBUG | filter: None
2021-11-09 at 12:27:34 | DEBUG | limit: 50
2021-11-09 at 12:27:34 | DEBUG | offset: 0
2021-11-09 at 12:27:34 | DEBUG | order: None
2021-11-09 at 12:27:34 | DEBUG | group: None
2021-11-09 at 12:27:34 | DEBUG | distinct: True
2021-11-09 at 12:27:34 | DEBUG | count_only: False
2021-11-09 at 12:27:34 | DEBUG | include_count: True
2021-11-09 at 12:27:34 | DEBUG | TableModel Columns: [Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>)]
2021-11-09 at 12:27:34 | DEBUG | SQL of Select: [ SELECT DISTINCT mysqlsrc.customers.`customerNumber`, mysqlsrc.customers.`customerName`, mysqlsrc.customers.`contactLastName`, mysqlsrc.customers.`contactFirstName`, mysqlsrc.customers.phone, mysqlsrc.customers.`addressLine1`, mysqlsrc.customers.`addressLine2`, mysqlsrc.customers.city, mysqlsrc.customers.state, mysqlsrc.customers.`postalCode`, mysqlsrc.customers.country, mysqlsrc.customers.`salesRepEmployeeNumber`, mysqlsrc.customers.`creditLimit` 
FROM mysqlsrc.customers 
 LIMIT %(param_1)s, %(param_2)s ]
2021-11-09 at 12:27:34 | DEBUG | SQL of Count: [ SELECT DISTINCT count(mysqlsrc.customers.`customerNumber`) AS col_count 
FROM mysqlsrc.customers ]
2021-11-09 at 12:27:34 | DEBUG | SQL of Query Full : [ SELECT DISTINCT mysqlsrc.customers.`customerNumber`, mysqlsrc.customers.`customerName`, mysqlsrc.customers.`contactLastName`, mysqlsrc.customers.`contactFirstName`, mysqlsrc.customers.phone, mysqlsrc.customers.`addressLine1`, mysqlsrc.customers.`addressLine2`, mysqlsrc.customers.city, mysqlsrc.customers.state, mysqlsrc.customers.`postalCode`, mysqlsrc.customers.country, mysqlsrc.customers.`salesRepEmployeeNumber`, mysqlsrc.customers.`creditLimit` 
FROM mysqlsrc.customers 
 LIMIT %(param_1)s, %(param_2)s ]
2021-11-09 at 12:27:34 | DEBUG | SQL of Count Full : [ SELECT DISTINCT count(mysqlsrc.customers.`customerNumber`) AS col_count 
FROM mysqlsrc.customers ]
2021-11-09 at 12:27:34 | DEBUG | Select Count Result: [ <sqlalchemy.engine.cursor.CursorResult object at 0x10fa59af0> ]
2021-11-09 at 12:27:34 | DEBUG | Select Result: [ <sqlalchemy.engine.cursor.LegacyCursorResult object at 0x10fa59d60> ]
2021-11-09 at 12:27:34 | DEBUG | Select Result Return : [ 50 ] rows 
2021-11-09 at 12:27:57 | DEBUG | Access '/_table/{table_name}' : run in get_data(), input data table_name: [zinopara]
2021-11-09 at 12:27:57 | DEBUG | fieldlist: [*]
2021-11-09 at 12:27:57 | DEBUG | filter: [None]
2021-11-09 at 12:27:57 | DEBUG | filterparam: [None]
2021-11-09 at 12:27:57 | DEBUG | limit: [50]
2021-11-09 at 12:27:57 | DEBUG | offset: [0]
2021-11-09 at 12:27:57 | DEBUG | order: [None]
2021-11-09 at 12:27:57 | DEBUG | group: [None]
2021-11-09 at 12:27:57 | DEBUG | distinct: [True]
2021-11-09 at 12:27:57 | DEBUG | count_only: [False]
2021-11-09 at 12:27:57 | DEBUG | include_count: [True]
2021-11-09 at 12:27:57 | DEBUG | table select():
2021-11-09 at 12:27:57 | DEBUG | tablename: zinopara
2021-11-09 at 12:27:57 | DEBUG | fieldlist: *
2021-11-09 at 12:27:57 | DEBUG | filter: None
2021-11-09 at 12:27:57 | DEBUG | limit: 50
2021-11-09 at 12:27:57 | DEBUG | offset: 0
2021-11-09 at 12:27:57 | DEBUG | order: None
2021-11-09 at 12:27:57 | DEBUG | group: None
2021-11-09 at 12:27:57 | DEBUG | distinct: True
2021-11-09 at 12:27:57 | DEBUG | count_only: False
2021-11-09 at 12:27:57 | DEBUG | include_count: True
2021-11-09 at 12:27:57 | DEBUG | TableModel Columns: [Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False), Column('type', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, nullable=False), Column('creatorid', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>), Column('json', TEXT(collation='utf8mb4_unicode_ci'), table=<zinopara>, nullable=False), Column('json_updates', TEXT(collation='utf8mb4_unicode_ci'), table=<zinopara>)]
2021-11-09 at 12:27:57 | DEBUG | SQL of Select: [ SELECT DISTINCT mysqlsrc.zinopara.id, mysqlsrc.zinopara.type, mysqlsrc.zinopara.creatorid, mysqlsrc.zinopara.json, mysqlsrc.zinopara.json_updates 
FROM mysqlsrc.zinopara 
 LIMIT %(param_1)s, %(param_2)s ]
2021-11-09 at 12:27:57 | DEBUG | SQL of Count: [ SELECT DISTINCT count(mysqlsrc.zinopara.id) AS col_count 
FROM mysqlsrc.zinopara ]
2021-11-09 at 12:27:57 | DEBUG | SQL of Query Full : [ SELECT DISTINCT mysqlsrc.zinopara.id, mysqlsrc.zinopara.type, mysqlsrc.zinopara.creatorid, mysqlsrc.zinopara.json, mysqlsrc.zinopara.json_updates 
FROM mysqlsrc.zinopara 
 LIMIT %(param_1)s, %(param_2)s ]
2021-11-09 at 12:27:57 | DEBUG | SQL of Count Full : [ SELECT DISTINCT count(mysqlsrc.zinopara.id) AS col_count 
FROM mysqlsrc.zinopara ]
2021-11-09 at 12:27:57 | DEBUG | Select Count Result: [ <sqlalchemy.engine.cursor.CursorResult object at 0x10fa381f0> ]
2021-11-09 at 12:27:57 | DEBUG | Select Result: [ <sqlalchemy.engine.cursor.LegacyCursorResult object at 0x10fa38070> ]
2021-11-09 at 12:27:57 | DEBUG | Select Result Return : [ 3 ] rows 
2021-11-09 at 13:04:05 | INFO | Neptune Shutting Down ....
2021-11-09 at 13:04:05 | INFO | API cache cleared ....
2021-11-09 at 13:04:07 | INFO | Neptune Start Up ....
2021-11-09 at 13:04:07 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 13:04:07 | INFO | Add Custom query ...
2021-11-09 at 13:04:07 | INFO | Neptune Starting ....
2021-11-09 at 13:04:07 | INFO | API cache does not exists ....
2021-11-09 at 13:05:22 | INFO | Neptune Shutting Down ....
2021-11-09 at 13:05:22 | INFO | API cache does not exists ....
2021-11-09 at 13:05:23 | INFO | Neptune Start Up ....
2021-11-09 at 13:05:23 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 13:05:23 | INFO | Add Custom query ...
2021-11-09 at 13:05:23 | INFO | Neptune Starting ....
2021-11-09 at 13:05:23 | INFO | API cache does not exists ....
2021-11-09 at 13:06:16 | INFO | Neptune Shutting Down ....
2021-11-09 at 13:06:16 | INFO | API cache does not exists ....
2021-11-09 at 13:06:17 | INFO | Neptune Start Up ....
2021-11-09 at 13:06:17 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 13:06:17 | INFO | Add Custom query ...
2021-11-09 at 13:06:17 | INFO | Neptune Starting ....
2021-11-09 at 13:06:17 | INFO | API cache does not exists ....
2021-11-09 at 13:07:11 | INFO | Neptune Shutting Down ....
2021-11-09 at 13:07:11 | INFO | API cache does not exists ....
2021-11-09 at 13:07:12 | INFO | Neptune Start Up ....
2021-11-09 at 13:07:12 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 13:07:12 | INFO | Add Custom query ...
2021-11-09 at 13:07:12 | INFO | Neptune Starting ....
2021-11-09 at 13:07:12 | INFO | API cache does not exists ....
2021-11-09 at 13:07:32 | INFO | Neptune Shutting Down ....
2021-11-09 at 13:07:32 | INFO | API cache does not exists ....
2021-11-09 at 13:07:33 | INFO | Neptune Start Up ....
2021-11-09 at 13:07:33 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 13:07:33 | INFO | Add Custom query ...
2021-11-09 at 13:07:33 | INFO | Neptune Starting ....
2021-11-09 at 13:07:33 | INFO | API cache does not exists ....
2021-11-09 at 13:12:49 | INFO | Neptune Shutting Down ....
2021-11-09 at 13:12:49 | INFO | API cache does not exists ....
2021-11-09 at 13:12:50 | INFO | Neptune Start Up ....
2021-11-09 at 13:12:50 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 13:12:50 | INFO | Add Custom query ...
2021-11-09 at 13:12:50 | INFO | Neptune Starting ....
2021-11-09 at 13:12:50 | INFO | API cache does not exists ....
2021-11-09 at 13:13:57 | INFO | Neptune Shutting Down ....
2021-11-09 at 13:13:57 | INFO | API cache does not exists ....
2021-11-09 at 13:13:58 | INFO | Neptune Start Up ....
2021-11-09 at 13:13:58 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 13:13:58 | INFO | Add Custom query ...
2021-11-09 at 13:13:58 | INFO | Neptune Starting ....
2021-11-09 at 13:13:58 | INFO | API cache does not exists ....
2021-11-09 at 13:16:24 | INFO | Neptune Shutting Down ....
2021-11-09 at 13:16:24 | INFO | API cache does not exists ....
2021-11-09 at 13:16:25 | INFO | Neptune Start Up ....
2021-11-09 at 13:16:25 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 13:16:25 | INFO | Add Custom query ...
2021-11-09 at 13:16:25 | INFO | Neptune Starting ....
2021-11-09 at 13:16:25 | INFO | API cache does not exists ....
2021-11-09 at 13:18:45 | INFO | Neptune Shutting Down ....
2021-11-09 at 13:18:45 | INFO | API cache does not exists ....
2021-11-09 at 13:18:46 | INFO | Neptune Start Up ....
2021-11-09 at 13:18:46 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 13:18:46 | INFO | Add Custom query ...
2021-11-09 at 13:18:46 | INFO | Neptune Starting ....
2021-11-09 at 13:18:46 | INFO | API cache does not exists ....
2021-11-09 at 13:20:33 | INFO | Neptune Shutting Down ....
2021-11-09 at 13:20:33 | INFO | API cache does not exists ....
2021-11-09 at 13:20:34 | INFO | Neptune Start Up ....
2021-11-09 at 13:20:34 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 13:20:34 | INFO | Add Custom query ...
2021-11-09 at 13:20:34 | INFO | Neptune Starting ....
2021-11-09 at 13:20:34 | INFO | API cache does not exists ....
2021-11-09 at 13:25:19 | INFO | Neptune Shutting Down ....
2021-11-09 at 13:25:19 | INFO | API cache does not exists ....
2021-11-09 at 13:25:20 | INFO | Neptune Start Up ....
2021-11-09 at 13:25:20 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 13:25:20 | INFO | Add Custom query ...
2021-11-09 at 13:25:20 | INFO | Neptune Starting ....
2021-11-09 at 13:25:20 | INFO | API cache does not exists ....
2021-11-09 at 13:25:21 | INFO | Neptune Shutting Down ....
2021-11-09 at 13:25:21 | INFO | API cache does not exists ....
2021-11-09 at 13:25:23 | INFO | Neptune Start Up ....
2021-11-09 at 13:25:23 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 13:25:23 | INFO | Add Custom query ...
2021-11-09 at 13:25:23 | INFO | Neptune Starting ....
2021-11-09 at 13:25:23 | INFO | API cache does not exists ....
2021-11-09 at 13:26:04 | DEBUG | Access '/' : run in app_root()
2021-11-09 at 13:31:11 | INFO | Neptune Shutting Down ....
2021-11-09 at 13:31:11 | INFO | API cache does not exists ....
2021-11-09 at 13:56:28 | INFO | Neptune Start Up ....
2021-11-09 at 13:56:28 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 13:56:28 | INFO | Add Custom query ...
2021-11-09 at 13:56:28 | INFO | Neptune Starting ....
2021-11-09 at 13:56:28 | INFO | API cache does not exists ....
2021-11-09 at 14:49:58 | INFO | Neptune Shutting Down ....
2021-11-09 at 14:49:58 | INFO | API cache does not exists ....
2021-11-09 at 14:49:59 | INFO | Neptune Start Up ....
2021-11-09 at 14:49:59 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 14:49:59 | INFO | Add Custom query ...
2021-11-09 at 14:49:59 | INFO | Neptune Starting ....
2021-11-09 at 14:49:59 | INFO | API cache does not exists ....
2021-11-09 at 14:51:54 | INFO | Neptune Shutting Down ....
2021-11-09 at 14:51:54 | INFO | API cache does not exists ....
2021-11-09 at 14:51:55 | INFO | Neptune Start Up ....
2021-11-09 at 14:51:55 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 14:51:55 | INFO | Add Custom query ...
2021-11-09 at 14:51:55 | INFO | Neptune Starting ....
2021-11-09 at 14:51:55 | INFO | API cache does not exists ....
2021-11-09 at 14:52:01 | INFO | Neptune Shutting Down ....
2021-11-09 at 14:52:01 | INFO | API cache does not exists ....
2021-11-09 at 15:03:53 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:04:06 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:04:06 | DEBUG | Metadata cache save to [ /Users/zhangjun/.neptune_cache/neptune_metadata ] 
2021-11-09 at 15:04:06 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:04:06 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:04:07 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:04:07 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:04:53 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:04:53 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:04:53 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:04:53 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:04:53 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:04:53 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:06:18 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:06:18 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:06:18 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:06:18 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:06:18 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:06:18 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:06:38 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:06:38 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:06:38 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:06:38 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:06:39 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:06:39 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:06:45 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:06:46 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:06:46 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:06:46 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:06:46 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:06:46 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:06:58 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:06:58 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:06:58 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:06:58 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:06:58 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:06:58 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:07:12 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:07:12 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:07:12 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:07:12 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:07:13 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:07:13 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:12:08 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:12:08 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:12:08 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:12:08 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:12:09 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:12:09 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:12:18 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:12:18 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:12:18 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:12:18 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:12:18 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:12:18 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:12:42 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:12:42 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:12:42 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:12:42 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:12:43 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:12:43 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:13:13 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:13:13 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:13:13 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:13:13 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:13:13 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:13:13 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:13:31 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:13:31 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:13:31 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:13:31 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:13:32 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:13:32 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:14:21 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:14:22 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:14:22 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:14:22 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:14:22 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:14:22 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:18:28 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:18:28 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:18:28 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:18:28 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:18:29 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:18:29 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:18:52 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:18:52 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:18:52 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:18:52 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:18:52 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:18:52 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:19:22 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:19:22 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:19:22 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:19:22 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:19:23 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:19:23 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:19:32 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:19:32 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:19:32 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:19:32 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:19:32 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:19:32 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:20:20 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:20:20 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:20:20 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:20:20 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:20:20 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:20:20 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:20:34 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:20:34 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:20:34 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:20:34 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:20:34 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:20:34 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:21:18 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:21:18 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:21:18 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:21:18 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:21:19 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:21:19 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:21:50 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:21:50 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:21:50 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:21:50 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:21:50 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:21:50 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:22:04 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:22:04 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-09 at 15:22:04 | DEBUG | Generate Schema file from database ...
2021-11-09 at 15:22:04 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-09 at 15:22:04 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-09 at 15:22:04 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-09 at 15:36:47 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:46:05 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:46:18 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:46:32 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:48:48 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:49:26 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:49:57 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:50:22 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:50:58 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:51:05 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:51:37 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:54:59 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:55:30 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:56:27 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:58:16 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:58:42 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 15:59:24 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 16:00:08 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 16:10:34 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 16:11:46 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 16:12:55 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 16:23:24 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 16:23:35 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 16:46:15 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 17:26:12 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 17:27:20 | INFO | Neptune Start Up ....
2021-11-09 at 17:27:20 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 17:27:20 | INFO | Add Custom query ...
2021-11-09 at 17:27:20 | INFO | Neptune Starting ....
2021-11-09 at 17:27:20 | INFO | API cache does not exists ....
2021-11-09 at 17:27:34 | DEBUG | Access '/' : run in app_root()
2021-11-09 at 17:48:08 | INFO | Neptune Shutting Down ....
2021-11-09 at 17:48:08 | INFO | API cache does not exists ....
2021-11-09 at 17:48:11 | INFO | Neptune Start Up ....
2021-11-09 at 17:48:11 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 17:48:11 | INFO | Add Custom query ...
2021-11-09 at 17:48:11 | INFO | Neptune Starting ....
2021-11-09 at 17:48:11 | INFO | API cache does not exists ....
2021-11-09 at 17:48:34 | INFO | Neptune Shutting Down ....
2021-11-09 at 17:48:34 | INFO | API cache does not exists ....
2021-11-09 at 17:48:35 | INFO | Neptune Start Up ....
2021-11-09 at 17:48:35 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 17:48:35 | INFO | Add Custom query ...
2021-11-09 at 17:48:35 | INFO | Neptune Starting ....
2021-11-09 at 17:48:35 | INFO | API cache does not exists ....
2021-11-09 at 17:49:12 | INFO | Neptune Shutting Down ....
2021-11-09 at 17:49:12 | INFO | API cache does not exists ....
2021-11-09 at 17:49:14 | INFO | Neptune Start Up ....
2021-11-09 at 17:49:14 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 17:49:14 | INFO | Add Custom query ...
2021-11-09 at 17:49:14 | INFO | Neptune Starting ....
2021-11-09 at 17:49:14 | INFO | API cache does not exists ....
2021-11-09 at 17:49:32 | INFO | Neptune Shutting Down ....
2021-11-09 at 17:49:32 | INFO | API cache does not exists ....
2021-11-09 at 17:49:34 | INFO | Neptune Start Up ....
2021-11-09 at 17:49:34 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 17:49:34 | INFO | Add Custom query ...
2021-11-09 at 17:49:34 | INFO | Neptune Starting ....
2021-11-09 at 17:49:34 | INFO | API cache does not exists ....
2021-11-09 at 17:50:15 | INFO | [测试log] hello, world
2021-11-09 at 17:50:15 | DEBUG | [测试log] hello, world
2021-11-09 at 17:50:15 | INFO | Neptune Shutting Down ....
2021-11-09 at 17:50:15 | INFO | API cache does not exists ....
2021-11-09 at 17:50:17 | INFO | Neptune Start Up ....
2021-11-09 at 17:50:17 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 17:50:17 | INFO | Add Custom query ...
2021-11-09 at 17:50:17 | INFO | Neptune Starting ....
2021-11-09 at 17:50:17 | INFO | API cache does not exists ....
2021-11-09 at 17:50:43 | INFO | [测试log] hello, world
2021-11-09 at 17:50:43 | DEBUG | [测试log] hello, world
2021-11-09 at 17:50:43 | ERROR | [测试log] hello, world
2021-11-09 at 17:50:43 | INFO | Neptune Shutting Down ....
2021-11-09 at 17:50:43 | INFO | API cache does not exists ....
2021-11-09 at 17:50:45 | INFO | Neptune Start Up ....
2021-11-09 at 17:50:45 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 17:50:45 | INFO | Add Custom query ...
2021-11-09 at 17:50:45 | INFO | Neptune Starting ....
2021-11-09 at 17:50:45 | INFO | API cache does not exists ....
2021-11-09 at 17:52:06 | INFO | Neptune Shutting Down ....
2021-11-09 at 17:52:06 | INFO | API cache does not exists ....
2021-11-09 at 17:52:11 | SUCCESS | [测试log] hello, world
2021-11-09 at 17:52:11 | INFO | [测试log] hello, world
2021-11-09 at 17:52:11 | DEBUG | [测试log] hello, world
2021-11-09 at 17:52:11 | WARNING | [测试log] hello, world
2021-11-09 at 17:52:11 | ERROR | [测试log] hello, world
2021-11-09 at 17:52:11 | CRITICAL | [测试log] hello, world
2021-11-09 at 17:52:11 | ERROR | [测试log] hello, world
NoneType: None
2021-11-09 at 17:52:12 | INFO | Neptune Start Up ....
2021-11-09 at 17:52:12 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 17:52:12 | INFO | Add Custom query ...
2021-11-09 at 17:52:12 | INFO | Neptune Starting ....
2021-11-09 at 17:52:12 | INFO | API cache does not exists ....
2021-11-09 at 17:53:14 | INFO | Neptune Shutting Down ....
2021-11-09 at 17:53:14 | INFO | API cache does not exists ....
2021-11-09 at 17:53:15 | SUCCESS | [测试log] hello, world
2021-11-09 at 17:53:16 | INFO | Neptune Start Up ....
2021-11-09 at 17:53:16 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 17:53:17 | INFO | Add Custom query ...
2021-11-09 at 17:53:17 | INFO | Neptune Starting ....
2021-11-09 at 17:53:17 | INFO | API cache does not exists ....
2021-11-09 at 17:53:29 | INFO | Neptune Shutting Down ....
2021-11-09 at 17:53:29 | INFO | API cache does not exists ....
2021-11-09 at 17:53:30 | SUCCESS | [测试log] hello, world
2021-11-09 at 17:53:31 | INFO | Neptune Start Up ....
2021-11-09 at 17:53:31 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 17:53:31 | INFO | Add Custom query ...
2021-11-09 at 17:53:31 | INFO | Neptune Starting ....
2021-11-09 at 17:53:31 | INFO | API cache does not exists ....
2021-11-09 at 17:54:01 | INFO | Neptune Shutting Down ....
2021-11-09 at 17:54:01 | INFO | API cache does not exists ....
2021-11-09 at 17:54:02 | SUCCESS | [测试log] hello, world
2021-11-09 at 17:54:02 | INFO | [测试log] hello, world
2021-11-09 at 17:54:02 | DEBUG | [测试log] hello, world
2021-11-09 at 17:54:02 | WARNING | [测试log] hello, world
2021-11-09 at 17:54:02 | ERROR | [测试log] hello, world
2021-11-09 at 17:54:02 | CRITICAL | [测试log] hello, world
2021-11-09 at 17:54:02 | ERROR | [测试log] hello, world
NoneType: None
2021-11-09 at 17:54:03 | INFO | Neptune Start Up ....
2021-11-09 at 17:54:03 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 17:54:03 | INFO | Add Custom query ...
2021-11-09 at 17:54:03 | INFO | Neptune Starting ....
2021-11-09 at 17:54:03 | INFO | API cache does not exists ....
2021-11-09 at 17:54:20 | INFO | Neptune Shutting Down ....
2021-11-09 at 17:54:20 | INFO | API cache does not exists ....
2021-11-09 at 17:54:20 | SUCCESS | [测试log] hello, world
2021-11-09 at 17:54:20 | INFO | [测试log] hello, world
2021-11-09 at 17:54:20 | DEBUG | [测试log] hello, world
2021-11-09 at 17:54:20 | WARNING | [测试log] hello, world
2021-11-09 at 17:54:20 | ERROR | [测试log] hello, world
2021-11-09 at 17:54:20 | CRITICAL | [测试log] hello, world
2021-11-09 at 17:54:20 | ERROR | [测试log] hello, world
NoneType: None
2021-11-09 at 17:54:21 | INFO | Neptune Start Up ....
2021-11-09 at 17:54:21 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 17:54:21 | INFO | Add Custom query ...
2021-11-09 at 17:54:21 | INFO | Neptune Starting ....
2021-11-09 at 17:54:21 | INFO | API cache does not exists ....
2021-11-09 at 17:54:24 | SUCCESS | [测试log] hello, world
2021-11-09 at 17:54:24 | INFO | [测试log] hello, world
2021-11-09 at 17:54:24 | DEBUG | [测试log] hello, world
2021-11-09 at 17:54:24 | WARNING | [测试log] hello, world
2021-11-09 at 17:54:24 | ERROR | [测试log] hello, world
2021-11-09 at 17:54:24 | CRITICAL | [测试log] hello, world
2021-11-09 at 17:54:24 | ERROR | [测试log] hello, world
NoneType: None
2021-11-09 at 17:56:01 | INFO | Neptune Shutting Down ....
2021-11-09 at 17:56:01 | INFO | API cache does not exists ....
2021-11-09 at 17:56:03 | INFO | Neptune Start Up ....
2021-11-09 at 17:56:03 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 17:56:03 | INFO | Add Custom query ...
2021-11-09 at 17:56:03 | INFO | Neptune Starting ....
2021-11-09 at 17:56:03 | INFO | API cache does not exists ....
2021-11-09 at 17:56:41 | INFO | Neptune Shutting Down ....
2021-11-09 at 17:56:41 | INFO | API cache does not exists ....
2021-11-09 at 17:56:42 | INFO | Neptune Start Up ....
2021-11-09 at 17:56:42 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 17:56:42 | INFO | Add Custom query ...
2021-11-09 at 17:56:42 | INFO | Neptune Starting ....
2021-11-09 at 17:56:42 | INFO | API cache does not exists ....
2021-11-09 at 17:58:19 | INFO | Neptune Shutting Down ....
2021-11-09 at 17:58:19 | INFO | API cache does not exists ....
2021-11-09 at 17:58:20 | INFO | Neptune Start Up ....
2021-11-09 at 17:58:20 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 17:58:20 | INFO | Add Custom query ...
2021-11-09 at 17:58:20 | INFO | Neptune Starting ....
2021-11-09 at 17:58:20 | INFO | API cache does not exists ....
2021-11-09 at 20:43:58 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 20:43:59 | SUCCESS | [测试log] hello, world
2021-11-09 at 20:43:59 | INFO | [测试log] hello, world
2021-11-09 at 20:43:59 | DEBUG | [测试log] hello, world
2021-11-09 at 20:43:59 | WARNING | [测试log] hello, world
2021-11-09 at 20:43:59 | ERROR | [测试log] hello, world
2021-11-09 at 20:43:59 | CRITICAL | [测试log] hello, world
2021-11-09 at 20:43:59 | ERROR | [测试log] hello, world
NoneType: None
2021-11-09 at 20:44:16 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 20:44:17 | SUCCESS | [测试log] hello, world
2021-11-09 at 20:44:17 | INFO | [测试log] hello, world
2021-11-09 at 20:44:17 | DEBUG | [测试log] hello, world
2021-11-09 at 20:44:17 | WARNING | [测试log] hello, world
2021-11-09 at 20:44:17 | ERROR | [测试log] hello, world
2021-11-09 at 20:44:17 | CRITICAL | [测试log] hello, world
2021-11-09 at 20:44:17 | ERROR | [测试log] hello, world
NoneType: None
2021-11-09 at 20:45:35 | INFO | Neptune Start Up ....
2021-11-09 at 20:45:35 | INFO | Neptune Start Up ....
2021-11-09 at 20:45:35 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 20:45:35 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 20:45:35 | INFO | Neptune Start Up ....
2021-11-09 at 20:45:35 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 20:45:35 | INFO | Neptune Start Up ....
2021-11-09 at 20:45:35 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 20:45:35 | INFO | Add Custom query ...
2021-11-09 at 20:45:35 | INFO | Add Custom query ...
2021-11-09 at 20:45:35 | INFO | Add Custom query ...
2021-11-09 at 20:45:35 | INFO | Add Custom query ...
2021-11-09 at 20:45:43 | INFO | Neptune Start Up ....
2021-11-09 at 20:45:43 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 20:45:43 | INFO | Add Custom query ...
2021-11-09 at 20:45:43 | INFO | Neptune Starting ....
2021-11-09 at 20:45:43 | INFO | API cache does not exists ....
2021-11-09 at 20:46:06 | INFO | Neptune Shutting Down ....
2021-11-09 at 20:46:06 | INFO | API cache does not exists ....
2021-11-09 at 20:46:10 | INFO | Neptune Start Up ....
2021-11-09 at 20:46:10 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 20:46:10 | INFO | Add Custom query ...
2021-11-09 at 20:46:10 | INFO | Neptune Start Up ....
2021-11-09 at 20:46:10 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 20:46:10 | INFO | Add Custom query ...
2021-11-09 at 20:46:10 | INFO | Neptune Start Up ....
2021-11-09 at 20:46:10 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 20:46:10 | INFO | Neptune Start Up ....
2021-11-09 at 20:46:10 | INFO | Add Custom query ...
2021-11-09 at 20:46:10 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 20:46:41 | INFO | Neptune Start Up ....
2021-11-09 at 20:46:41 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 20:46:41 | INFO | Neptune Start Up ....
2021-11-09 at 20:46:41 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 20:46:41 | INFO | Neptune Start Up ....
2021-11-09 at 20:46:41 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 20:46:41 | INFO | Add Custom query ...
2021-11-09 at 20:46:41 | INFO | Add Custom query ...
2021-11-09 at 20:46:41 | INFO | Neptune Start Up ....
2021-11-09 at 20:46:41 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 20:46:41 | INFO | Add Custom query ...
2021-11-09 at 20:46:41 | INFO | Add Custom query ...
2021-11-09 at 20:46:41 | INFO | Neptune Starting ....
2021-11-09 at 20:46:41 | INFO | Neptune Starting ....
2021-11-09 at 20:46:41 | INFO | Neptune Starting ....
2021-11-09 at 20:46:41 | INFO | API cache does not exists ....
2021-11-09 at 20:46:41 | INFO | API cache does not exists ....
2021-11-09 at 20:46:41 | INFO | API cache does not exists ....
2021-11-09 at 20:46:41 | INFO | Neptune Starting ....
2021-11-09 at 20:46:41 | INFO | API cache does not exists ....
2021-11-09 at 21:01:53 | INFO | Neptune Start Up ....
2021-11-09 at 21:01:53 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 21:01:53 | INFO | Neptune Start Up ....
2021-11-09 at 21:01:53 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 21:01:53 | INFO | Add Custom query ...
2021-11-09 at 21:01:53 | INFO | Add Custom query ...
2021-11-09 at 21:01:54 | INFO | Neptune Starting ....
2021-11-09 at 21:01:54 | INFO | API cache does not exists ....
2021-11-09 at 21:01:54 | INFO | Neptune Starting ....
2021-11-09 at 21:01:54 | INFO | Neptune Start Up ....
2021-11-09 at 21:01:54 | INFO | API cache does not exists ....
2021-11-09 at 21:01:54 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 21:01:54 | INFO | Add Custom query ...
2021-11-09 at 21:01:54 | INFO | Neptune Start Up ....
2021-11-09 at 21:01:54 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 21:01:54 | INFO | Add Custom query ...
2021-11-09 at 21:01:54 | INFO | Neptune Starting ....
2021-11-09 at 21:01:54 | INFO | API cache does not exists ....
2021-11-09 at 21:01:54 | INFO | Neptune Starting ....
2021-11-09 at 21:01:54 | INFO | API cache does not exists ....
2021-11-09 at 21:02:05 | INFO | Neptune Start Up ....
2021-11-09 at 21:02:05 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 21:02:05 | INFO | Add Custom query ...
2021-11-09 at 21:02:05 | INFO | Neptune Starting ....
2021-11-09 at 21:02:05 | INFO | API cache does not exists ....
2021-11-09 at 21:02:14 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 21:02:15 | SUCCESS | [测试log] hello, world
2021-11-09 at 21:02:15 | INFO | [测试log] hello, world
2021-11-09 at 21:02:15 | DEBUG | [测试log] hello, world
2021-11-09 at 21:02:15 | WARNING | [测试log] hello, world
2021-11-09 at 21:02:15 | ERROR | [测试log] hello, world
2021-11-09 at 21:02:15 | CRITICAL | [测试log] hello, world
2021-11-09 at 21:02:15 | ERROR | [测试log] hello, world
NoneType: None
2021-11-09 at 21:28:46 | INFO | Neptune Start Up ....
2021-11-09 at 21:28:46 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 21:28:46 | INFO | Add Custom query ...
2021-11-09 at 21:28:46 | INFO | Neptune Starting ....
2021-11-09 at 21:28:46 | INFO | API cache does not exists ....
2021-11-09 at 21:29:03 | INFO | Neptune Shutting Down ....
2021-11-09 at 21:29:03 | INFO | API cache does not exists ....
2021-11-09 at 21:29:15 | INFO | Neptune Start Up ....
2021-11-09 at 21:29:15 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 21:29:15 | INFO | Add Custom query ...
2021-11-09 at 21:29:15 | INFO | Neptune Starting ....
2021-11-09 at 21:29:15 | INFO | API cache does not exists ....
2021-11-09 at 21:29:27 | DEBUG | Access '/' : run in app_root()
2021-11-09 at 21:29:45 | INFO | Neptune Shutting Down ....
2021-11-09 at 21:29:45 | INFO | API cache does not exists ....
2021-11-09 at 21:30:37 | INFO | Neptune Start Up ....
2021-11-09 at 21:30:37 | INFO | API prefix is: [ /api/v1 ]
2021-11-09 at 21:30:37 | INFO | Add Custom query ...
2021-11-09 at 21:30:37 | INFO | Neptune Starting ....
2021-11-09 at 21:30:37 | INFO | API cache does not exists ....
2021-11-09 at 21:33:38 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-09 at 21:33:39 | SUCCESS | [测试log] hello, world
2021-11-09 at 21:33:39 | INFO | [测试log] hello, world
2021-11-09 at 21:33:39 | DEBUG | [测试log] hello, world
2021-11-09 at 21:33:39 | WARNING | [测试log] hello, world
2021-11-09 at 21:33:39 | ERROR | [测试log] hello, world
2021-11-09 at 21:33:39 | CRITICAL | [测试log] hello, world
2021-11-09 at 21:33:39 | ERROR | [测试log] hello, world
NoneType: None
2021-11-10 at 09:42:00 | INFO | Neptune Start Up ....
2021-11-10 at 09:42:00 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 09:42:00 | INFO | Add Custom query ...
2021-11-10 at 09:42:00 | INFO | Neptune Starting ....
2021-11-10 at 09:42:00 | INFO | API cache does not exists ....
2021-11-10 at 09:42:21 | DEBUG | Access '/' : run in app_root()
2021-11-10 at 09:47:52 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 09:53:38 | INFO | Neptune Shutting Down ....
2021-11-10 at 09:53:38 | INFO | API cache does not exists ....
2021-11-10 at 09:53:40 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 09:53:40 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 09:53:40 | DEBUG | Generate Schema file from database ...
2021-11-10 at 09:53:40 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'customerName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'contactLastName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'contactFirstName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'phone', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'addressLine1', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'addressLine2', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'city', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'state', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'postalCode', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'country', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'salesRepEmployeeNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': True, 'autoincrement': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'creditLimit', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'employeeNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'lastName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'firstName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'extension', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'email', 'type': VARCHAR(length=100), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'officeCode', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'reportsTo', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': True, 'autoincrement': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'jobTitle', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'id', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': True}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'item_no', 'type': VARCHAR(length=255), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'officeCode', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'city', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'phone', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'addressLine1', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'addressLine2', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'state', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'country', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'postalCode', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'territory', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'orderNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'productCode', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'quantityOrdered', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'priceEach', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'orderLineNumber', 'type': SMALLINT(display_width=6), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'orderNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'orderDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'requiredDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'shippedDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'status', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'comments', 'type': TEXT(), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'checkNumber', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'paymentDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'amount', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'productLine', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'textDescription', 'type': VARCHAR(length=4000), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'htmlDescription', 'type': MEDIUMTEXT(), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 09:53:40 | SUCCESS | {'name': 'image', 'type': MEDIUMBLOB(), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 09:53:41 | SUCCESS | {'name': 'productCode', 'type': VARCHAR(length=15), 'default': "''", 'comment': '产品代码', 'nullable': False}
2021-11-10 at 09:53:41 | SUCCESS | {'name': 'productName', 'type': VARCHAR(length=70), 'default': None, 'comment': '产品名称', 'nullable': False}
2021-11-10 at 09:53:41 | SUCCESS | {'name': 'productLine', 'type': VARCHAR(length=50), 'default': None, 'comment': '产品线', 'nullable': False}
2021-11-10 at 09:53:41 | SUCCESS | {'name': 'productScale', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:41 | SUCCESS | {'name': 'productVendor', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:41 | SUCCESS | {'name': 'productDescription', 'type': TEXT(), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:41 | SUCCESS | {'name': 'quantityInStock', 'type': SMALLINT(display_width=6), 'default': None, 'comment': '库存', 'nullable': False, 'autoincrement': False}
2021-11-10 at 09:53:41 | SUCCESS | {'name': 'buyPrice', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': '价格', 'nullable': False}
2021-11-10 at 09:53:41 | SUCCESS | {'name': 'MSRP', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': '建议零售价', 'nullable': False}
2021-11-10 at 09:53:41 | SUCCESS | {'name': 's', 'type': VARCHAR(length=6), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 09:53:41 | SUCCESS | {'name': 'id', 'type': VARCHAR(collation='utf8mb4_unicode_ci', length=255), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:41 | SUCCESS | {'name': 'type', 'type': VARCHAR(collation='utf8mb4_unicode_ci', length=255), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:41 | SUCCESS | {'name': 'creatorid', 'type': VARCHAR(collation='utf8mb4_unicode_ci', length=255), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 09:53:41 | SUCCESS | {'name': 'json', 'type': TEXT(collation='utf8mb4_unicode_ci'), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 09:53:41 | SUCCESS | {'name': 'json_updates', 'type': TEXT(collation='utf8mb4_unicode_ci'), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 09:53:41 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 09:53:41 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 09:53:41 | DEBUG | ****************************************************
2021-11-10 at 09:53:41 | DEBUG | __class__
2021-11-10 at 09:53:41 | DEBUG | __class_getitem__
2021-11-10 at 09:53:41 | DEBUG | __contains__
2021-11-10 at 09:53:41 | DEBUG | __delattr__
2021-11-10 at 09:53:41 | DEBUG | __dict__
2021-11-10 at 09:53:41 | DEBUG | __dir__
2021-11-10 at 09:53:41 | DEBUG | __doc__
2021-11-10 at 09:53:41 | DEBUG | __eq__
2021-11-10 at 09:53:41 | DEBUG | __format__
2021-11-10 at 09:53:41 | DEBUG | __ge__
2021-11-10 at 09:53:41 | DEBUG | __getattribute__
2021-11-10 at 09:53:41 | DEBUG | __getstate__
2021-11-10 at 09:53:41 | DEBUG | __gt__
2021-11-10 at 09:53:41 | DEBUG | __hash__
2021-11-10 at 09:53:41 | DEBUG | __init__
2021-11-10 at 09:53:41 | DEBUG | __init_subclass__
2021-11-10 at 09:53:41 | DEBUG | __le__
2021-11-10 at 09:53:41 | DEBUG | __lt__
2021-11-10 at 09:53:41 | DEBUG | __module__
2021-11-10 at 09:53:41 | DEBUG | __ne__
2021-11-10 at 09:53:41 | DEBUG | __new__
2021-11-10 at 09:53:41 | DEBUG | __reduce__
2021-11-10 at 09:53:41 | DEBUG | __reduce_ex__
2021-11-10 at 09:53:41 | DEBUG | __repr__
2021-11-10 at 09:53:41 | DEBUG | __setattr__
2021-11-10 at 09:53:41 | DEBUG | __setstate__
2021-11-10 at 09:53:41 | DEBUG | __sizeof__
2021-11-10 at 09:53:41 | DEBUG | __str__
2021-11-10 at 09:53:41 | DEBUG | __subclasshook__
2021-11-10 at 09:53:41 | DEBUG | __visit_name__
2021-11-10 at 09:53:41 | DEBUG | __weakref__
2021-11-10 at 09:53:41 | DEBUG | _add_table
2021-11-10 at 09:53:41 | DEBUG | _bind
2021-11-10 at 09:53:41 | DEBUG | _bind_to
2021-11-10 at 09:53:41 | DEBUG | _compiler_dispatch
2021-11-10 at 09:53:41 | DEBUG | _fk_memos
2021-11-10 at 09:53:41 | DEBUG | _init_items
2021-11-10 at 09:53:41 | DEBUG | _original_compiler_dispatch
2021-11-10 at 09:53:41 | DEBUG | _remove_table
2021-11-10 at 09:53:41 | DEBUG | _schema_item_copy
2021-11-10 at 09:53:41 | DEBUG | _schemas
2021-11-10 at 09:53:41 | DEBUG | _sequences
2021-11-10 at 09:53:41 | DEBUG | _set_parent
2021-11-10 at 09:53:41 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 09:53:41 | DEBUG | _use_schema_map
2021-11-10 at 09:53:41 | DEBUG | bind
2021-11-10 at 09:53:41 | DEBUG | clear
2021-11-10 at 09:53:41 | DEBUG | create_all
2021-11-10 at 09:53:41 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 09:53:41 | DEBUG | dispatch
2021-11-10 at 09:53:41 | DEBUG | drop_all
2021-11-10 at 09:53:41 | DEBUG | get_children
2021-11-10 at 09:53:41 | DEBUG | info
2021-11-10 at 09:53:41 | DEBUG | is_bound
2021-11-10 at 09:53:41 | DEBUG | naming_convention
2021-11-10 at 09:53:41 | DEBUG | reflect
2021-11-10 at 09:53:41 | DEBUG | remove
2021-11-10 at 09:53:41 | DEBUG | schema
2021-11-10 at 09:53:41 | DEBUG | sorted_tables
2021-11-10 at 09:53:41 | DEBUG | tables
2021-11-10 at 09:53:41 | DEBUG | ===================================================
2021-11-10 at 09:53:41 | DEBUG | items
2021-11-10 at 09:53:41 | DEBUG | offices
2021-11-10 at 09:53:41 | DEBUG | productlines
2021-11-10 at 09:53:41 | DEBUG | tokens
2021-11-10 at 09:53:41 | DEBUG | zinopara
2021-11-10 at 09:53:41 | DEBUG | employees
2021-11-10 at 09:53:41 | DEBUG | products
2021-11-10 at 09:53:41 | DEBUG | customers
2021-11-10 at 09:53:41 | DEBUG | orders
2021-11-10 at 09:53:41 | DEBUG | payments
2021-11-10 at 09:53:41 | DEBUG | orderdetails
2021-11-10 at 09:53:41 | DEBUG | ****************************************************
2021-11-10 at 09:53:41 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 09:53:41 | INFO | Neptune Start Up ....
2021-11-10 at 09:53:41 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 09:53:41 | INFO | Add Custom query ...
2021-11-10 at 09:53:41 | INFO | Neptune Starting ....
2021-11-10 at 09:53:41 | INFO | API cache does not exists ....
2021-11-10 at 10:06:30 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:06:30 | INFO | API cache does not exists ....
2021-11-10 at 10:06:33 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:06:33 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:06:33 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:06:33 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:33 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-10 at 10:06:34 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:06:34 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 10:06:34 | DEBUG | ****************************************************
2021-11-10 at 10:06:34 | DEBUG | __class__
2021-11-10 at 10:06:34 | DEBUG | __class_getitem__
2021-11-10 at 10:06:34 | DEBUG | __contains__
2021-11-10 at 10:06:34 | DEBUG | __delattr__
2021-11-10 at 10:06:34 | DEBUG | __dict__
2021-11-10 at 10:06:34 | DEBUG | __dir__
2021-11-10 at 10:06:34 | DEBUG | __doc__
2021-11-10 at 10:06:34 | DEBUG | __eq__
2021-11-10 at 10:06:34 | DEBUG | __format__
2021-11-10 at 10:06:34 | DEBUG | __ge__
2021-11-10 at 10:06:34 | DEBUG | __getattribute__
2021-11-10 at 10:06:34 | DEBUG | __getstate__
2021-11-10 at 10:06:34 | DEBUG | __gt__
2021-11-10 at 10:06:34 | DEBUG | __hash__
2021-11-10 at 10:06:34 | DEBUG | __init__
2021-11-10 at 10:06:34 | DEBUG | __init_subclass__
2021-11-10 at 10:06:34 | DEBUG | __le__
2021-11-10 at 10:06:34 | DEBUG | __lt__
2021-11-10 at 10:06:34 | DEBUG | __module__
2021-11-10 at 10:06:34 | DEBUG | __ne__
2021-11-10 at 10:06:34 | DEBUG | __new__
2021-11-10 at 10:06:34 | DEBUG | __reduce__
2021-11-10 at 10:06:34 | DEBUG | __reduce_ex__
2021-11-10 at 10:06:34 | DEBUG | __repr__
2021-11-10 at 10:06:34 | DEBUG | __setattr__
2021-11-10 at 10:06:34 | DEBUG | __setstate__
2021-11-10 at 10:06:34 | DEBUG | __sizeof__
2021-11-10 at 10:06:34 | DEBUG | __str__
2021-11-10 at 10:06:34 | DEBUG | __subclasshook__
2021-11-10 at 10:06:34 | DEBUG | __visit_name__
2021-11-10 at 10:06:34 | DEBUG | __weakref__
2021-11-10 at 10:06:34 | DEBUG | _add_table
2021-11-10 at 10:06:34 | DEBUG | _bind
2021-11-10 at 10:06:34 | DEBUG | _bind_to
2021-11-10 at 10:06:34 | DEBUG | _compiler_dispatch
2021-11-10 at 10:06:34 | DEBUG | _fk_memos
2021-11-10 at 10:06:34 | DEBUG | _init_items
2021-11-10 at 10:06:34 | DEBUG | _original_compiler_dispatch
2021-11-10 at 10:06:34 | DEBUG | _remove_table
2021-11-10 at 10:06:34 | DEBUG | _schema_item_copy
2021-11-10 at 10:06:34 | DEBUG | _schemas
2021-11-10 at 10:06:34 | DEBUG | _sequences
2021-11-10 at 10:06:34 | DEBUG | _set_parent
2021-11-10 at 10:06:34 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 10:06:34 | DEBUG | _use_schema_map
2021-11-10 at 10:06:34 | DEBUG | bind
2021-11-10 at 10:06:34 | DEBUG | clear
2021-11-10 at 10:06:34 | DEBUG | create_all
2021-11-10 at 10:06:34 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 10:06:34 | DEBUG | dispatch
2021-11-10 at 10:06:34 | DEBUG | drop_all
2021-11-10 at 10:06:34 | DEBUG | get_children
2021-11-10 at 10:06:34 | DEBUG | info
2021-11-10 at 10:06:34 | DEBUG | is_bound
2021-11-10 at 10:06:34 | DEBUG | naming_convention
2021-11-10 at 10:06:34 | DEBUG | reflect
2021-11-10 at 10:06:34 | DEBUG | remove
2021-11-10 at 10:06:34 | DEBUG | schema
2021-11-10 at 10:06:34 | DEBUG | sorted_tables
2021-11-10 at 10:06:34 | DEBUG | tables
2021-11-10 at 10:06:34 | DEBUG | ===================================================
2021-11-10 at 10:06:34 | DEBUG | items
2021-11-10 at 10:06:34 | DEBUG | offices
2021-11-10 at 10:06:34 | DEBUG | productlines
2021-11-10 at 10:06:34 | DEBUG | tokens
2021-11-10 at 10:06:34 | DEBUG | zinopara
2021-11-10 at 10:06:34 | DEBUG | employees
2021-11-10 at 10:06:34 | DEBUG | products
2021-11-10 at 10:06:34 | DEBUG | customers
2021-11-10 at 10:06:34 | DEBUG | orders
2021-11-10 at 10:06:34 | DEBUG | payments
2021-11-10 at 10:06:34 | DEBUG | orderdetails
2021-11-10 at 10:06:34 | DEBUG | ****************************************************
2021-11-10 at 10:06:34 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:06:35 | INFO | Neptune Start Up ....
2021-11-10 at 10:06:35 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:06:36 | INFO | Add Custom query ...
2021-11-10 at 10:06:36 | INFO | Neptune Starting ....
2021-11-10 at 10:06:36 | INFO | API cache does not exists ....
2021-11-10 at 10:07:23 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:07:23 | INFO | API cache does not exists ....
2021-11-10 at 10:07:25 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:07:25 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:07:25 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:07:25 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034914c0>
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103491540>
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034915c0>
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103491600>
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103491680>
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103491740>
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034917c0>
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103491840>
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034918c0>
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103491900>
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103491980>
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034919c0>
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103491a40>
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103493b40>
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103493c00>
2021-11-10 at 10:07:25 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103493cc0>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103493d80>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103493e40>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103493f40>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103497040>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103497100>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103499300>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x103499380>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x10349c540>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x10349c600>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x10349c6c0>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x10349c780>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x10349c840>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x10349c940>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x10349ca00>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x10349cac0>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x10349cb80>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a0380>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a0440>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a0500>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a05c0>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a0680>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a4340>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a4380>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a4400>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a4480>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a4580>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a4640>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a4740>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a6f80>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a9080>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a90c0>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034a91c0>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034ab4c0>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034ab580>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034ab5c0>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034ab640>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034ade80>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034adf40>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034ae040>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034ae100>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034ae1c0>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034ae240>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034ae300>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034ae400>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034ae4c0>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034b4640>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034b6680>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034b6740>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034b6800>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034b6880>
2021-11-10 at 10:07:26 | SUCCESS | <method-wrapper '__str__' of dict object at 0x1034b6940>
2021-11-10 at 10:07:26 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:07:26 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 10:07:26 | DEBUG | ****************************************************
2021-11-10 at 10:07:26 | DEBUG | __class__
2021-11-10 at 10:07:26 | DEBUG | __class_getitem__
2021-11-10 at 10:07:26 | DEBUG | __contains__
2021-11-10 at 10:07:26 | DEBUG | __delattr__
2021-11-10 at 10:07:26 | DEBUG | __dict__
2021-11-10 at 10:07:26 | DEBUG | __dir__
2021-11-10 at 10:07:26 | DEBUG | __doc__
2021-11-10 at 10:07:26 | DEBUG | __eq__
2021-11-10 at 10:07:26 | DEBUG | __format__
2021-11-10 at 10:07:26 | DEBUG | __ge__
2021-11-10 at 10:07:26 | DEBUG | __getattribute__
2021-11-10 at 10:07:26 | DEBUG | __getstate__
2021-11-10 at 10:07:26 | DEBUG | __gt__
2021-11-10 at 10:07:26 | DEBUG | __hash__
2021-11-10 at 10:07:26 | DEBUG | __init__
2021-11-10 at 10:07:26 | DEBUG | __init_subclass__
2021-11-10 at 10:07:26 | DEBUG | __le__
2021-11-10 at 10:07:26 | DEBUG | __lt__
2021-11-10 at 10:07:26 | DEBUG | __module__
2021-11-10 at 10:07:26 | DEBUG | __ne__
2021-11-10 at 10:07:26 | DEBUG | __new__
2021-11-10 at 10:07:26 | DEBUG | __reduce__
2021-11-10 at 10:07:26 | DEBUG | __reduce_ex__
2021-11-10 at 10:07:26 | DEBUG | __repr__
2021-11-10 at 10:07:26 | DEBUG | __setattr__
2021-11-10 at 10:07:26 | DEBUG | __setstate__
2021-11-10 at 10:07:26 | DEBUG | __sizeof__
2021-11-10 at 10:07:26 | DEBUG | __str__
2021-11-10 at 10:07:26 | DEBUG | __subclasshook__
2021-11-10 at 10:07:26 | DEBUG | __visit_name__
2021-11-10 at 10:07:26 | DEBUG | __weakref__
2021-11-10 at 10:07:26 | DEBUG | _add_table
2021-11-10 at 10:07:26 | DEBUG | _bind
2021-11-10 at 10:07:26 | DEBUG | _bind_to
2021-11-10 at 10:07:26 | DEBUG | _compiler_dispatch
2021-11-10 at 10:07:26 | DEBUG | _fk_memos
2021-11-10 at 10:07:26 | DEBUG | _init_items
2021-11-10 at 10:07:26 | DEBUG | _original_compiler_dispatch
2021-11-10 at 10:07:26 | DEBUG | _remove_table
2021-11-10 at 10:07:26 | DEBUG | _schema_item_copy
2021-11-10 at 10:07:26 | DEBUG | _schemas
2021-11-10 at 10:07:26 | DEBUG | _sequences
2021-11-10 at 10:07:26 | DEBUG | _set_parent
2021-11-10 at 10:07:26 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 10:07:26 | DEBUG | _use_schema_map
2021-11-10 at 10:07:26 | DEBUG | bind
2021-11-10 at 10:07:26 | DEBUG | clear
2021-11-10 at 10:07:26 | DEBUG | create_all
2021-11-10 at 10:07:26 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 10:07:26 | DEBUG | dispatch
2021-11-10 at 10:07:26 | DEBUG | drop_all
2021-11-10 at 10:07:26 | DEBUG | get_children
2021-11-10 at 10:07:26 | DEBUG | info
2021-11-10 at 10:07:26 | DEBUG | is_bound
2021-11-10 at 10:07:26 | DEBUG | naming_convention
2021-11-10 at 10:07:26 | DEBUG | reflect
2021-11-10 at 10:07:26 | DEBUG | remove
2021-11-10 at 10:07:26 | DEBUG | schema
2021-11-10 at 10:07:26 | DEBUG | sorted_tables
2021-11-10 at 10:07:26 | DEBUG | tables
2021-11-10 at 10:07:26 | DEBUG | ===================================================
2021-11-10 at 10:07:26 | DEBUG | items
2021-11-10 at 10:07:26 | DEBUG | offices
2021-11-10 at 10:07:26 | DEBUG | productlines
2021-11-10 at 10:07:26 | DEBUG | tokens
2021-11-10 at 10:07:26 | DEBUG | zinopara
2021-11-10 at 10:07:26 | DEBUG | employees
2021-11-10 at 10:07:26 | DEBUG | products
2021-11-10 at 10:07:26 | DEBUG | customers
2021-11-10 at 10:07:26 | DEBUG | orders
2021-11-10 at 10:07:26 | DEBUG | payments
2021-11-10 at 10:07:26 | DEBUG | orderdetails
2021-11-10 at 10:07:26 | DEBUG | ****************************************************
2021-11-10 at 10:07:26 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:07:28 | INFO | Neptune Start Up ....
2021-11-10 at 10:07:28 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:07:28 | INFO | Add Custom query ...
2021-11-10 at 10:07:28 | INFO | Neptune Starting ....
2021-11-10 at 10:07:28 | INFO | API cache does not exists ....
2021-11-10 at 10:07:34 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:07:34 | INFO | API cache does not exists ....
2021-11-10 at 10:07:37 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:07:37 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:07:37 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:07:37 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'customerName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'contactLastName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'contactFirstName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'phone', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'addressLine1', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'addressLine2', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'city', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'state', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'postalCode', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'country', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'salesRepEmployeeNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': True, 'autoincrement': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'creditLimit', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'employeeNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'lastName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'firstName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'extension', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'email', 'type': VARCHAR(length=100), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'officeCode', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'reportsTo', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': True, 'autoincrement': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'jobTitle', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'id', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': True}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'item_no', 'type': VARCHAR(length=255), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'officeCode', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'city', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'phone', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'addressLine1', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'addressLine2', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'state', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'country', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'postalCode', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'territory', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'orderNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'productCode', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'quantityOrdered', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'priceEach', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'orderLineNumber', 'type': SMALLINT(display_width=6), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'orderNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'orderDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'requiredDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'shippedDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'status', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'comments', 'type': TEXT(), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:07:37 | SUCCESS | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'checkNumber', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'paymentDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'amount', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'productLine', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'textDescription', 'type': VARCHAR(length=4000), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'htmlDescription', 'type': MEDIUMTEXT(), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'image', 'type': MEDIUMBLOB(), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'productCode', 'type': VARCHAR(length=15), 'default': "''", 'comment': '产品代码', 'nullable': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'productName', 'type': VARCHAR(length=70), 'default': None, 'comment': '产品名称', 'nullable': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'productLine', 'type': VARCHAR(length=50), 'default': None, 'comment': '产品线', 'nullable': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'productScale', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'productVendor', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'productDescription', 'type': TEXT(), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'quantityInStock', 'type': SMALLINT(display_width=6), 'default': None, 'comment': '库存', 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'buyPrice', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': '价格', 'nullable': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'MSRP', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': '建议零售价', 'nullable': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 's', 'type': VARCHAR(length=6), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'id', 'type': VARCHAR(collation='utf8mb4_unicode_ci', length=255), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'type', 'type': VARCHAR(collation='utf8mb4_unicode_ci', length=255), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'creatorid', 'type': VARCHAR(collation='utf8mb4_unicode_ci', length=255), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'json', 'type': TEXT(collation='utf8mb4_unicode_ci'), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:07:38 | SUCCESS | {'name': 'json_updates', 'type': TEXT(collation='utf8mb4_unicode_ci'), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:07:38 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:07:38 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 10:07:38 | DEBUG | ****************************************************
2021-11-10 at 10:07:38 | DEBUG | __class__
2021-11-10 at 10:07:38 | DEBUG | __class_getitem__
2021-11-10 at 10:07:38 | DEBUG | __contains__
2021-11-10 at 10:07:38 | DEBUG | __delattr__
2021-11-10 at 10:07:38 | DEBUG | __dict__
2021-11-10 at 10:07:38 | DEBUG | __dir__
2021-11-10 at 10:07:38 | DEBUG | __doc__
2021-11-10 at 10:07:38 | DEBUG | __eq__
2021-11-10 at 10:07:38 | DEBUG | __format__
2021-11-10 at 10:07:38 | DEBUG | __ge__
2021-11-10 at 10:07:38 | DEBUG | __getattribute__
2021-11-10 at 10:07:38 | DEBUG | __getstate__
2021-11-10 at 10:07:38 | DEBUG | __gt__
2021-11-10 at 10:07:38 | DEBUG | __hash__
2021-11-10 at 10:07:38 | DEBUG | __init__
2021-11-10 at 10:07:38 | DEBUG | __init_subclass__
2021-11-10 at 10:07:38 | DEBUG | __le__
2021-11-10 at 10:07:38 | DEBUG | __lt__
2021-11-10 at 10:07:38 | DEBUG | __module__
2021-11-10 at 10:07:38 | DEBUG | __ne__
2021-11-10 at 10:07:38 | DEBUG | __new__
2021-11-10 at 10:07:38 | DEBUG | __reduce__
2021-11-10 at 10:07:38 | DEBUG | __reduce_ex__
2021-11-10 at 10:07:38 | DEBUG | __repr__
2021-11-10 at 10:07:38 | DEBUG | __setattr__
2021-11-10 at 10:07:38 | DEBUG | __setstate__
2021-11-10 at 10:07:38 | DEBUG | __sizeof__
2021-11-10 at 10:07:38 | DEBUG | __str__
2021-11-10 at 10:07:38 | DEBUG | __subclasshook__
2021-11-10 at 10:07:38 | DEBUG | __visit_name__
2021-11-10 at 10:07:38 | DEBUG | __weakref__
2021-11-10 at 10:07:38 | DEBUG | _add_table
2021-11-10 at 10:07:38 | DEBUG | _bind
2021-11-10 at 10:07:38 | DEBUG | _bind_to
2021-11-10 at 10:07:38 | DEBUG | _compiler_dispatch
2021-11-10 at 10:07:38 | DEBUG | _fk_memos
2021-11-10 at 10:07:38 | DEBUG | _init_items
2021-11-10 at 10:07:38 | DEBUG | _original_compiler_dispatch
2021-11-10 at 10:07:38 | DEBUG | _remove_table
2021-11-10 at 10:07:38 | DEBUG | _schema_item_copy
2021-11-10 at 10:07:38 | DEBUG | _schemas
2021-11-10 at 10:07:38 | DEBUG | _sequences
2021-11-10 at 10:07:38 | DEBUG | _set_parent
2021-11-10 at 10:07:38 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 10:07:38 | DEBUG | _use_schema_map
2021-11-10 at 10:07:38 | DEBUG | bind
2021-11-10 at 10:07:38 | DEBUG | clear
2021-11-10 at 10:07:38 | DEBUG | create_all
2021-11-10 at 10:07:38 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 10:07:38 | DEBUG | dispatch
2021-11-10 at 10:07:38 | DEBUG | drop_all
2021-11-10 at 10:07:38 | DEBUG | get_children
2021-11-10 at 10:07:38 | DEBUG | info
2021-11-10 at 10:07:38 | DEBUG | is_bound
2021-11-10 at 10:07:38 | DEBUG | naming_convention
2021-11-10 at 10:07:38 | DEBUG | reflect
2021-11-10 at 10:07:38 | DEBUG | remove
2021-11-10 at 10:07:38 | DEBUG | schema
2021-11-10 at 10:07:38 | DEBUG | sorted_tables
2021-11-10 at 10:07:38 | DEBUG | tables
2021-11-10 at 10:07:38 | DEBUG | ===================================================
2021-11-10 at 10:07:38 | DEBUG | items
2021-11-10 at 10:07:38 | DEBUG | offices
2021-11-10 at 10:07:38 | DEBUG | productlines
2021-11-10 at 10:07:38 | DEBUG | tokens
2021-11-10 at 10:07:38 | DEBUG | zinopara
2021-11-10 at 10:07:38 | DEBUG | employees
2021-11-10 at 10:07:38 | DEBUG | products
2021-11-10 at 10:07:38 | DEBUG | customers
2021-11-10 at 10:07:38 | DEBUG | orders
2021-11-10 at 10:07:38 | DEBUG | payments
2021-11-10 at 10:07:38 | DEBUG | orderdetails
2021-11-10 at 10:07:38 | DEBUG | ****************************************************
2021-11-10 at 10:07:38 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:07:39 | INFO | Neptune Start Up ....
2021-11-10 at 10:07:39 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:07:39 | INFO | Add Custom query ...
2021-11-10 at 10:07:39 | INFO | Neptune Starting ....
2021-11-10 at 10:07:39 | INFO | API cache does not exists ....
2021-11-10 at 10:08:35 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:08:35 | INFO | API cache does not exists ....
2021-11-10 at 10:08:38 | INFO | Neptune Start Up ....
2021-11-10 at 10:08:38 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:08:38 | INFO | Add Custom query ...
2021-11-10 at 10:08:38 | INFO | Neptune Starting ....
2021-11-10 at 10:08:38 | INFO | API cache does not exists ....
2021-11-10 at 10:10:41 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:10:41 | INFO | API cache does not exists ....
2021-11-10 at 10:10:43 | INFO | Neptune Start Up ....
2021-11-10 at 10:10:43 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:10:43 | INFO | Add Custom query ...
2021-11-10 at 10:10:43 | INFO | Neptune Starting ....
2021-11-10 at 10:10:43 | INFO | API cache does not exists ....
2021-11-10 at 10:19:20 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:19:20 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:19:20 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:19:20 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'customerName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'contactLastName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'contactFirstName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'phone', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'addressLine1', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'addressLine2', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'city', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'state', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'postalCode', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'country', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'salesRepEmployeeNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': True, 'autoincrement': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'creditLimit', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'employeeNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'lastName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'firstName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'extension', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'email', 'type': VARCHAR(length=100), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'officeCode', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'reportsTo', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': True, 'autoincrement': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'jobTitle', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'id', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': True}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'item_no', 'type': VARCHAR(length=255), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'officeCode', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'city', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'phone', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'addressLine1', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'addressLine2', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'state', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'country', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'postalCode', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'territory', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'orderNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'productCode', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'quantityOrdered', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'priceEach', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'orderLineNumber', 'type': SMALLINT(display_width=6), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'orderNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'orderDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'requiredDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'shippedDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'status', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'comments', 'type': TEXT(), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'checkNumber', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'paymentDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'amount', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'productLine', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'textDescription', 'type': VARCHAR(length=4000), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'htmlDescription', 'type': MEDIUMTEXT(), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'image', 'type': MEDIUMBLOB(), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'productCode', 'type': VARCHAR(length=15), 'default': "''", 'comment': '产品代码', 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'productName', 'type': VARCHAR(length=70), 'default': None, 'comment': '产品名称', 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'productLine', 'type': VARCHAR(length=50), 'default': None, 'comment': '产品线', 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'productScale', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'productVendor', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'productDescription', 'type': TEXT(), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'quantityInStock', 'type': SMALLINT(display_width=6), 'default': None, 'comment': '库存', 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'buyPrice', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': '价格', 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'MSRP', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': '建议零售价', 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 's', 'type': VARCHAR(length=6), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'id', 'type': VARCHAR(collation='utf8mb4_unicode_ci', length=255), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'type', 'type': VARCHAR(collation='utf8mb4_unicode_ci', length=255), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'creatorid', 'type': VARCHAR(collation='utf8mb4_unicode_ci', length=255), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'json', 'type': TEXT(collation='utf8mb4_unicode_ci'), 'default': None, 'comment': None, 'nullable': False}
2021-11-10 at 10:19:20 | SUCCESS | {'name': 'json_updates', 'type': TEXT(collation='utf8mb4_unicode_ci'), 'default': None, 'comment': None, 'nullable': True}
2021-11-10 at 10:19:20 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:19:20 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 10:19:20 | DEBUG | ****************************************************
2021-11-10 at 10:19:20 | DEBUG | __class__
2021-11-10 at 10:19:20 | DEBUG | __class_getitem__
2021-11-10 at 10:19:20 | DEBUG | __contains__
2021-11-10 at 10:19:20 | DEBUG | __delattr__
2021-11-10 at 10:19:20 | DEBUG | __dict__
2021-11-10 at 10:19:20 | DEBUG | __dir__
2021-11-10 at 10:19:20 | DEBUG | __doc__
2021-11-10 at 10:19:20 | DEBUG | __eq__
2021-11-10 at 10:19:20 | DEBUG | __format__
2021-11-10 at 10:19:20 | DEBUG | __ge__
2021-11-10 at 10:19:20 | DEBUG | __getattribute__
2021-11-10 at 10:19:20 | DEBUG | __getstate__
2021-11-10 at 10:19:20 | DEBUG | __gt__
2021-11-10 at 10:19:20 | DEBUG | __hash__
2021-11-10 at 10:19:20 | DEBUG | __init__
2021-11-10 at 10:19:20 | DEBUG | __init_subclass__
2021-11-10 at 10:19:20 | DEBUG | __le__
2021-11-10 at 10:19:20 | DEBUG | __lt__
2021-11-10 at 10:19:20 | DEBUG | __module__
2021-11-10 at 10:19:20 | DEBUG | __ne__
2021-11-10 at 10:19:20 | DEBUG | __new__
2021-11-10 at 10:19:20 | DEBUG | __reduce__
2021-11-10 at 10:19:20 | DEBUG | __reduce_ex__
2021-11-10 at 10:19:20 | DEBUG | __repr__
2021-11-10 at 10:19:20 | DEBUG | __setattr__
2021-11-10 at 10:19:20 | DEBUG | __setstate__
2021-11-10 at 10:19:20 | DEBUG | __sizeof__
2021-11-10 at 10:19:20 | DEBUG | __str__
2021-11-10 at 10:19:20 | DEBUG | __subclasshook__
2021-11-10 at 10:19:20 | DEBUG | __visit_name__
2021-11-10 at 10:19:20 | DEBUG | __weakref__
2021-11-10 at 10:19:20 | DEBUG | _add_table
2021-11-10 at 10:19:20 | DEBUG | _bind
2021-11-10 at 10:19:20 | DEBUG | _bind_to
2021-11-10 at 10:19:20 | DEBUG | _compiler_dispatch
2021-11-10 at 10:19:20 | DEBUG | _fk_memos
2021-11-10 at 10:19:20 | DEBUG | _init_items
2021-11-10 at 10:19:20 | DEBUG | _original_compiler_dispatch
2021-11-10 at 10:19:20 | DEBUG | _remove_table
2021-11-10 at 10:19:20 | DEBUG | _schema_item_copy
2021-11-10 at 10:19:20 | DEBUG | _schemas
2021-11-10 at 10:19:20 | DEBUG | _sequences
2021-11-10 at 10:19:20 | DEBUG | _set_parent
2021-11-10 at 10:19:20 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 10:19:20 | DEBUG | _use_schema_map
2021-11-10 at 10:19:20 | DEBUG | bind
2021-11-10 at 10:19:20 | DEBUG | clear
2021-11-10 at 10:19:20 | DEBUG | create_all
2021-11-10 at 10:19:20 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 10:19:20 | DEBUG | dispatch
2021-11-10 at 10:19:20 | DEBUG | drop_all
2021-11-10 at 10:19:20 | DEBUG | get_children
2021-11-10 at 10:19:20 | DEBUG | info
2021-11-10 at 10:19:20 | DEBUG | is_bound
2021-11-10 at 10:19:20 | DEBUG | naming_convention
2021-11-10 at 10:19:20 | DEBUG | reflect
2021-11-10 at 10:19:20 | DEBUG | remove
2021-11-10 at 10:19:20 | DEBUG | schema
2021-11-10 at 10:19:20 | DEBUG | sorted_tables
2021-11-10 at 10:19:20 | DEBUG | tables
2021-11-10 at 10:19:20 | DEBUG | ===================================================
2021-11-10 at 10:19:20 | DEBUG | items
2021-11-10 at 10:19:20 | DEBUG | offices
2021-11-10 at 10:19:20 | DEBUG | productlines
2021-11-10 at 10:19:20 | DEBUG | tokens
2021-11-10 at 10:19:20 | DEBUG | zinopara
2021-11-10 at 10:19:20 | DEBUG | employees
2021-11-10 at 10:19:20 | DEBUG | products
2021-11-10 at 10:19:20 | DEBUG | customers
2021-11-10 at 10:19:20 | DEBUG | orders
2021-11-10 at 10:19:20 | DEBUG | payments
2021-11-10 at 10:19:20 | DEBUG | orderdetails
2021-11-10 at 10:19:20 | DEBUG | ****************************************************
2021-11-10 at 10:19:20 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:19:46 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:19:46 | INFO | API cache does not exists ....
2021-11-10 at 10:19:50 | INFO | Neptune Start Up ....
2021-11-10 at 10:19:50 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:19:50 | INFO | Add Custom query ...
2021-11-10 at 10:19:50 | INFO | Neptune Starting ....
2021-11-10 at 10:19:50 | INFO | API cache does not exists ....
2021-11-10 at 10:19:55 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:19:55 | INFO | API cache does not exists ....
2021-11-10 at 10:19:58 | INFO | Neptune Start Up ....
2021-11-10 at 10:19:58 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:19:58 | INFO | Add Custom query ...
2021-11-10 at 10:19:58 | INFO | Neptune Starting ....
2021-11-10 at 10:19:58 | INFO | API cache does not exists ....
2021-11-10 at 10:21:00 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:21:00 | INFO | API cache does not exists ....
2021-11-10 at 10:21:05 | INFO | Neptune Start Up ....
2021-11-10 at 10:21:05 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:21:05 | INFO | Add Custom query ...
2021-11-10 at 10:21:06 | INFO | Neptune Starting ....
2021-11-10 at 10:21:06 | INFO | API cache does not exists ....
2021-11-10 at 10:21:06 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:21:06 | INFO | API cache does not exists ....
2021-11-10 at 10:21:09 | INFO | Neptune Start Up ....
2021-11-10 at 10:21:09 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:21:09 | INFO | Add Custom query ...
2021-11-10 at 10:21:09 | INFO | Neptune Starting ....
2021-11-10 at 10:21:10 | INFO | API cache does not exists ....
2021-11-10 at 10:21:38 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:21:38 | INFO | API cache does not exists ....
2021-11-10 at 10:21:39 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:21:39 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:21:39 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:21:39 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:21:39 | SUCCESS | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:21:39 | ERROR | Exception get metadata at genschema() 'computed' 
2021-11-10 at 10:21:39 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:21:39 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 10:21:39 | DEBUG | ****************************************************
2021-11-10 at 10:21:39 | DEBUG | __class__
2021-11-10 at 10:21:39 | DEBUG | __class_getitem__
2021-11-10 at 10:21:39 | DEBUG | __contains__
2021-11-10 at 10:21:39 | DEBUG | __delattr__
2021-11-10 at 10:21:39 | DEBUG | __dict__
2021-11-10 at 10:21:39 | DEBUG | __dir__
2021-11-10 at 10:21:39 | DEBUG | __doc__
2021-11-10 at 10:21:39 | DEBUG | __eq__
2021-11-10 at 10:21:39 | DEBUG | __format__
2021-11-10 at 10:21:39 | DEBUG | __ge__
2021-11-10 at 10:21:39 | DEBUG | __getattribute__
2021-11-10 at 10:21:39 | DEBUG | __getstate__
2021-11-10 at 10:21:39 | DEBUG | __gt__
2021-11-10 at 10:21:39 | DEBUG | __hash__
2021-11-10 at 10:21:39 | DEBUG | __init__
2021-11-10 at 10:21:39 | DEBUG | __init_subclass__
2021-11-10 at 10:21:39 | DEBUG | __le__
2021-11-10 at 10:21:39 | DEBUG | __lt__
2021-11-10 at 10:21:39 | DEBUG | __module__
2021-11-10 at 10:21:39 | DEBUG | __ne__
2021-11-10 at 10:21:39 | DEBUG | __new__
2021-11-10 at 10:21:39 | DEBUG | __reduce__
2021-11-10 at 10:21:39 | DEBUG | __reduce_ex__
2021-11-10 at 10:21:39 | DEBUG | __repr__
2021-11-10 at 10:21:39 | DEBUG | __setattr__
2021-11-10 at 10:21:39 | DEBUG | __setstate__
2021-11-10 at 10:21:39 | DEBUG | __sizeof__
2021-11-10 at 10:21:39 | DEBUG | __str__
2021-11-10 at 10:21:39 | DEBUG | __subclasshook__
2021-11-10 at 10:21:39 | DEBUG | __visit_name__
2021-11-10 at 10:21:39 | DEBUG | __weakref__
2021-11-10 at 10:21:39 | DEBUG | _add_table
2021-11-10 at 10:21:39 | DEBUG | _bind
2021-11-10 at 10:21:39 | DEBUG | _bind_to
2021-11-10 at 10:21:39 | DEBUG | _compiler_dispatch
2021-11-10 at 10:21:39 | DEBUG | _fk_memos
2021-11-10 at 10:21:39 | DEBUG | _init_items
2021-11-10 at 10:21:39 | DEBUG | _original_compiler_dispatch
2021-11-10 at 10:21:39 | DEBUG | _remove_table
2021-11-10 at 10:21:39 | DEBUG | _schema_item_copy
2021-11-10 at 10:21:39 | DEBUG | _schemas
2021-11-10 at 10:21:39 | DEBUG | _sequences
2021-11-10 at 10:21:39 | DEBUG | _set_parent
2021-11-10 at 10:21:39 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 10:21:39 | DEBUG | _use_schema_map
2021-11-10 at 10:21:39 | DEBUG | bind
2021-11-10 at 10:21:39 | DEBUG | clear
2021-11-10 at 10:21:39 | DEBUG | create_all
2021-11-10 at 10:21:39 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 10:21:39 | DEBUG | dispatch
2021-11-10 at 10:21:39 | DEBUG | drop_all
2021-11-10 at 10:21:39 | DEBUG | get_children
2021-11-10 at 10:21:39 | DEBUG | info
2021-11-10 at 10:21:39 | DEBUG | is_bound
2021-11-10 at 10:21:39 | DEBUG | naming_convention
2021-11-10 at 10:21:39 | DEBUG | reflect
2021-11-10 at 10:21:39 | DEBUG | remove
2021-11-10 at 10:21:39 | DEBUG | schema
2021-11-10 at 10:21:39 | DEBUG | sorted_tables
2021-11-10 at 10:21:39 | DEBUG | tables
2021-11-10 at 10:21:39 | DEBUG | ===================================================
2021-11-10 at 10:21:39 | DEBUG | items
2021-11-10 at 10:21:39 | DEBUG | offices
2021-11-10 at 10:21:39 | DEBUG | productlines
2021-11-10 at 10:21:39 | DEBUG | tokens
2021-11-10 at 10:21:39 | DEBUG | zinopara
2021-11-10 at 10:21:39 | DEBUG | employees
2021-11-10 at 10:21:39 | DEBUG | products
2021-11-10 at 10:21:39 | DEBUG | customers
2021-11-10 at 10:21:39 | DEBUG | orders
2021-11-10 at 10:21:39 | DEBUG | payments
2021-11-10 at 10:21:39 | DEBUG | orderdetails
2021-11-10 at 10:21:39 | DEBUG | ****************************************************
2021-11-10 at 10:21:39 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:21:40 | INFO | Neptune Start Up ....
2021-11-10 at 10:21:40 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:21:41 | INFO | Add Custom query ...
2021-11-10 at 10:21:41 | INFO | Neptune Starting ....
2021-11-10 at 10:21:41 | INFO | API cache does not exists ....
2021-11-10 at 10:22:45 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:22:45 | INFO | API cache does not exists ....
2021-11-10 at 10:22:46 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:22:46 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:22:46 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:22:46 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:22:47 | SUCCESS | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:22:47 | SUCCESS | INTEGER
2021-11-10 at 10:22:47 | ERROR | Exception get metadata at genschema() 'computed' 
2021-11-10 at 10:22:47 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:22:47 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 10:22:47 | DEBUG | ****************************************************
2021-11-10 at 10:22:47 | DEBUG | __class__
2021-11-10 at 10:22:47 | DEBUG | __class_getitem__
2021-11-10 at 10:22:47 | DEBUG | __contains__
2021-11-10 at 10:22:47 | DEBUG | __delattr__
2021-11-10 at 10:22:47 | DEBUG | __dict__
2021-11-10 at 10:22:47 | DEBUG | __dir__
2021-11-10 at 10:22:47 | DEBUG | __doc__
2021-11-10 at 10:22:47 | DEBUG | __eq__
2021-11-10 at 10:22:47 | DEBUG | __format__
2021-11-10 at 10:22:47 | DEBUG | __ge__
2021-11-10 at 10:22:47 | DEBUG | __getattribute__
2021-11-10 at 10:22:47 | DEBUG | __getstate__
2021-11-10 at 10:22:47 | DEBUG | __gt__
2021-11-10 at 10:22:47 | DEBUG | __hash__
2021-11-10 at 10:22:47 | DEBUG | __init__
2021-11-10 at 10:22:47 | DEBUG | __init_subclass__
2021-11-10 at 10:22:47 | DEBUG | __le__
2021-11-10 at 10:22:47 | DEBUG | __lt__
2021-11-10 at 10:22:47 | DEBUG | __module__
2021-11-10 at 10:22:47 | DEBUG | __ne__
2021-11-10 at 10:22:47 | DEBUG | __new__
2021-11-10 at 10:22:47 | DEBUG | __reduce__
2021-11-10 at 10:22:47 | DEBUG | __reduce_ex__
2021-11-10 at 10:22:47 | DEBUG | __repr__
2021-11-10 at 10:22:47 | DEBUG | __setattr__
2021-11-10 at 10:22:47 | DEBUG | __setstate__
2021-11-10 at 10:22:47 | DEBUG | __sizeof__
2021-11-10 at 10:22:47 | DEBUG | __str__
2021-11-10 at 10:22:47 | DEBUG | __subclasshook__
2021-11-10 at 10:22:47 | DEBUG | __visit_name__
2021-11-10 at 10:22:47 | DEBUG | __weakref__
2021-11-10 at 10:22:47 | DEBUG | _add_table
2021-11-10 at 10:22:47 | DEBUG | _bind
2021-11-10 at 10:22:47 | DEBUG | _bind_to
2021-11-10 at 10:22:47 | DEBUG | _compiler_dispatch
2021-11-10 at 10:22:47 | DEBUG | _fk_memos
2021-11-10 at 10:22:47 | DEBUG | _init_items
2021-11-10 at 10:22:47 | DEBUG | _original_compiler_dispatch
2021-11-10 at 10:22:47 | DEBUG | _remove_table
2021-11-10 at 10:22:47 | DEBUG | _schema_item_copy
2021-11-10 at 10:22:47 | DEBUG | _schemas
2021-11-10 at 10:22:47 | DEBUG | _sequences
2021-11-10 at 10:22:47 | DEBUG | _set_parent
2021-11-10 at 10:22:47 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 10:22:47 | DEBUG | _use_schema_map
2021-11-10 at 10:22:47 | DEBUG | bind
2021-11-10 at 10:22:47 | DEBUG | clear
2021-11-10 at 10:22:47 | DEBUG | create_all
2021-11-10 at 10:22:47 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 10:22:47 | DEBUG | dispatch
2021-11-10 at 10:22:47 | DEBUG | drop_all
2021-11-10 at 10:22:47 | DEBUG | get_children
2021-11-10 at 10:22:47 | DEBUG | info
2021-11-10 at 10:22:47 | DEBUG | is_bound
2021-11-10 at 10:22:47 | DEBUG | naming_convention
2021-11-10 at 10:22:47 | DEBUG | reflect
2021-11-10 at 10:22:47 | DEBUG | remove
2021-11-10 at 10:22:47 | DEBUG | schema
2021-11-10 at 10:22:47 | DEBUG | sorted_tables
2021-11-10 at 10:22:47 | DEBUG | tables
2021-11-10 at 10:22:47 | DEBUG | ===================================================
2021-11-10 at 10:22:47 | DEBUG | items
2021-11-10 at 10:22:47 | DEBUG | offices
2021-11-10 at 10:22:47 | DEBUG | productlines
2021-11-10 at 10:22:47 | DEBUG | tokens
2021-11-10 at 10:22:47 | DEBUG | zinopara
2021-11-10 at 10:22:47 | DEBUG | employees
2021-11-10 at 10:22:47 | DEBUG | products
2021-11-10 at 10:22:47 | DEBUG | customers
2021-11-10 at 10:22:47 | DEBUG | orders
2021-11-10 at 10:22:47 | DEBUG | payments
2021-11-10 at 10:22:47 | DEBUG | orderdetails
2021-11-10 at 10:22:47 | DEBUG | ****************************************************
2021-11-10 at 10:22:47 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:22:49 | INFO | Neptune Start Up ....
2021-11-10 at 10:22:49 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:22:49 | INFO | Add Custom query ...
2021-11-10 at 10:22:49 | INFO | Neptune Starting ....
2021-11-10 at 10:22:49 | INFO | API cache does not exists ....
2021-11-10 at 10:23:04 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:23:04 | INFO | API cache does not exists ....
2021-11-10 at 10:23:05 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:23:05 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:23:05 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:23:05 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:23:05 | SUCCESS | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:23:05 | SUCCESS | INTEGER
2021-11-10 at 10:23:05 | ERROR | Exception get metadata at genschema() 'computed' 
2021-11-10 at 10:23:05 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:23:05 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 10:23:05 | DEBUG | ****************************************************
2021-11-10 at 10:23:05 | DEBUG | __class__
2021-11-10 at 10:23:05 | DEBUG | __class_getitem__
2021-11-10 at 10:23:05 | DEBUG | __contains__
2021-11-10 at 10:23:05 | DEBUG | __delattr__
2021-11-10 at 10:23:05 | DEBUG | __dict__
2021-11-10 at 10:23:05 | DEBUG | __dir__
2021-11-10 at 10:23:05 | DEBUG | __doc__
2021-11-10 at 10:23:05 | DEBUG | __eq__
2021-11-10 at 10:23:05 | DEBUG | __format__
2021-11-10 at 10:23:05 | DEBUG | __ge__
2021-11-10 at 10:23:05 | DEBUG | __getattribute__
2021-11-10 at 10:23:05 | DEBUG | __getstate__
2021-11-10 at 10:23:05 | DEBUG | __gt__
2021-11-10 at 10:23:05 | DEBUG | __hash__
2021-11-10 at 10:23:05 | DEBUG | __init__
2021-11-10 at 10:23:05 | DEBUG | __init_subclass__
2021-11-10 at 10:23:05 | DEBUG | __le__
2021-11-10 at 10:23:05 | DEBUG | __lt__
2021-11-10 at 10:23:05 | DEBUG | __module__
2021-11-10 at 10:23:05 | DEBUG | __ne__
2021-11-10 at 10:23:05 | DEBUG | __new__
2021-11-10 at 10:23:05 | DEBUG | __reduce__
2021-11-10 at 10:23:05 | DEBUG | __reduce_ex__
2021-11-10 at 10:23:05 | DEBUG | __repr__
2021-11-10 at 10:23:05 | DEBUG | __setattr__
2021-11-10 at 10:23:05 | DEBUG | __setstate__
2021-11-10 at 10:23:05 | DEBUG | __sizeof__
2021-11-10 at 10:23:05 | DEBUG | __str__
2021-11-10 at 10:23:05 | DEBUG | __subclasshook__
2021-11-10 at 10:23:05 | DEBUG | __visit_name__
2021-11-10 at 10:23:05 | DEBUG | __weakref__
2021-11-10 at 10:23:05 | DEBUG | _add_table
2021-11-10 at 10:23:05 | DEBUG | _bind
2021-11-10 at 10:23:05 | DEBUG | _bind_to
2021-11-10 at 10:23:05 | DEBUG | _compiler_dispatch
2021-11-10 at 10:23:05 | DEBUG | _fk_memos
2021-11-10 at 10:23:05 | DEBUG | _init_items
2021-11-10 at 10:23:05 | DEBUG | _original_compiler_dispatch
2021-11-10 at 10:23:05 | DEBUG | _remove_table
2021-11-10 at 10:23:05 | DEBUG | _schema_item_copy
2021-11-10 at 10:23:05 | DEBUG | _schemas
2021-11-10 at 10:23:05 | DEBUG | _sequences
2021-11-10 at 10:23:05 | DEBUG | _set_parent
2021-11-10 at 10:23:05 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 10:23:05 | DEBUG | _use_schema_map
2021-11-10 at 10:23:05 | DEBUG | bind
2021-11-10 at 10:23:05 | DEBUG | clear
2021-11-10 at 10:23:05 | DEBUG | create_all
2021-11-10 at 10:23:05 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 10:23:05 | DEBUG | dispatch
2021-11-10 at 10:23:05 | DEBUG | drop_all
2021-11-10 at 10:23:05 | DEBUG | get_children
2021-11-10 at 10:23:05 | DEBUG | info
2021-11-10 at 10:23:05 | DEBUG | is_bound
2021-11-10 at 10:23:05 | DEBUG | naming_convention
2021-11-10 at 10:23:05 | DEBUG | reflect
2021-11-10 at 10:23:05 | DEBUG | remove
2021-11-10 at 10:23:05 | DEBUG | schema
2021-11-10 at 10:23:05 | DEBUG | sorted_tables
2021-11-10 at 10:23:05 | DEBUG | tables
2021-11-10 at 10:23:05 | DEBUG | ===================================================
2021-11-10 at 10:23:05 | DEBUG | items
2021-11-10 at 10:23:05 | DEBUG | offices
2021-11-10 at 10:23:05 | DEBUG | productlines
2021-11-10 at 10:23:05 | DEBUG | tokens
2021-11-10 at 10:23:05 | DEBUG | zinopara
2021-11-10 at 10:23:05 | DEBUG | employees
2021-11-10 at 10:23:05 | DEBUG | products
2021-11-10 at 10:23:05 | DEBUG | customers
2021-11-10 at 10:23:05 | DEBUG | orders
2021-11-10 at 10:23:05 | DEBUG | payments
2021-11-10 at 10:23:05 | DEBUG | orderdetails
2021-11-10 at 10:23:05 | DEBUG | ****************************************************
2021-11-10 at 10:23:05 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:23:08 | INFO | Neptune Start Up ....
2021-11-10 at 10:23:08 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:23:08 | INFO | Add Custom query ...
2021-11-10 at 10:23:08 | INFO | Neptune Starting ....
2021-11-10 at 10:23:08 | INFO | API cache does not exists ....
2021-11-10 at 10:24:05 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:24:05 | INFO | API cache does not exists ....
2021-11-10 at 10:24:08 | INFO | Neptune Start Up ....
2021-11-10 at 10:24:08 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:24:08 | INFO | Add Custom query ...
2021-11-10 at 10:24:08 | INFO | Neptune Starting ....
2021-11-10 at 10:24:08 | INFO | API cache does not exists ....
2021-11-10 at 10:26:59 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:26:59 | INFO | API cache does not exists ....
2021-11-10 at 10:27:00 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:27:00 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:27:00 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:27:00 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:27:00 | SUCCESS | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:27:00 | ERROR | Exception get metadata at genschema() 'computed' 
2021-11-10 at 10:27:00 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:27:00 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 10:27:00 | DEBUG | ****************************************************
2021-11-10 at 10:27:00 | DEBUG | __class__
2021-11-10 at 10:27:00 | DEBUG | __class_getitem__
2021-11-10 at 10:27:00 | DEBUG | __contains__
2021-11-10 at 10:27:00 | DEBUG | __delattr__
2021-11-10 at 10:27:00 | DEBUG | __dict__
2021-11-10 at 10:27:00 | DEBUG | __dir__
2021-11-10 at 10:27:00 | DEBUG | __doc__
2021-11-10 at 10:27:00 | DEBUG | __eq__
2021-11-10 at 10:27:00 | DEBUG | __format__
2021-11-10 at 10:27:00 | DEBUG | __ge__
2021-11-10 at 10:27:00 | DEBUG | __getattribute__
2021-11-10 at 10:27:00 | DEBUG | __getstate__
2021-11-10 at 10:27:00 | DEBUG | __gt__
2021-11-10 at 10:27:00 | DEBUG | __hash__
2021-11-10 at 10:27:00 | DEBUG | __init__
2021-11-10 at 10:27:00 | DEBUG | __init_subclass__
2021-11-10 at 10:27:00 | DEBUG | __le__
2021-11-10 at 10:27:00 | DEBUG | __lt__
2021-11-10 at 10:27:00 | DEBUG | __module__
2021-11-10 at 10:27:00 | DEBUG | __ne__
2021-11-10 at 10:27:00 | DEBUG | __new__
2021-11-10 at 10:27:00 | DEBUG | __reduce__
2021-11-10 at 10:27:00 | DEBUG | __reduce_ex__
2021-11-10 at 10:27:00 | DEBUG | __repr__
2021-11-10 at 10:27:00 | DEBUG | __setattr__
2021-11-10 at 10:27:00 | DEBUG | __setstate__
2021-11-10 at 10:27:00 | DEBUG | __sizeof__
2021-11-10 at 10:27:00 | DEBUG | __str__
2021-11-10 at 10:27:00 | DEBUG | __subclasshook__
2021-11-10 at 10:27:00 | DEBUG | __visit_name__
2021-11-10 at 10:27:00 | DEBUG | __weakref__
2021-11-10 at 10:27:00 | DEBUG | _add_table
2021-11-10 at 10:27:00 | DEBUG | _bind
2021-11-10 at 10:27:00 | DEBUG | _bind_to
2021-11-10 at 10:27:00 | DEBUG | _compiler_dispatch
2021-11-10 at 10:27:00 | DEBUG | _fk_memos
2021-11-10 at 10:27:00 | DEBUG | _init_items
2021-11-10 at 10:27:00 | DEBUG | _original_compiler_dispatch
2021-11-10 at 10:27:00 | DEBUG | _remove_table
2021-11-10 at 10:27:00 | DEBUG | _schema_item_copy
2021-11-10 at 10:27:00 | DEBUG | _schemas
2021-11-10 at 10:27:00 | DEBUG | _sequences
2021-11-10 at 10:27:00 | DEBUG | _set_parent
2021-11-10 at 10:27:00 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 10:27:00 | DEBUG | _use_schema_map
2021-11-10 at 10:27:00 | DEBUG | bind
2021-11-10 at 10:27:00 | DEBUG | clear
2021-11-10 at 10:27:00 | DEBUG | create_all
2021-11-10 at 10:27:00 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 10:27:00 | DEBUG | dispatch
2021-11-10 at 10:27:00 | DEBUG | drop_all
2021-11-10 at 10:27:00 | DEBUG | get_children
2021-11-10 at 10:27:00 | DEBUG | info
2021-11-10 at 10:27:00 | DEBUG | is_bound
2021-11-10 at 10:27:00 | DEBUG | naming_convention
2021-11-10 at 10:27:00 | DEBUG | reflect
2021-11-10 at 10:27:00 | DEBUG | remove
2021-11-10 at 10:27:00 | DEBUG | schema
2021-11-10 at 10:27:00 | DEBUG | sorted_tables
2021-11-10 at 10:27:00 | DEBUG | tables
2021-11-10 at 10:27:00 | DEBUG | ===================================================
2021-11-10 at 10:27:00 | DEBUG | items
2021-11-10 at 10:27:00 | DEBUG | offices
2021-11-10 at 10:27:00 | DEBUG | productlines
2021-11-10 at 10:27:00 | DEBUG | tokens
2021-11-10 at 10:27:00 | DEBUG | zinopara
2021-11-10 at 10:27:00 | DEBUG | employees
2021-11-10 at 10:27:00 | DEBUG | products
2021-11-10 at 10:27:00 | DEBUG | customers
2021-11-10 at 10:27:00 | DEBUG | orders
2021-11-10 at 10:27:00 | DEBUG | payments
2021-11-10 at 10:27:00 | DEBUG | orderdetails
2021-11-10 at 10:27:00 | DEBUG | ****************************************************
2021-11-10 at 10:27:00 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:27:04 | INFO | Neptune Start Up ....
2021-11-10 at 10:27:04 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:27:04 | INFO | Add Custom query ...
2021-11-10 at 10:27:04 | INFO | Neptune Starting ....
2021-11-10 at 10:27:04 | INFO | API cache does not exists ....
2021-11-10 at 10:27:39 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:27:39 | INFO | API cache does not exists ....
2021-11-10 at 10:27:40 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:27:40 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:27:40 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:27:40 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:27:40 | SUCCESS | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-10 at 10:27:40 | CRITICAL | "{'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}"
2021-11-10 at 10:27:40 | ERROR | Exception get metadata at genschema() 'computed' 
2021-11-10 at 10:27:40 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:27:40 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 10:27:40 | DEBUG | ****************************************************
2021-11-10 at 10:27:40 | DEBUG | __class__
2021-11-10 at 10:27:40 | DEBUG | __class_getitem__
2021-11-10 at 10:27:40 | DEBUG | __contains__
2021-11-10 at 10:27:40 | DEBUG | __delattr__
2021-11-10 at 10:27:40 | DEBUG | __dict__
2021-11-10 at 10:27:40 | DEBUG | __dir__
2021-11-10 at 10:27:40 | DEBUG | __doc__
2021-11-10 at 10:27:40 | DEBUG | __eq__
2021-11-10 at 10:27:40 | DEBUG | __format__
2021-11-10 at 10:27:40 | DEBUG | __ge__
2021-11-10 at 10:27:40 | DEBUG | __getattribute__
2021-11-10 at 10:27:40 | DEBUG | __getstate__
2021-11-10 at 10:27:40 | DEBUG | __gt__
2021-11-10 at 10:27:40 | DEBUG | __hash__
2021-11-10 at 10:27:40 | DEBUG | __init__
2021-11-10 at 10:27:40 | DEBUG | __init_subclass__
2021-11-10 at 10:27:40 | DEBUG | __le__
2021-11-10 at 10:27:40 | DEBUG | __lt__
2021-11-10 at 10:27:40 | DEBUG | __module__
2021-11-10 at 10:27:40 | DEBUG | __ne__
2021-11-10 at 10:27:40 | DEBUG | __new__
2021-11-10 at 10:27:40 | DEBUG | __reduce__
2021-11-10 at 10:27:40 | DEBUG | __reduce_ex__
2021-11-10 at 10:27:40 | DEBUG | __repr__
2021-11-10 at 10:27:40 | DEBUG | __setattr__
2021-11-10 at 10:27:40 | DEBUG | __setstate__
2021-11-10 at 10:27:40 | DEBUG | __sizeof__
2021-11-10 at 10:27:40 | DEBUG | __str__
2021-11-10 at 10:27:40 | DEBUG | __subclasshook__
2021-11-10 at 10:27:40 | DEBUG | __visit_name__
2021-11-10 at 10:27:40 | DEBUG | __weakref__
2021-11-10 at 10:27:40 | DEBUG | _add_table
2021-11-10 at 10:27:40 | DEBUG | _bind
2021-11-10 at 10:27:40 | DEBUG | _bind_to
2021-11-10 at 10:27:40 | DEBUG | _compiler_dispatch
2021-11-10 at 10:27:40 | DEBUG | _fk_memos
2021-11-10 at 10:27:40 | DEBUG | _init_items
2021-11-10 at 10:27:40 | DEBUG | _original_compiler_dispatch
2021-11-10 at 10:27:40 | DEBUG | _remove_table
2021-11-10 at 10:27:40 | DEBUG | _schema_item_copy
2021-11-10 at 10:27:40 | DEBUG | _schemas
2021-11-10 at 10:27:40 | DEBUG | _sequences
2021-11-10 at 10:27:40 | DEBUG | _set_parent
2021-11-10 at 10:27:40 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 10:27:40 | DEBUG | _use_schema_map
2021-11-10 at 10:27:40 | DEBUG | bind
2021-11-10 at 10:27:40 | DEBUG | clear
2021-11-10 at 10:27:40 | DEBUG | create_all
2021-11-10 at 10:27:40 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 10:27:40 | DEBUG | dispatch
2021-11-10 at 10:27:40 | DEBUG | drop_all
2021-11-10 at 10:27:40 | DEBUG | get_children
2021-11-10 at 10:27:40 | DEBUG | info
2021-11-10 at 10:27:40 | DEBUG | is_bound
2021-11-10 at 10:27:40 | DEBUG | naming_convention
2021-11-10 at 10:27:40 | DEBUG | reflect
2021-11-10 at 10:27:40 | DEBUG | remove
2021-11-10 at 10:27:40 | DEBUG | schema
2021-11-10 at 10:27:40 | DEBUG | sorted_tables
2021-11-10 at 10:27:40 | DEBUG | tables
2021-11-10 at 10:27:40 | DEBUG | ===================================================
2021-11-10 at 10:27:40 | DEBUG | items
2021-11-10 at 10:27:40 | DEBUG | offices
2021-11-10 at 10:27:40 | DEBUG | productlines
2021-11-10 at 10:27:40 | DEBUG | tokens
2021-11-10 at 10:27:40 | DEBUG | zinopara
2021-11-10 at 10:27:40 | DEBUG | employees
2021-11-10 at 10:27:40 | DEBUG | products
2021-11-10 at 10:27:41 | DEBUG | customers
2021-11-10 at 10:27:41 | DEBUG | orders
2021-11-10 at 10:27:41 | DEBUG | payments
2021-11-10 at 10:27:41 | DEBUG | orderdetails
2021-11-10 at 10:27:41 | DEBUG | ****************************************************
2021-11-10 at 10:27:41 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:27:44 | INFO | Neptune Start Up ....
2021-11-10 at 10:27:44 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:27:44 | INFO | Add Custom query ...
2021-11-10 at 10:27:44 | INFO | Neptune Starting ....
2021-11-10 at 10:27:44 | INFO | API cache does not exists ....
2021-11-10 at 10:28:57 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:28:57 | INFO | API cache does not exists ....
2021-11-10 at 10:29:03 | INFO | Neptune Start Up ....
2021-11-10 at 10:29:03 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:29:03 | INFO | Add Custom query ...
2021-11-10 at 10:29:03 | INFO | Neptune Starting ....
2021-11-10 at 10:29:03 | INFO | API cache does not exists ....
2021-11-10 at 10:29:25 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:29:25 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:29:25 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:29:25 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:29:26 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:29:26 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 10:29:26 | DEBUG | ****************************************************
2021-11-10 at 10:29:26 | DEBUG | __class__
2021-11-10 at 10:29:26 | DEBUG | __class_getitem__
2021-11-10 at 10:29:26 | DEBUG | __contains__
2021-11-10 at 10:29:26 | DEBUG | __delattr__
2021-11-10 at 10:29:26 | DEBUG | __dict__
2021-11-10 at 10:29:26 | DEBUG | __dir__
2021-11-10 at 10:29:26 | DEBUG | __doc__
2021-11-10 at 10:29:26 | DEBUG | __eq__
2021-11-10 at 10:29:26 | DEBUG | __format__
2021-11-10 at 10:29:26 | DEBUG | __ge__
2021-11-10 at 10:29:26 | DEBUG | __getattribute__
2021-11-10 at 10:29:26 | DEBUG | __getstate__
2021-11-10 at 10:29:26 | DEBUG | __gt__
2021-11-10 at 10:29:26 | DEBUG | __hash__
2021-11-10 at 10:29:26 | DEBUG | __init__
2021-11-10 at 10:29:26 | DEBUG | __init_subclass__
2021-11-10 at 10:29:26 | DEBUG | __le__
2021-11-10 at 10:29:26 | DEBUG | __lt__
2021-11-10 at 10:29:26 | DEBUG | __module__
2021-11-10 at 10:29:26 | DEBUG | __ne__
2021-11-10 at 10:29:26 | DEBUG | __new__
2021-11-10 at 10:29:26 | DEBUG | __reduce__
2021-11-10 at 10:29:26 | DEBUG | __reduce_ex__
2021-11-10 at 10:29:26 | DEBUG | __repr__
2021-11-10 at 10:29:26 | DEBUG | __setattr__
2021-11-10 at 10:29:26 | DEBUG | __setstate__
2021-11-10 at 10:29:26 | DEBUG | __sizeof__
2021-11-10 at 10:29:26 | DEBUG | __str__
2021-11-10 at 10:29:26 | DEBUG | __subclasshook__
2021-11-10 at 10:29:26 | DEBUG | __visit_name__
2021-11-10 at 10:29:26 | DEBUG | __weakref__
2021-11-10 at 10:29:26 | DEBUG | _add_table
2021-11-10 at 10:29:26 | DEBUG | _bind
2021-11-10 at 10:29:26 | DEBUG | _bind_to
2021-11-10 at 10:29:26 | DEBUG | _compiler_dispatch
2021-11-10 at 10:29:26 | DEBUG | _fk_memos
2021-11-10 at 10:29:26 | DEBUG | _init_items
2021-11-10 at 10:29:26 | DEBUG | _original_compiler_dispatch
2021-11-10 at 10:29:26 | DEBUG | _remove_table
2021-11-10 at 10:29:26 | DEBUG | _schema_item_copy
2021-11-10 at 10:29:26 | DEBUG | _schemas
2021-11-10 at 10:29:26 | DEBUG | _sequences
2021-11-10 at 10:29:26 | DEBUG | _set_parent
2021-11-10 at 10:29:26 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 10:29:26 | DEBUG | _use_schema_map
2021-11-10 at 10:29:26 | DEBUG | bind
2021-11-10 at 10:29:26 | DEBUG | clear
2021-11-10 at 10:29:26 | DEBUG | create_all
2021-11-10 at 10:29:26 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 10:29:26 | DEBUG | dispatch
2021-11-10 at 10:29:26 | DEBUG | drop_all
2021-11-10 at 10:29:26 | DEBUG | get_children
2021-11-10 at 10:29:26 | DEBUG | info
2021-11-10 at 10:29:26 | DEBUG | is_bound
2021-11-10 at 10:29:26 | DEBUG | naming_convention
2021-11-10 at 10:29:26 | DEBUG | reflect
2021-11-10 at 10:29:26 | DEBUG | remove
2021-11-10 at 10:29:26 | DEBUG | schema
2021-11-10 at 10:29:26 | DEBUG | sorted_tables
2021-11-10 at 10:29:26 | DEBUG | tables
2021-11-10 at 10:29:26 | DEBUG | ===================================================
2021-11-10 at 10:29:26 | DEBUG | items
2021-11-10 at 10:29:26 | DEBUG | offices
2021-11-10 at 10:29:26 | DEBUG | productlines
2021-11-10 at 10:29:26 | DEBUG | tokens
2021-11-10 at 10:29:26 | DEBUG | zinopara
2021-11-10 at 10:29:26 | DEBUG | employees
2021-11-10 at 10:29:26 | DEBUG | products
2021-11-10 at 10:29:26 | DEBUG | customers
2021-11-10 at 10:29:26 | DEBUG | orders
2021-11-10 at 10:29:26 | DEBUG | payments
2021-11-10 at 10:29:26 | DEBUG | orderdetails
2021-11-10 at 10:29:26 | DEBUG | ****************************************************
2021-11-10 at 10:29:26 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:31:44 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:31:44 | INFO | API cache does not exists ....
2021-11-10 at 10:31:49 | INFO | Neptune Start Up ....
2021-11-10 at 10:31:49 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:31:49 | INFO | Add Custom query ...
2021-11-10 at 10:31:49 | INFO | Neptune Starting ....
2021-11-10 at 10:31:49 | INFO | API cache does not exists ....
2021-11-10 at 10:31:53 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:31:53 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:31:53 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:31:53 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:31:53 | ERROR | Exception get metadata at genschema() dump() missing 1 required positional argument: 'fp' 
2021-11-10 at 10:31:53 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:34:10 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:34:10 | INFO | API cache does not exists ....
2021-11-10 at 10:34:24 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:34:25 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:34:25 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:34:25 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:34:25 | ERROR | Exception get metadata at genschema() dump() missing 1 required positional argument: 'fp' 
2021-11-10 at 10:34:25 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:34:25 | INFO | Neptune Start Up ....
2021-11-10 at 10:34:25 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:34:25 | INFO | Add Custom query ...
2021-11-10 at 10:34:25 | INFO | Neptune Starting ....
2021-11-10 at 10:34:25 | INFO | API cache does not exists ....
2021-11-10 at 10:34:34 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:34:34 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:34:34 | INFO | API cache does not exists ....
2021-11-10 at 10:34:34 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:34:34 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:34:34 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:34:35 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:34:35 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 10:34:35 | DEBUG | ****************************************************
2021-11-10 at 10:34:35 | DEBUG | __class__
2021-11-10 at 10:34:35 | DEBUG | __class_getitem__
2021-11-10 at 10:34:35 | DEBUG | __contains__
2021-11-10 at 10:34:35 | DEBUG | __delattr__
2021-11-10 at 10:34:35 | DEBUG | __dict__
2021-11-10 at 10:34:35 | DEBUG | __dir__
2021-11-10 at 10:34:35 | DEBUG | __doc__
2021-11-10 at 10:34:35 | DEBUG | __eq__
2021-11-10 at 10:34:35 | DEBUG | __format__
2021-11-10 at 10:34:35 | DEBUG | __ge__
2021-11-10 at 10:34:35 | DEBUG | __getattribute__
2021-11-10 at 10:34:35 | DEBUG | __getstate__
2021-11-10 at 10:34:35 | DEBUG | __gt__
2021-11-10 at 10:34:35 | DEBUG | __hash__
2021-11-10 at 10:34:35 | DEBUG | __init__
2021-11-10 at 10:34:35 | DEBUG | __init_subclass__
2021-11-10 at 10:34:35 | DEBUG | __le__
2021-11-10 at 10:34:35 | DEBUG | __lt__
2021-11-10 at 10:34:35 | DEBUG | __module__
2021-11-10 at 10:34:35 | DEBUG | __ne__
2021-11-10 at 10:34:35 | DEBUG | __new__
2021-11-10 at 10:34:35 | DEBUG | __reduce__
2021-11-10 at 10:34:35 | DEBUG | __reduce_ex__
2021-11-10 at 10:34:35 | DEBUG | __repr__
2021-11-10 at 10:34:35 | DEBUG | __setattr__
2021-11-10 at 10:34:35 | DEBUG | __setstate__
2021-11-10 at 10:34:35 | DEBUG | __sizeof__
2021-11-10 at 10:34:35 | DEBUG | __str__
2021-11-10 at 10:34:35 | DEBUG | __subclasshook__
2021-11-10 at 10:34:35 | DEBUG | __visit_name__
2021-11-10 at 10:34:35 | DEBUG | __weakref__
2021-11-10 at 10:34:35 | DEBUG | _add_table
2021-11-10 at 10:34:35 | DEBUG | _bind
2021-11-10 at 10:34:35 | DEBUG | _bind_to
2021-11-10 at 10:34:35 | DEBUG | _compiler_dispatch
2021-11-10 at 10:34:35 | DEBUG | _fk_memos
2021-11-10 at 10:34:35 | DEBUG | _init_items
2021-11-10 at 10:34:35 | DEBUG | _original_compiler_dispatch
2021-11-10 at 10:34:35 | DEBUG | _remove_table
2021-11-10 at 10:34:35 | DEBUG | _schema_item_copy
2021-11-10 at 10:34:35 | DEBUG | _schemas
2021-11-10 at 10:34:35 | DEBUG | _sequences
2021-11-10 at 10:34:35 | DEBUG | _set_parent
2021-11-10 at 10:34:35 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 10:34:35 | DEBUG | _use_schema_map
2021-11-10 at 10:34:35 | DEBUG | bind
2021-11-10 at 10:34:35 | DEBUG | clear
2021-11-10 at 10:34:35 | DEBUG | create_all
2021-11-10 at 10:34:35 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 10:34:35 | DEBUG | dispatch
2021-11-10 at 10:34:35 | DEBUG | drop_all
2021-11-10 at 10:34:35 | DEBUG | get_children
2021-11-10 at 10:34:35 | DEBUG | info
2021-11-10 at 10:34:35 | DEBUG | is_bound
2021-11-10 at 10:34:35 | DEBUG | naming_convention
2021-11-10 at 10:34:35 | DEBUG | reflect
2021-11-10 at 10:34:35 | DEBUG | remove
2021-11-10 at 10:34:35 | DEBUG | schema
2021-11-10 at 10:34:35 | DEBUG | sorted_tables
2021-11-10 at 10:34:35 | DEBUG | tables
2021-11-10 at 10:34:35 | DEBUG | ===================================================
2021-11-10 at 10:34:35 | DEBUG | items
2021-11-10 at 10:34:35 | DEBUG | offices
2021-11-10 at 10:34:35 | DEBUG | productlines
2021-11-10 at 10:34:35 | DEBUG | tokens
2021-11-10 at 10:34:35 | DEBUG | zinopara
2021-11-10 at 10:34:35 | DEBUG | employees
2021-11-10 at 10:34:35 | DEBUG | products
2021-11-10 at 10:34:35 | DEBUG | customers
2021-11-10 at 10:34:35 | DEBUG | orders
2021-11-10 at 10:34:35 | DEBUG | payments
2021-11-10 at 10:34:35 | DEBUG | orderdetails
2021-11-10 at 10:34:35 | DEBUG | ****************************************************
2021-11-10 at 10:34:35 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:34:39 | INFO | Neptune Start Up ....
2021-11-10 at 10:34:39 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:34:39 | INFO | Add Custom query ...
2021-11-10 at 10:34:39 | INFO | Neptune Starting ....
2021-11-10 at 10:34:39 | INFO | API cache does not exists ....
2021-11-10 at 10:35:42 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:35:42 | INFO | API cache does not exists ....
2021-11-10 at 10:35:46 | INFO | Neptune Start Up ....
2021-11-10 at 10:35:46 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:35:46 | INFO | Add Custom query ...
2021-11-10 at 10:35:46 | INFO | Neptune Starting ....
2021-11-10 at 10:35:46 | INFO | API cache does not exists ....
2021-11-10 at 10:35:46 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:35:46 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:35:46 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:35:46 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:35:47 | ERROR | Exception get metadata at genschema() __init__() got an unexpected keyword argument 'separators' 
2021-11-10 at 10:35:47 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:35:47 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 10:35:47 | DEBUG | ****************************************************
2021-11-10 at 10:35:47 | DEBUG | __class__
2021-11-10 at 10:35:47 | DEBUG | __class_getitem__
2021-11-10 at 10:35:47 | DEBUG | __contains__
2021-11-10 at 10:35:47 | DEBUG | __delattr__
2021-11-10 at 10:35:47 | DEBUG | __dict__
2021-11-10 at 10:35:47 | DEBUG | __dir__
2021-11-10 at 10:35:47 | DEBUG | __doc__
2021-11-10 at 10:35:47 | DEBUG | __eq__
2021-11-10 at 10:35:47 | DEBUG | __format__
2021-11-10 at 10:35:47 | DEBUG | __ge__
2021-11-10 at 10:35:47 | DEBUG | __getattribute__
2021-11-10 at 10:35:47 | DEBUG | __getstate__
2021-11-10 at 10:35:47 | DEBUG | __gt__
2021-11-10 at 10:35:47 | DEBUG | __hash__
2021-11-10 at 10:35:47 | DEBUG | __init__
2021-11-10 at 10:35:47 | DEBUG | __init_subclass__
2021-11-10 at 10:35:47 | DEBUG | __le__
2021-11-10 at 10:35:47 | DEBUG | __lt__
2021-11-10 at 10:35:47 | DEBUG | __module__
2021-11-10 at 10:35:47 | DEBUG | __ne__
2021-11-10 at 10:35:47 | DEBUG | __new__
2021-11-10 at 10:35:47 | DEBUG | __reduce__
2021-11-10 at 10:35:47 | DEBUG | __reduce_ex__
2021-11-10 at 10:35:47 | DEBUG | __repr__
2021-11-10 at 10:35:47 | DEBUG | __setattr__
2021-11-10 at 10:35:47 | DEBUG | __setstate__
2021-11-10 at 10:35:47 | DEBUG | __sizeof__
2021-11-10 at 10:35:47 | DEBUG | __str__
2021-11-10 at 10:35:47 | DEBUG | __subclasshook__
2021-11-10 at 10:35:47 | DEBUG | __visit_name__
2021-11-10 at 10:35:47 | DEBUG | __weakref__
2021-11-10 at 10:35:47 | DEBUG | _add_table
2021-11-10 at 10:35:47 | DEBUG | _bind
2021-11-10 at 10:35:47 | DEBUG | _bind_to
2021-11-10 at 10:35:47 | DEBUG | _compiler_dispatch
2021-11-10 at 10:35:47 | DEBUG | _fk_memos
2021-11-10 at 10:35:47 | DEBUG | _init_items
2021-11-10 at 10:35:47 | DEBUG | _original_compiler_dispatch
2021-11-10 at 10:35:47 | DEBUG | _remove_table
2021-11-10 at 10:35:47 | DEBUG | _schema_item_copy
2021-11-10 at 10:35:47 | DEBUG | _schemas
2021-11-10 at 10:35:47 | DEBUG | _sequences
2021-11-10 at 10:35:47 | DEBUG | _set_parent
2021-11-10 at 10:35:47 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 10:35:47 | DEBUG | _use_schema_map
2021-11-10 at 10:35:47 | DEBUG | bind
2021-11-10 at 10:35:47 | DEBUG | clear
2021-11-10 at 10:35:47 | DEBUG | create_all
2021-11-10 at 10:35:47 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 10:35:47 | DEBUG | dispatch
2021-11-10 at 10:35:47 | DEBUG | drop_all
2021-11-10 at 10:35:47 | DEBUG | get_children
2021-11-10 at 10:35:47 | DEBUG | info
2021-11-10 at 10:35:47 | DEBUG | is_bound
2021-11-10 at 10:35:47 | DEBUG | naming_convention
2021-11-10 at 10:35:47 | DEBUG | reflect
2021-11-10 at 10:35:47 | DEBUG | remove
2021-11-10 at 10:35:47 | DEBUG | schema
2021-11-10 at 10:35:47 | DEBUG | sorted_tables
2021-11-10 at 10:35:47 | DEBUG | tables
2021-11-10 at 10:35:47 | DEBUG | ===================================================
2021-11-10 at 10:35:47 | DEBUG | items
2021-11-10 at 10:35:47 | DEBUG | offices
2021-11-10 at 10:35:47 | DEBUG | productlines
2021-11-10 at 10:35:47 | DEBUG | tokens
2021-11-10 at 10:35:47 | DEBUG | zinopara
2021-11-10 at 10:35:47 | DEBUG | employees
2021-11-10 at 10:35:47 | DEBUG | products
2021-11-10 at 10:35:47 | DEBUG | customers
2021-11-10 at 10:35:47 | DEBUG | orders
2021-11-10 at 10:35:47 | DEBUG | payments
2021-11-10 at 10:35:47 | DEBUG | orderdetails
2021-11-10 at 10:35:47 | DEBUG | ****************************************************
2021-11-10 at 10:35:47 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:35:57 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:35:58 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:35:58 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:35:58 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:35:58 | ERROR | Exception get metadata at genschema() __init__() got an unexpected keyword argument 'separators' 
2021-11-10 at 10:35:58 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:37:21 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:37:21 | INFO | API cache does not exists ....
2021-11-10 at 10:37:22 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:37:23 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:37:23 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:37:23 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:37:23 | ERROR | Exception get metadata at genschema() Expecting property name enclosed in double quotes: line 1 column 2 (char 1) 
2021-11-10 at 10:37:23 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:37:24 | INFO | Neptune Start Up ....
2021-11-10 at 10:37:24 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:37:24 | INFO | Add Custom query ...
2021-11-10 at 10:37:24 | INFO | Neptune Starting ....
2021-11-10 at 10:37:24 | INFO | API cache does not exists ....
2021-11-10 at 10:38:25 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:38:25 | INFO | API cache does not exists ....
2021-11-10 at 10:38:29 | INFO | Neptune Start Up ....
2021-11-10 at 10:38:29 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:38:29 | INFO | Add Custom query ...
2021-11-10 at 10:38:29 | INFO | Neptune Starting ....
2021-11-10 at 10:38:29 | INFO | API cache does not exists ....
2021-11-10 at 10:38:31 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:38:31 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:38:31 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:38:31 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:38:32 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:38:32 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 10:38:32 | DEBUG | ****************************************************
2021-11-10 at 10:38:32 | DEBUG | __class__
2021-11-10 at 10:38:32 | DEBUG | __class_getitem__
2021-11-10 at 10:38:32 | DEBUG | __contains__
2021-11-10 at 10:38:32 | DEBUG | __delattr__
2021-11-10 at 10:38:32 | DEBUG | __dict__
2021-11-10 at 10:38:32 | DEBUG | __dir__
2021-11-10 at 10:38:32 | DEBUG | __doc__
2021-11-10 at 10:38:32 | DEBUG | __eq__
2021-11-10 at 10:38:32 | DEBUG | __format__
2021-11-10 at 10:38:32 | DEBUG | __ge__
2021-11-10 at 10:38:32 | DEBUG | __getattribute__
2021-11-10 at 10:38:32 | DEBUG | __getstate__
2021-11-10 at 10:38:32 | DEBUG | __gt__
2021-11-10 at 10:38:32 | DEBUG | __hash__
2021-11-10 at 10:38:32 | DEBUG | __init__
2021-11-10 at 10:38:32 | DEBUG | __init_subclass__
2021-11-10 at 10:38:32 | DEBUG | __le__
2021-11-10 at 10:38:32 | DEBUG | __lt__
2021-11-10 at 10:38:32 | DEBUG | __module__
2021-11-10 at 10:38:32 | DEBUG | __ne__
2021-11-10 at 10:38:32 | DEBUG | __new__
2021-11-10 at 10:38:32 | DEBUG | __reduce__
2021-11-10 at 10:38:32 | DEBUG | __reduce_ex__
2021-11-10 at 10:38:32 | DEBUG | __repr__
2021-11-10 at 10:38:32 | DEBUG | __setattr__
2021-11-10 at 10:38:32 | DEBUG | __setstate__
2021-11-10 at 10:38:32 | DEBUG | __sizeof__
2021-11-10 at 10:38:32 | DEBUG | __str__
2021-11-10 at 10:38:32 | DEBUG | __subclasshook__
2021-11-10 at 10:38:32 | DEBUG | __visit_name__
2021-11-10 at 10:38:32 | DEBUG | __weakref__
2021-11-10 at 10:38:32 | DEBUG | _add_table
2021-11-10 at 10:38:32 | DEBUG | _bind
2021-11-10 at 10:38:32 | DEBUG | _bind_to
2021-11-10 at 10:38:32 | DEBUG | _compiler_dispatch
2021-11-10 at 10:38:32 | DEBUG | _fk_memos
2021-11-10 at 10:38:32 | DEBUG | _init_items
2021-11-10 at 10:38:32 | DEBUG | _original_compiler_dispatch
2021-11-10 at 10:38:32 | DEBUG | _remove_table
2021-11-10 at 10:38:32 | DEBUG | _schema_item_copy
2021-11-10 at 10:38:32 | DEBUG | _schemas
2021-11-10 at 10:38:32 | DEBUG | _sequences
2021-11-10 at 10:38:32 | DEBUG | _set_parent
2021-11-10 at 10:38:32 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 10:38:32 | DEBUG | _use_schema_map
2021-11-10 at 10:38:32 | DEBUG | bind
2021-11-10 at 10:38:32 | DEBUG | clear
2021-11-10 at 10:38:32 | DEBUG | create_all
2021-11-10 at 10:38:32 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 10:38:32 | DEBUG | dispatch
2021-11-10 at 10:38:32 | DEBUG | drop_all
2021-11-10 at 10:38:32 | DEBUG | get_children
2021-11-10 at 10:38:32 | DEBUG | info
2021-11-10 at 10:38:32 | DEBUG | is_bound
2021-11-10 at 10:38:32 | DEBUG | naming_convention
2021-11-10 at 10:38:32 | DEBUG | reflect
2021-11-10 at 10:38:32 | DEBUG | remove
2021-11-10 at 10:38:32 | DEBUG | schema
2021-11-10 at 10:38:32 | DEBUG | sorted_tables
2021-11-10 at 10:38:32 | DEBUG | tables
2021-11-10 at 10:38:32 | DEBUG | ===================================================
2021-11-10 at 10:38:32 | DEBUG | items
2021-11-10 at 10:38:32 | DEBUG | offices
2021-11-10 at 10:38:32 | DEBUG | productlines
2021-11-10 at 10:38:32 | DEBUG | tokens
2021-11-10 at 10:38:32 | DEBUG | zinopara
2021-11-10 at 10:38:32 | DEBUG | employees
2021-11-10 at 10:38:32 | DEBUG | products
2021-11-10 at 10:38:32 | DEBUG | customers
2021-11-10 at 10:38:32 | DEBUG | orders
2021-11-10 at 10:38:32 | DEBUG | payments
2021-11-10 at 10:38:32 | DEBUG | orderdetails
2021-11-10 at 10:38:32 | DEBUG | ****************************************************
2021-11-10 at 10:38:32 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:43:50 | INFO | Neptune Shutting Down ....
2021-11-10 at 10:43:50 | INFO | API cache does not exists ....
2021-11-10 at 10:43:50 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 10:43:51 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 10:43:51 | DEBUG | Generate Schema file from database ...
2021-11-10 at 10:43:51 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 10:43:51 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:43:51 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 10:43:51 | DEBUG | ****************************************************
2021-11-10 at 10:43:51 | DEBUG | __class__
2021-11-10 at 10:43:51 | DEBUG | __class_getitem__
2021-11-10 at 10:43:51 | DEBUG | __contains__
2021-11-10 at 10:43:51 | DEBUG | __delattr__
2021-11-10 at 10:43:51 | DEBUG | __dict__
2021-11-10 at 10:43:51 | DEBUG | __dir__
2021-11-10 at 10:43:51 | DEBUG | __doc__
2021-11-10 at 10:43:51 | DEBUG | __eq__
2021-11-10 at 10:43:51 | DEBUG | __format__
2021-11-10 at 10:43:51 | DEBUG | __ge__
2021-11-10 at 10:43:51 | DEBUG | __getattribute__
2021-11-10 at 10:43:51 | DEBUG | __getstate__
2021-11-10 at 10:43:51 | DEBUG | __gt__
2021-11-10 at 10:43:51 | DEBUG | __hash__
2021-11-10 at 10:43:51 | DEBUG | __init__
2021-11-10 at 10:43:51 | DEBUG | __init_subclass__
2021-11-10 at 10:43:51 | DEBUG | __le__
2021-11-10 at 10:43:51 | DEBUG | __lt__
2021-11-10 at 10:43:51 | DEBUG | __module__
2021-11-10 at 10:43:51 | DEBUG | __ne__
2021-11-10 at 10:43:51 | DEBUG | __new__
2021-11-10 at 10:43:51 | DEBUG | __reduce__
2021-11-10 at 10:43:51 | DEBUG | __reduce_ex__
2021-11-10 at 10:43:51 | DEBUG | __repr__
2021-11-10 at 10:43:51 | DEBUG | __setattr__
2021-11-10 at 10:43:51 | DEBUG | __setstate__
2021-11-10 at 10:43:51 | DEBUG | __sizeof__
2021-11-10 at 10:43:51 | DEBUG | __str__
2021-11-10 at 10:43:51 | DEBUG | __subclasshook__
2021-11-10 at 10:43:51 | DEBUG | __visit_name__
2021-11-10 at 10:43:51 | DEBUG | __weakref__
2021-11-10 at 10:43:51 | DEBUG | _add_table
2021-11-10 at 10:43:51 | DEBUG | _bind
2021-11-10 at 10:43:51 | DEBUG | _bind_to
2021-11-10 at 10:43:51 | DEBUG | _compiler_dispatch
2021-11-10 at 10:43:51 | DEBUG | _fk_memos
2021-11-10 at 10:43:51 | DEBUG | _init_items
2021-11-10 at 10:43:51 | DEBUG | _original_compiler_dispatch
2021-11-10 at 10:43:51 | DEBUG | _remove_table
2021-11-10 at 10:43:51 | DEBUG | _schema_item_copy
2021-11-10 at 10:43:51 | DEBUG | _schemas
2021-11-10 at 10:43:51 | DEBUG | _sequences
2021-11-10 at 10:43:51 | DEBUG | _set_parent
2021-11-10 at 10:43:51 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 10:43:51 | DEBUG | _use_schema_map
2021-11-10 at 10:43:51 | DEBUG | bind
2021-11-10 at 10:43:51 | DEBUG | clear
2021-11-10 at 10:43:51 | DEBUG | create_all
2021-11-10 at 10:43:51 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 10:43:51 | DEBUG | dispatch
2021-11-10 at 10:43:51 | DEBUG | drop_all
2021-11-10 at 10:43:51 | DEBUG | get_children
2021-11-10 at 10:43:51 | DEBUG | info
2021-11-10 at 10:43:51 | DEBUG | is_bound
2021-11-10 at 10:43:51 | DEBUG | naming_convention
2021-11-10 at 10:43:51 | DEBUG | reflect
2021-11-10 at 10:43:51 | DEBUG | remove
2021-11-10 at 10:43:51 | DEBUG | schema
2021-11-10 at 10:43:51 | DEBUG | sorted_tables
2021-11-10 at 10:43:51 | DEBUG | tables
2021-11-10 at 10:43:51 | DEBUG | ===================================================
2021-11-10 at 10:43:51 | DEBUG | items
2021-11-10 at 10:43:51 | DEBUG | offices
2021-11-10 at 10:43:51 | DEBUG | productlines
2021-11-10 at 10:43:51 | DEBUG | tokens
2021-11-10 at 10:43:51 | DEBUG | zinopara
2021-11-10 at 10:43:51 | DEBUG | employees
2021-11-10 at 10:43:51 | DEBUG | products
2021-11-10 at 10:43:51 | DEBUG | customers
2021-11-10 at 10:43:51 | DEBUG | orders
2021-11-10 at 10:43:51 | DEBUG | payments
2021-11-10 at 10:43:51 | DEBUG | orderdetails
2021-11-10 at 10:43:51 | DEBUG | ****************************************************
2021-11-10 at 10:43:51 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 10:43:54 | INFO | Neptune Start Up ....
2021-11-10 at 10:43:54 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 10:43:54 | INFO | Add Custom query ...
2021-11-10 at 10:43:54 | INFO | Neptune Starting ....
2021-11-10 at 10:43:54 | INFO | API cache does not exists ....
2021-11-10 at 11:53:38 | INFO | Neptune Shutting Down ....
2021-11-10 at 11:53:38 | INFO | API cache does not exists ....
2021-11-10 at 11:53:38 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 11:53:39 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 11:53:39 | DEBUG | Generate Schema file from database ...
2021-11-10 at 11:53:39 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 11:53:39 | DEBUG | customers
2021-11-10 at 11:53:39 | DEBUG | employees
2021-11-10 at 11:53:39 | DEBUG | items
2021-11-10 at 11:53:39 | DEBUG | offices
2021-11-10 at 11:53:39 | DEBUG | orderdetails
2021-11-10 at 11:53:39 | DEBUG | orders
2021-11-10 at 11:53:39 | DEBUG | payments
2021-11-10 at 11:53:39 | DEBUG | productlines
2021-11-10 at 11:53:39 | DEBUG | products
2021-11-10 at 11:53:39 | DEBUG | tokens
2021-11-10 at 11:53:39 | DEBUG | zinopara
2021-11-10 at 11:53:39 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 11:53:39 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 11:53:39 | DEBUG | ****************************************************
2021-11-10 at 11:53:39 | DEBUG | __class__
2021-11-10 at 11:53:39 | DEBUG | __class_getitem__
2021-11-10 at 11:53:39 | DEBUG | __contains__
2021-11-10 at 11:53:39 | DEBUG | __delattr__
2021-11-10 at 11:53:39 | DEBUG | __dict__
2021-11-10 at 11:53:39 | DEBUG | __dir__
2021-11-10 at 11:53:39 | DEBUG | __doc__
2021-11-10 at 11:53:39 | DEBUG | __eq__
2021-11-10 at 11:53:39 | DEBUG | __format__
2021-11-10 at 11:53:39 | DEBUG | __ge__
2021-11-10 at 11:53:39 | DEBUG | __getattribute__
2021-11-10 at 11:53:39 | DEBUG | __getstate__
2021-11-10 at 11:53:39 | DEBUG | __gt__
2021-11-10 at 11:53:39 | DEBUG | __hash__
2021-11-10 at 11:53:39 | DEBUG | __init__
2021-11-10 at 11:53:39 | DEBUG | __init_subclass__
2021-11-10 at 11:53:39 | DEBUG | __le__
2021-11-10 at 11:53:39 | DEBUG | __lt__
2021-11-10 at 11:53:39 | DEBUG | __module__
2021-11-10 at 11:53:39 | DEBUG | __ne__
2021-11-10 at 11:53:39 | DEBUG | __new__
2021-11-10 at 11:53:39 | DEBUG | __reduce__
2021-11-10 at 11:53:39 | DEBUG | __reduce_ex__
2021-11-10 at 11:53:39 | DEBUG | __repr__
2021-11-10 at 11:53:39 | DEBUG | __setattr__
2021-11-10 at 11:53:39 | DEBUG | __setstate__
2021-11-10 at 11:53:39 | DEBUG | __sizeof__
2021-11-10 at 11:53:39 | DEBUG | __str__
2021-11-10 at 11:53:39 | DEBUG | __subclasshook__
2021-11-10 at 11:53:39 | DEBUG | __visit_name__
2021-11-10 at 11:53:39 | DEBUG | __weakref__
2021-11-10 at 11:53:39 | DEBUG | _add_table
2021-11-10 at 11:53:39 | DEBUG | _bind
2021-11-10 at 11:53:39 | DEBUG | _bind_to
2021-11-10 at 11:53:39 | DEBUG | _compiler_dispatch
2021-11-10 at 11:53:39 | DEBUG | _fk_memos
2021-11-10 at 11:53:39 | DEBUG | _init_items
2021-11-10 at 11:53:39 | DEBUG | _original_compiler_dispatch
2021-11-10 at 11:53:39 | DEBUG | _remove_table
2021-11-10 at 11:53:39 | DEBUG | _schema_item_copy
2021-11-10 at 11:53:39 | DEBUG | _schemas
2021-11-10 at 11:53:39 | DEBUG | _sequences
2021-11-10 at 11:53:39 | DEBUG | _set_parent
2021-11-10 at 11:53:39 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 11:53:39 | DEBUG | _use_schema_map
2021-11-10 at 11:53:39 | DEBUG | bind
2021-11-10 at 11:53:39 | DEBUG | clear
2021-11-10 at 11:53:39 | DEBUG | create_all
2021-11-10 at 11:53:39 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 11:53:39 | DEBUG | dispatch
2021-11-10 at 11:53:39 | DEBUG | drop_all
2021-11-10 at 11:53:39 | DEBUG | get_children
2021-11-10 at 11:53:39 | DEBUG | info
2021-11-10 at 11:53:39 | DEBUG | is_bound
2021-11-10 at 11:53:39 | DEBUG | naming_convention
2021-11-10 at 11:53:39 | DEBUG | reflect
2021-11-10 at 11:53:39 | DEBUG | remove
2021-11-10 at 11:53:39 | DEBUG | schema
2021-11-10 at 11:53:39 | DEBUG | sorted_tables
2021-11-10 at 11:53:39 | DEBUG | tables
2021-11-10 at 11:53:39 | DEBUG | ===================================================
2021-11-10 at 11:53:39 | DEBUG | items
2021-11-10 at 11:53:39 | DEBUG | offices
2021-11-10 at 11:53:39 | DEBUG | productlines
2021-11-10 at 11:53:39 | DEBUG | tokens
2021-11-10 at 11:53:39 | DEBUG | zinopara
2021-11-10 at 11:53:39 | DEBUG | employees
2021-11-10 at 11:53:39 | DEBUG | products
2021-11-10 at 11:53:39 | DEBUG | customers
2021-11-10 at 11:53:39 | DEBUG | orders
2021-11-10 at 11:53:39 | DEBUG | payments
2021-11-10 at 11:53:39 | DEBUG | orderdetails
2021-11-10 at 11:53:39 | DEBUG | ****************************************************
2021-11-10 at 11:53:39 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 11:53:41 | INFO | Neptune Start Up ....
2021-11-10 at 11:53:41 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 11:53:41 | INFO | Add Custom query ...
2021-11-10 at 11:53:41 | INFO | Neptune Starting ....
2021-11-10 at 11:53:41 | INFO | API cache does not exists ....
2021-11-10 at 11:54:32 | INFO | Neptune Shutting Down ....
2021-11-10 at 11:54:32 | INFO | API cache does not exists ....
2021-11-10 at 11:54:36 | INFO | Neptune Start Up ....
2021-11-10 at 11:54:36 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 11:54:36 | INFO | Add Custom query ...
2021-11-10 at 11:54:36 | INFO | Neptune Starting ....
2021-11-10 at 11:54:36 | INFO | API cache does not exists ....
2021-11-10 at 11:55:04 | INFO | Neptune Shutting Down ....
2021-11-10 at 11:55:04 | INFO | API cache does not exists ....
2021-11-10 at 11:58:05 | INFO | Neptune Start Up ....
2021-11-10 at 11:58:05 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 11:58:05 | INFO | Add Custom query ...
2021-11-10 at 11:58:05 | INFO | Neptune Starting ....
2021-11-10 at 11:58:05 | INFO | API cache does not exists ....
2021-11-10 at 12:33:39 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 12:33:40 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 12:33:40 | DEBUG | Generate Schema file from database ...
2021-11-10 at 12:33:40 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 12:33:40 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 12:33:40 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 12:35:51 | INFO | Neptune Shutting Down ....
2021-11-10 at 12:35:51 | INFO | API cache does not exists ....
2021-11-10 at 12:35:51 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 12:35:51 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 12:35:51 | DEBUG | Generate Schema file from database ...
2021-11-10 at 12:35:51 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 12:35:52 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 12:35:52 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 12:35:52 | DEBUG | ['customers', 'employees', 'items', 'offices', 'orderdetails', 'orders', 'payments', 'productlines', 'products', 'tokens', 'zinopara']
2021-11-10 at 12:35:54 | INFO | Neptune Start Up ....
2021-11-10 at 12:35:54 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 12:35:54 | INFO | Add Custom query ...
2021-11-10 at 12:35:54 | INFO | Neptune Starting ....
2021-11-10 at 12:35:54 | INFO | API cache does not exists ....
2021-11-10 at 12:36:09 | INFO | Neptune Shutting Down ....
2021-11-10 at 12:36:09 | INFO | API cache does not exists ....
2021-11-10 at 12:36:10 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 12:36:10 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 12:36:10 | DEBUG | Generate Schema file from database ...
2021-11-10 at 12:36:10 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 12:36:10 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 12:36:10 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 12:36:11 | DEBUG | ['customers', 'employees', 'items', 'offices', 'orderdetails', 'orders', 'payments', 'productlines', 'products', 'tokens', 'zinopara']
2021-11-10 at 12:36:11 | INFO | Neptune Start Up ....
2021-11-10 at 12:36:11 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 12:36:11 | INFO | Add Custom query ...
2021-11-10 at 12:36:11 | INFO | Neptune Starting ....
2021-11-10 at 12:36:11 | INFO | API cache does not exists ....
2021-11-10 at 12:36:42 | INFO | Neptune Shutting Down ....
2021-11-10 at 12:36:42 | INFO | API cache does not exists ....
2021-11-10 at 12:36:42 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 12:36:42 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 12:36:42 | DEBUG | Generate Schema file from database ...
2021-11-10 at 12:36:42 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 12:36:43 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 12:36:43 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 12:36:43 | DEBUG | customers
2021-11-10 at 12:36:43 | DEBUG | employees
2021-11-10 at 12:36:43 | DEBUG | items
2021-11-10 at 12:36:43 | DEBUG | offices
2021-11-10 at 12:36:43 | DEBUG | orderdetails
2021-11-10 at 12:36:43 | DEBUG | orders
2021-11-10 at 12:36:43 | DEBUG | payments
2021-11-10 at 12:36:43 | DEBUG | productlines
2021-11-10 at 12:36:43 | DEBUG | products
2021-11-10 at 12:36:43 | DEBUG | tokens
2021-11-10 at 12:36:43 | DEBUG | zinopara
2021-11-10 at 12:36:44 | INFO | Neptune Start Up ....
2021-11-10 at 12:36:44 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 12:36:44 | INFO | Add Custom query ...
2021-11-10 at 12:36:44 | INFO | Neptune Starting ....
2021-11-10 at 12:36:44 | INFO | API cache does not exists ....
2021-11-10 at 12:36:50 | INFO | Neptune Shutting Down ....
2021-11-10 at 12:36:50 | INFO | API cache does not exists ....
2021-11-10 at 12:36:51 | INFO | Neptune Start Up ....
2021-11-10 at 12:36:51 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 12:36:51 | INFO | Add Custom query ...
2021-11-10 at 12:36:51 | INFO | Neptune Starting ....
2021-11-10 at 12:36:51 | INFO | API cache does not exists ....
2021-11-10 at 12:38:39 | INFO | Neptune Shutting Down ....
2021-11-10 at 12:38:39 | INFO | API cache does not exists ....
2021-11-10 at 12:38:39 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 12:38:39 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 12:38:39 | DEBUG | Generate Schema file from database ...
2021-11-10 at 12:38:40 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 12:38:40 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 12:38:40 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 12:38:40 | DEBUG | None
2021-11-10 at 12:38:40 | DEBUG | None
2021-11-10 at 12:38:40 | DEBUG | None
2021-11-10 at 12:38:40 | DEBUG | None
2021-11-10 at 12:38:40 | DEBUG | None
2021-11-10 at 12:38:40 | DEBUG | None
2021-11-10 at 12:38:40 | DEBUG | None
2021-11-10 at 12:38:40 | DEBUG | None
2021-11-10 at 12:38:40 | DEBUG | None
2021-11-10 at 12:38:40 | DEBUG | None
2021-11-10 at 12:38:40 | DEBUG | None
2021-11-10 at 12:38:42 | INFO | Neptune Start Up ....
2021-11-10 at 12:38:42 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 12:38:42 | INFO | Add Custom query ...
2021-11-10 at 12:38:42 | INFO | Neptune Starting ....
2021-11-10 at 12:38:42 | INFO | API cache does not exists ....
2021-11-10 at 12:38:58 | INFO | Neptune Shutting Down ....
2021-11-10 at 12:38:58 | INFO | API cache does not exists ....
2021-11-10 at 12:38:58 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 12:38:58 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 12:38:58 | DEBUG | Generate Schema file from database ...
2021-11-10 at 12:38:59 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 12:38:59 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 12:38:59 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 12:38:59 | DEBUG | mysqlsrc.customers
2021-11-10 at 12:38:59 | DEBUG | None
2021-11-10 at 12:38:59 | DEBUG | mysqlsrc.employees
2021-11-10 at 12:38:59 | DEBUG | None
2021-11-10 at 12:38:59 | DEBUG | mysqlsrc.items
2021-11-10 at 12:38:59 | DEBUG | None
2021-11-10 at 12:38:59 | DEBUG | mysqlsrc.offices
2021-11-10 at 12:38:59 | DEBUG | None
2021-11-10 at 12:38:59 | DEBUG | mysqlsrc.orderdetails
2021-11-10 at 12:38:59 | DEBUG | None
2021-11-10 at 12:38:59 | DEBUG | mysqlsrc.orders
2021-11-10 at 12:38:59 | DEBUG | None
2021-11-10 at 12:38:59 | DEBUG | mysqlsrc.payments
2021-11-10 at 12:38:59 | DEBUG | None
2021-11-10 at 12:38:59 | DEBUG | mysqlsrc.productlines
2021-11-10 at 12:38:59 | DEBUG | None
2021-11-10 at 12:38:59 | DEBUG | mysqlsrc.products
2021-11-10 at 12:38:59 | DEBUG | None
2021-11-10 at 12:38:59 | DEBUG | mysqlsrc.tokens
2021-11-10 at 12:38:59 | DEBUG | None
2021-11-10 at 12:38:59 | DEBUG | mysqlsrc.zinopara
2021-11-10 at 12:38:59 | DEBUG | None
2021-11-10 at 12:39:00 | INFO | Neptune Start Up ....
2021-11-10 at 12:39:00 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 12:39:00 | INFO | Add Custom query ...
2021-11-10 at 12:39:00 | INFO | Neptune Starting ....
2021-11-10 at 12:39:00 | INFO | API cache does not exists ....
2021-11-10 at 12:40:01 | INFO | Neptune Shutting Down ....
2021-11-10 at 12:40:01 | INFO | API cache does not exists ....
2021-11-10 at 12:40:02 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 12:40:02 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 12:40:02 | DEBUG | Generate Schema file from database ...
2021-11-10 at 12:40:02 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 12:40:02 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 12:40:02 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 12:40:02 | DEBUG | mysqlsrc.customers
2021-11-10 at 12:40:02 | DEBUG | mysqlsrc.employees
2021-11-10 at 12:40:02 | DEBUG | mysqlsrc.items
2021-11-10 at 12:40:02 | DEBUG | mysqlsrc.offices
2021-11-10 at 12:40:03 | DEBUG | mysqlsrc.orderdetails
2021-11-10 at 12:40:03 | DEBUG | mysqlsrc.orders
2021-11-10 at 12:40:03 | INFO | Neptune Start Up ....
2021-11-10 at 12:40:03 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 12:40:03 | DEBUG | mysqlsrc.payments
2021-11-10 at 12:40:03 | INFO | Add Custom query ...
2021-11-10 at 12:40:03 | DEBUG | mysqlsrc.productlines
2021-11-10 at 12:40:03 | INFO | Neptune Starting ....
2021-11-10 at 12:40:03 | INFO | API cache does not exists ....
2021-11-10 at 12:40:03 | DEBUG | mysqlsrc.products
2021-11-10 at 12:40:03 | DEBUG | mysqlsrc.tokens
2021-11-10 at 12:40:03 | DEBUG | mysqlsrc.zinopara
2021-11-10 at 12:40:14 | INFO | Neptune Shutting Down ....
2021-11-10 at 12:40:14 | INFO | API cache does not exists ....
2021-11-10 at 12:40:14 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 12:40:14 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 12:40:14 | DEBUG | Generate Schema file from database ...
2021-11-10 at 12:40:14 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 12:40:14 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 12:40:14 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 12:40:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbb70c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbb59f0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>)), Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fef3680>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbd1590>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbc8e20>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbc8eb0>}, 'description': 'customers'}
2021-11-10 at 12:40:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbb7d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbbf1d0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff09680>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff09310>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbd1360>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbc8ac0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbc8b50>}, 'description': 'employees'}
2021-11-10 at 12:40:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbccac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbd16d0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbd1770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbd7280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbd72e0>}, 'description': 'items'}
2021-11-10 at 12:40:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbc14c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbbf5e0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbbf9f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbc8400>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbc8490>}, 'description': 'offices'}
2021-11-10 at 12:40:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbcce40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbd1860>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff1b360>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff1b450>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbe3680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbec8e0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbec970>}, 'description': 'orderdetails'}
2021-11-10 at 12:40:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbdb0c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbd19f0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False)), Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff1b720>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbd1c20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbd7eb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbd7f40>}, 'description': 'orders'}
2021-11-10 at 12:40:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbef6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbe3810>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff1b9a0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbe39a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbf8070>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbf80d0>}, 'description': 'payments'}
2021-11-10 at 12:40:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbe4240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbe3220>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbe3310>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbdfbb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbdfc10>}, 'description': 'productlines'}
2021-11-10 at 12:40:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbdbd40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbd1e00>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ff1ddc0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线')), Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff1bc70>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ff1ddc0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ff1ddc0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbe34f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbec340>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbec3d0>}, 'description': 'products'}
2021-11-10 at 12:40:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbefd40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbe3a40>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbe3a90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbf8340>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbf83a0>}}
2021-11-10 at 12:40:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbfc040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbe3bd0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbe3e50>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbf8910>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbf8970>}, 'description': 'zinopara'}
2021-11-10 at 12:40:16 | INFO | Neptune Start Up ....
2021-11-10 at 12:40:16 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 12:40:16 | INFO | Add Custom query ...
2021-11-10 at 12:40:16 | INFO | Neptune Starting ....
2021-11-10 at 12:40:16 | INFO | API cache does not exists ....
2021-11-10 at 12:43:40 | INFO | Neptune Shutting Down ....
2021-11-10 at 12:43:40 | INFO | API cache does not exists ....
2021-11-10 at 12:43:41 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 12:43:41 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 12:43:41 | DEBUG | Generate Schema file from database ...
2021-11-10 at 12:43:41 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 12:43:41 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 12:43:41 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 12:43:42 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c92e0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c92aae0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>)), Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c936040>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c946680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c940e20>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c940eb0>}, 'description': 'customers'}
2021-11-10 at 12:43:42 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c92ed40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c9362c0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cc79770>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cc79400>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c946450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c940ac0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c940b50>}, 'description': 'employees'}
2021-11-10 at 12:43:42 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c943ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c9467c0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c946860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c94e280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c94e2e0>}, 'description': 'items'}
2021-11-10 at 12:43:42 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c9384c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c9366d0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c936ae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c940400>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c940490>}, 'description': 'offices'}
2021-11-10 at 12:43:42 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c943e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c946950>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cc91450>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cc91540>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c95a770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c9638e0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c963970>}, 'description': 'orderdetails'}
2021-11-10 at 12:43:42 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c9520c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c946ae0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False)), Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cc91810>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c946d10>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c94eeb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c94ef40>}, 'description': 'orders'}
2021-11-10 at 12:43:42 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c9666c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c95a900>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cc91a90>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c95aa90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c96f070>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c96f0d0>}, 'description': 'payments'}
2021-11-10 at 12:43:42 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c95b240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c95a310>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c95a400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c956bb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c956c10>}, 'description': 'productlines'}
2021-11-10 at 12:43:42 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c952d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c946ef0>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10cc94fa0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线')), Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cc91d60>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10cc94fa0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10cc94fa0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c95a5e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c963340>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c9633d0>}, 'description': 'products'}
2021-11-10 at 12:43:42 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c966d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c95ab30>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c95ab80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c96f340>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c96f3a0>}}
2021-11-10 at 12:43:42 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c972040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c95acc0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c95af40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c96f910>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c96f970>}, 'description': 'zinopara'}
2021-11-10 at 12:43:43 | INFO | Neptune Start Up ....
2021-11-10 at 12:43:43 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 12:43:43 | INFO | Add Custom query ...
2021-11-10 at 12:43:43 | INFO | Neptune Starting ....
2021-11-10 at 12:43:43 | INFO | API cache does not exists ....
2021-11-10 at 12:56:43 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 12:56:44 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 12:56:44 | DEBUG | Generate Schema file from database ...
2021-11-10 at 12:56:44 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 12:56:44 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 12:56:44 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 12:56:44 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbcf0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbccb30>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>)), Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff1c040>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbe7680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbe1e20>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbe1eb0>}, 'description': 'customers'}
2021-11-10 at 12:56:44 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbcfd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbd72c0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff1c720>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10daba7c0>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbe7450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbe1ac0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbe1b50>}, 'description': 'employees'}
2021-11-10 at 12:56:44 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbe4ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbe77c0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbe7860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbef280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbef2e0>}, 'description': 'items'}
2021-11-10 at 12:56:44 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbd94c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbd76d0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbd7ae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbe1400>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbe1490>}, 'description': 'offices'}
2021-11-10 at 12:56:44 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbe4e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbe7950>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff34400>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff344f0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbfb770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fc058e0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fc05970>}, 'description': 'orderdetails'}
2021-11-10 at 12:56:44 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbf30c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbe7ae0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False)), Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff347c0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbe7d10>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbefeb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbeff40>}, 'description': 'orders'}
2021-11-10 at 12:56:44 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fc076c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfb900>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff34a40>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbfba90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fc10070>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fc100d0>}, 'description': 'payments'}
2021-11-10 at 12:56:44 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbfd240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfb310>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbfb400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbf8bb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbf8c10>}, 'description': 'productlines'}
2021-11-10 at 12:56:44 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbf3d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbe7ef0>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ff36fa0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线')), Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff34d10>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ff36fa0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ff36fa0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbfb5e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fc05340>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fc053d0>}, 'description': 'products'}
2021-11-10 at 12:56:44 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fc07d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfbb30>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbfbb80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fc10340>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fc103a0>}}
2021-11-10 at 12:56:45 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fc13040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfbcc0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbfbf40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fc10910>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fc10970>}, 'description': 'zinopara'}
2021-11-10 at 12:56:45 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ff4dc40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff48b80>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ff55090>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ff465e0>, 'dialect_options': {}}
2021-11-10 at 12:57:08 | INFO | Neptune Shutting Down ....
2021-11-10 at 12:57:08 | INFO | API cache does not exists ....
2021-11-10 at 12:57:09 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 12:57:10 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 12:57:10 | DEBUG | Generate Schema file from database ...
2021-11-10 at 12:57:10 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 12:57:10 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 12:57:10 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 12:57:10 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10d5e10c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d5dfa90>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>)), Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d922ef0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10d5fb630>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10d5f2e20>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10d5f2eb0>}, 'description': 'customers'}
2021-11-10 at 12:57:10 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10d5e1d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d5e9270>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d936680>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d8d4f90>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10d5fb400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10d5f2ac0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10d5f2b50>}, 'description': 'employees'}
2021-11-10 at 12:57:10 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10d5f6ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d5fb770>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10d5fb810>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10d601280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10d6012e0>}, 'description': 'items'}
2021-11-10 at 12:57:10 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10d5eb4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d5e9680>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10d5e9a90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10d5f2400>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10d5f2490>}, 'description': 'offices'}
2021-11-10 at 12:57:10 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10d5f6e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d5fb900>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d945360>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d945450>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10d60d720>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10d6168e0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10d616970>}, 'description': 'orderdetails'}
2021-11-10 at 12:57:10 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10d6050c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d5fba90>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False)), Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d945720>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10d5fbcc0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10d601eb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10d601f40>}, 'description': 'orders'}
2021-11-10 at 12:57:10 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10d6196c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d60d8b0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d9459a0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10d60da40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10d622070>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10d6220d0>}, 'description': 'payments'}
2021-11-10 at 12:57:10 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10d60e240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d60d2c0>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10d60d3b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10d609bb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10d609c10>}, 'description': 'productlines'}
2021-11-10 at 12:57:10 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10d605d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d5fbea0>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10d948fa0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线')), Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d945c70>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10d948fa0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10d948fa0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10d60d590>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10d616340>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10d6163d0>}, 'description': 'products'}
2021-11-10 at 12:57:10 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10d619d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d60dae0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10d60db30>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10d622340>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10d6223a0>}}
2021-11-10 at 12:57:10 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10d625040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d60dc70>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10d60def0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10d622910>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10d622970>}, 'description': 'zinopara'}
2021-11-10 at 12:57:11 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10d95fc40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d959ae0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10d967090>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10d9575e0>, 'dialect_options': {}}
2021-11-10 at 12:57:11 | INFO | Neptune Start Up ....
2021-11-10 at 12:57:11 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 12:57:11 | INFO | Add Custom query ...
2021-11-10 at 12:57:11 | INFO | Neptune Starting ....
2021-11-10 at 12:57:11 | INFO | API cache does not exists ....
2021-11-10 at 12:59:59 | INFO | Neptune Shutting Down ....
2021-11-10 at 12:59:59 | INFO | API cache does not exists ....
2021-11-10 at 13:00:01 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 13:00:01 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 13:00:01 | DEBUG | Generate Schema file from database ...
2021-11-10 at 13:00:01 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 13:00:01 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 13:00:01 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 13:00:01 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109be20c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109bdeae0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x109bea220>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x109bfa680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109bf3e20>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x109bf3eb0>}, 'description': 'customers'}
2021-11-10 at 13:00:01 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109be2d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109bea2c0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x109bfa040>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x109bea680>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x109bfa450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109bf3ac0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x109bf3b50>}, 'description': 'employees'}
2021-11-10 at 13:00:01 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109bf7ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109bfa7c0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x109bfa860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109c02280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x109c022e0>}, 'description': 'items'}
2021-11-10 at 13:00:01 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109bec4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109bea6d0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x109beaae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109bf3400>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x109bf3490>}, 'description': 'offices'}
2021-11-10 at 13:00:01 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109bf7e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109bfa950>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x109bfaea0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x109bfaa90>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x109c0e770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109c188e0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x109c18970>}, 'description': 'orderdetails'}
2021-11-10 at 13:00:01 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109c060c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109bfaae0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x109bfab30>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x109bfad10>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109c02eb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x109c02f40>}, 'description': 'orders'}
2021-11-10 at 13:00:01 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109c1a6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109c0e900>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x109c0e9a0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x109c0ea90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109c23070>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x109c230d0>}, 'description': 'payments'}
2021-11-10 at 13:00:01 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109c10240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109c0e310>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x109c0e400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109c0bbb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x109c0bc10>}, 'description': 'productlines'}
2021-11-10 at 13:00:01 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109c06d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109bfaef0>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x109c0b3a0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x109c0b3a0>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x109c0e2c0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x109c0b3a0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x109c0e5e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109c18340>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x109c183d0>}, 'description': 'products'}
2021-11-10 at 13:00:01 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109c1ad40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109c0eb30>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x109c0eb80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109c23340>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x109c233a0>}}
2021-11-10 at 13:00:01 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109c26040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109c0ecc0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x109c0ef40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109c23910>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x109c23970>}, 'description': 'zinopara'}
2021-11-10 at 13:00:01 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109efe840>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109f217c0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x109f218b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109ee9fa0>, 'dialect_options': {}}
2021-11-10 at 13:00:02 | INFO | Neptune Start Up ....
2021-11-10 at 13:00:02 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:00:02 | INFO | Add Custom query ...
2021-11-10 at 13:00:02 | INFO | Neptune Starting ....
2021-11-10 at 13:00:02 | INFO | API cache does not exists ....
2021-11-10 at 13:00:21 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:00:21 | INFO | API cache does not exists ....
2021-11-10 at 13:00:23 | INFO | Neptune Start Up ....
2021-11-10 at 13:00:23 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:00:23 | INFO | Add Custom query ...
2021-11-10 at 13:00:23 | INFO | Neptune Starting ....
2021-11-10 at 13:00:23 | INFO | API cache does not exists ....
2021-11-10 at 13:00:41 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:00:41 | INFO | API cache does not exists ....
2021-11-10 at 13:00:42 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 13:00:42 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 13:00:42 | DEBUG | Generate Schema file from database ...
2021-11-10 at 13:00:42 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 13:00:43 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 13:00:43 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 13:00:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b9a50c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9a39f0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9ad130>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b9bf590>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b9b6e50>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b9b6ee0>}, 'description': 'customers'}
2021-11-10 at 13:00:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b9a5d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9ad1d0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9ad590>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9adef0>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b9bf360>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b9b6af0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b9b6b80>}, 'description': 'employees'}
2021-11-10 at 13:00:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b9baac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9bf6d0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b9bf770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b9c52b0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b9c5310>}, 'description': 'items'}
2021-11-10 at 13:00:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b9af4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9ad5e0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b9ad9f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b9b6430>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b9b64c0>}, 'description': 'offices'}
2021-11-10 at 13:00:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b9bae40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9bf860>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9bfdb0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9bf9a0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b9d1680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b9da910>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b9da9a0>}, 'description': 'orderdetails'}
2021-11-10 at 13:00:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b9c90c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9bf9f0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9bfa40>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b9bfc20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b9c5ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b9c5f70>}, 'description': 'orders'}
2021-11-10 at 13:00:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b9dd6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9d1810>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9d18b0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b9d19a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b9e60a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b9e6100>}, 'description': 'payments'}
2021-11-10 at 13:00:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b9d3240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9d1220>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b9d1310>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b9cdbe0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b9cdc40>}, 'description': 'productlines'}
2021-11-10 at 13:00:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b9c9d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9bfe00>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10b9cd3d0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10b9cd3d0>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9d11d0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10b9cd3d0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b9d14f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b9da370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b9da400>}, 'description': 'products'}
2021-11-10 at 13:00:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b9ddd40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9d1a40>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b9d1a90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b9e6370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b9e63d0>}}
2021-11-10 at 13:00:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b9e9040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b9d1bd0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b9d1e50>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b9e6940>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b9e69a0>}, 'description': 'zinopara'}
2021-11-10 at 13:00:43 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10bcc2840>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bce77c0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10bce7720>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10bc8b580>, 'dialect_options': {}}
2021-11-10 at 13:00:44 | INFO | Neptune Start Up ....
2021-11-10 at 13:00:44 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:00:44 | INFO | Add Custom query ...
2021-11-10 at 13:00:44 | INFO | Neptune Starting ....
2021-11-10 at 13:00:44 | INFO | API cache does not exists ....
2021-11-10 at 13:30:11 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:30:11 | INFO | API cache does not exists ....
2021-11-10 at 13:30:13 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 13:30:13 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 13:30:13 | DEBUG | Generate Schema file from database ...
2021-11-10 at 13:30:13 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 13:30:13 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 13:30:13 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 13:30:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10a3c70c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3c4b30>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3cf270>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10a3df6d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10a3d8e50>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10a3d8ee0>}, 'description': 'customers'}
2021-11-10 at 13:30:13 | DEBUG | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-10 at 13:30:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10a3c7d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3cf310>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3cf6d0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3df090>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10a3df4a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10a3d8af0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10a3d8b80>}, 'description': 'employees'}
2021-11-10 at 13:30:13 | DEBUG | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-10 at 13:30:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10a3dcac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3df810>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10a3df8b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10a3e72b0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10a3e7310>}, 'description': 'items'}
2021-11-10 at 13:30:13 | DEBUG | DedupeColumnCollection(items.id, items.item_no)
2021-11-10 at 13:30:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10a3d14c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3cf720>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10a3cfb30>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10a3d8430>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10a3d84c0>}, 'description': 'offices'}
2021-11-10 at 13:30:13 | DEBUG | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-10 at 13:30:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10a3dce40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3df9a0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3dfef0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3dfae0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10a3f37c0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10a3fc910>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10a3fc9a0>}, 'description': 'orderdetails'}
2021-11-10 at 13:30:13 | DEBUG | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-10 at 13:30:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10a3eb0c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3dfb30>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3dfb80>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10a3dfd60>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10a3e7ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10a3e7f70>}, 'description': 'orders'}
2021-11-10 at 13:30:13 | DEBUG | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-10 at 13:30:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10a3ff6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3f3950>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3f39f0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10a3f3ae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10a4080a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10a408100>}, 'description': 'payments'}
2021-11-10 at 13:30:13 | DEBUG | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-10 at 13:30:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10a3f4240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3f3360>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10a3f3450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10a3efbe0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10a3efc40>}, 'description': 'productlines'}
2021-11-10 at 13:30:13 | DEBUG | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-10 at 13:30:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10a3ebd40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3dff40>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10a3ef3d0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10a3ef3d0>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3f3310>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10a3ef3d0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10a3f3630>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10a3fc370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10a3fc400>}, 'description': 'products'}
2021-11-10 at 13:30:13 | DEBUG | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-10 at 13:30:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10a3ffd40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3f3b80>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10a3f3bd0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10a408370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10a4083d0>}}
2021-11-10 at 13:30:13 | DEBUG | DedupeColumnCollection(tokens.s)
2021-11-10 at 13:30:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10a40b040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a3f3d10>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10a3f3f90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10a408940>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10a4089a0>}, 'description': 'zinopara'}
2021-11-10 at 13:30:13 | DEBUG | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 13:30:13 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10a6e3840>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a708810>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10a708630>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10a6cee50>, 'dialect_options': {}}
2021-11-10 at 13:30:14 | DEBUG | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 13:30:14 | INFO | Neptune Start Up ....
2021-11-10 at 13:30:14 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:30:14 | INFO | Add Custom query ...
2021-11-10 at 13:30:14 | INFO | Neptune Starting ....
2021-11-10 at 13:30:14 | INFO | API cache does not exists ....
2021-11-10 at 13:30:30 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:30:30 | INFO | API cache does not exists ....
2021-11-10 at 13:30:30 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 13:30:30 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 13:30:30 | DEBUG | Generate Schema file from database ...
2021-11-10 at 13:30:30 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 13:30:30 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 13:30:30 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 13:30:30 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10716c0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10716aa40>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x107174180>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x107186590>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10717de50>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10717dee0>}, 'description': 'customers'}
2021-11-10 at 13:30:30 | DEBUG | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-10 at 13:30:30 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10716cd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1071741d0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x107174590>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x107174ef0>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x107186360>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10717daf0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10717db80>}, 'description': 'employees'}
2021-11-10 at 13:30:30 | DEBUG | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-10 at 13:30:30 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x107181ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1071866d0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x107186770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10718c2b0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10718c310>}, 'description': 'items'}
2021-11-10 at 13:30:30 | DEBUG | DedupeColumnCollection(items.id, items.item_no)
2021-11-10 at 13:30:30 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1071764c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1071745e0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1071749f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10717d430>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10717d4c0>}, 'description': 'offices'}
2021-11-10 at 13:30:30 | DEBUG | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-10 at 13:30:30 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x107181e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x107186860>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x107186db0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1071869a0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x107198680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1071a1910>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1071a19a0>}, 'description': 'orderdetails'}
2021-11-10 at 13:30:30 | DEBUG | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-10 at 13:30:30 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10718f0c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1071869f0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x107186a40>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x107186c20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10718cee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10718cf70>}, 'description': 'orders'}
2021-11-10 at 13:30:30 | DEBUG | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-10 at 13:30:30 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1071a46c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x107198810>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1071988b0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1071989a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1071ac0a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1071ac100>}, 'description': 'payments'}
2021-11-10 at 13:30:30 | DEBUG | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-10 at 13:30:30 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x107199240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x107198220>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x107198310>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x107194be0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x107194c40>}, 'description': 'productlines'}
2021-11-10 at 13:30:30 | DEBUG | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-10 at 13:30:30 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10718fd40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x107186e00>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1071943d0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1071943d0>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1071981d0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1071943d0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1071984f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1071a1370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1071a1400>}, 'description': 'products'}
2021-11-10 at 13:30:30 | DEBUG | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-10 at 13:30:30 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1071a4d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x107198a40>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x107198a90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1071ac370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1071ac3d0>}}
2021-11-10 at 13:30:30 | DEBUG | DedupeColumnCollection(tokens.s)
2021-11-10 at 13:30:30 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1071b0040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x107198bd0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x107198e50>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1071ac940>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1071ac9a0>}, 'description': 'zinopara'}
2021-11-10 at 13:30:30 | DEBUG | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 13:30:30 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1074877c0>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1074ad770>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1074ad680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1071ac4c0>, 'dialect_options': {}}
2021-11-10 at 13:30:30 | SUCCESS | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 13:30:32 | INFO | Neptune Start Up ....
2021-11-10 at 13:30:32 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:30:32 | INFO | Add Custom query ...
2021-11-10 at 13:30:32 | INFO | Neptune Starting ....
2021-11-10 at 13:30:32 | INFO | API cache does not exists ....
2021-11-10 at 13:35:45 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:35:45 | INFO | API cache does not exists ....
2021-11-10 at 13:35:45 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 13:35:46 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 13:35:46 | DEBUG | Generate Schema file from database ...
2021-11-10 at 13:35:46 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 13:35:46 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 13:35:46 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 13:35:46 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1052190c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105217950>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105221090>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1052334f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10522ae50>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10522aee0>}, 'description': 'customers'}
2021-11-10 at 13:35:48 | INFO | Neptune Start Up ....
2021-11-10 at 13:35:48 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:35:48 | INFO | Add Custom query ...
2021-11-10 at 13:35:48 | INFO | Neptune Starting ....
2021-11-10 at 13:35:48 | INFO | API cache does not exists ....
2021-11-10 at 13:35:58 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:35:58 | INFO | API cache does not exists ....
2021-11-10 at 13:35:59 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 13:35:59 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 13:35:59 | DEBUG | Generate Schema file from database ...
2021-11-10 at 13:35:59 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 13:36:00 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 13:36:00 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 13:36:00 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e08c0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e08a9f0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e095130>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e0a6590>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e09de50>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e09dee0>}, 'description': 'customers'}
2021-11-10 at 13:36:00 | ERROR | customers
2021-11-10 at 13:36:00 | INFO | Neptune Start Up ....
2021-11-10 at 13:36:00 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:36:00 | INFO | Add Custom query ...
2021-11-10 at 13:36:00 | INFO | Neptune Starting ....
2021-11-10 at 13:36:00 | INFO | API cache does not exists ....
2021-11-10 at 13:36:11 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:36:11 | INFO | API cache does not exists ....
2021-11-10 at 13:36:12 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 13:36:12 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 13:36:12 | DEBUG | Generate Schema file from database ...
2021-11-10 at 13:36:12 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 13:36:12 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 13:36:12 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 13:36:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x111d240c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d1eb80>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d282c0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x111d3b6d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x111d35e50>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x111d35ee0>}, 'description': 'customers'}
2021-11-10 at 13:36:12 | ERROR | customers
2021-11-10 at 13:36:12 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-10 at 13:36:12 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-10 at 13:36:12 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-10 at 13:36:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x111d24d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d28360>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d28720>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d3b090>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x111d3b4a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x111d35af0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x111d35b80>}, 'description': 'employees'}
2021-11-10 at 13:36:12 | ERROR | employees
2021-11-10 at 13:36:12 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-10 at 13:36:12 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-10 at 13:36:12 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-10 at 13:36:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x111d39ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d3b810>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x111d3b8b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x111d442b0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x111d44310>}, 'description': 'items'}
2021-11-10 at 13:36:12 | ERROR | items
2021-11-10 at 13:36:12 | ERROR | set()
2021-11-10 at 13:36:12 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-10 at 13:36:12 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-10 at 13:36:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x111d2e4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d28770>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x111d28b80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x111d35430>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x111d354c0>}, 'description': 'offices'}
2021-11-10 at 13:36:12 | ERROR | offices
2021-11-10 at 13:36:12 | ERROR | set()
2021-11-10 at 13:36:12 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-10 at 13:36:12 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-10 at 13:36:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x111d39e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d3b9a0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d3bef0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d3bae0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x111d507c0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x111d59910>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x111d599a0>}, 'description': 'orderdetails'}
2021-11-10 at 13:36:12 | ERROR | orderdetails
2021-11-10 at 13:36:12 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-10 at 13:36:12 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-10 at 13:36:12 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-10 at 13:36:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x111d480c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d3bb30>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d3bb80>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x111d3bd60>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x111d44ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x111d44f70>}, 'description': 'orders'}
2021-11-10 at 13:36:12 | ERROR | orders
2021-11-10 at 13:36:12 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-10 at 13:36:12 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-10 at 13:36:12 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-10 at 13:36:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x111d5c6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d50950>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d509f0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x111d50ae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x111d650a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x111d65100>}, 'description': 'payments'}
2021-11-10 at 13:36:12 | ERROR | payments
2021-11-10 at 13:36:12 | ERROR | set()
2021-11-10 at 13:36:12 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-10 at 13:36:12 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-10 at 13:36:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x111d51240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d50360>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x111d50450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x111d4cbe0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x111d4cc40>}, 'description': 'productlines'}
2021-11-10 at 13:36:12 | ERROR | productlines
2021-11-10 at 13:36:12 | ERROR | set()
2021-11-10 at 13:36:12 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-10 at 13:36:12 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-10 at 13:36:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x111d48d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d3bf40>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x111d4c3d0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x111d4c3d0>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d50310>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x111d4c3d0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x111d50630>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x111d59370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x111d59400>}, 'description': 'products'}
2021-11-10 at 13:36:12 | ERROR | products
2021-11-10 at 13:36:12 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-10 at 13:36:12 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x111d4c3d0>, for_update=False), comment='产品代码'))
2021-11-10 at 13:36:12 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-10 at 13:36:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x111d5cd40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d50b80>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x111d50bd0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x111d65370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x111d653d0>}}
2021-11-10 at 13:36:12 | ERROR | tokens
2021-11-10 at 13:36:12 | ERROR | set()
2021-11-10 at 13:36:12 | ERROR | PrimaryKeyConstraint()
2021-11-10 at 13:36:12 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-10 at 13:36:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x111d68040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x111d50d10>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x111d50f90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x111d65940>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x111d659a0>}, 'description': 'zinopara'}
2021-11-10 at 13:36:12 | ERROR | zinopara
2021-11-10 at 13:36:12 | ERROR | set()
2021-11-10 at 13:36:12 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-10 at 13:36:12 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 13:36:12 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x112040840>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x112064950>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x112064860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x112009370>, 'dialect_options': {}}
2021-11-10 at 13:36:12 | SUCCESS | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 13:36:13 | INFO | Neptune Start Up ....
2021-11-10 at 13:36:13 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:36:13 | INFO | Add Custom query ...
2021-11-10 at 13:36:13 | INFO | Neptune Starting ....
2021-11-10 at 13:36:13 | INFO | API cache does not exists ....
2021-11-10 at 13:37:01 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:37:01 | INFO | API cache does not exists ....
2021-11-10 at 13:37:02 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 13:37:02 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 13:37:02 | DEBUG | Generate Schema file from database ...
2021-11-10 at 13:37:02 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 13:37:02 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 13:37:02 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 13:37:02 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10daab0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10daa7ae0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dab3220>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10dac3680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10dabce50>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10dabcee0>}, 'description': 'customers'}
2021-11-10 at 13:37:02 | ERROR | customers
2021-11-10 at 13:37:02 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-10 at 13:37:02 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-10 at 13:37:02 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-10 at 13:37:02 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10daabd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dab32c0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dab3680>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dac3040>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10dac3450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10dabcaf0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10dabcb80>}, 'description': 'employees'}
2021-11-10 at 13:37:02 | ERROR | employees
2021-11-10 at 13:37:02 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-10 at 13:37:02 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-10 at 13:37:02 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-10 at 13:37:02 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10dac0ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dac37c0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10dac3860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10dacb2b0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10dacb310>}, 'description': 'items'}
2021-11-10 at 13:37:02 | ERROR | items
2021-11-10 at 13:37:02 | ERROR | set()
2021-11-10 at 13:37:02 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-10 at 13:37:02 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-10 at 13:37:02 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10dab54c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dab36d0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10dab3ae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10dabc430>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10dabc4c0>}, 'description': 'offices'}
2021-11-10 at 13:37:02 | ERROR | offices
2021-11-10 at 13:37:02 | ERROR | set()
2021-11-10 at 13:37:02 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-10 at 13:37:02 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-10 at 13:37:02 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10dac0e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dac3950>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dac3ea0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dac3a90>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10dad7770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10dae0910>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10dae09a0>}, 'description': 'orderdetails'}
2021-11-10 at 13:37:02 | ERROR | orderdetails
2021-11-10 at 13:37:02 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-10 at 13:37:02 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-10 at 13:37:02 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-10 at 13:37:02 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10dace0c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dac3ae0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dac3b30>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10dac3d10>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10dacbee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10dacbf70>}, 'description': 'orders'}
2021-11-10 at 13:37:02 | ERROR | orders
2021-11-10 at 13:37:02 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-10 at 13:37:02 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-10 at 13:37:02 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-10 at 13:37:02 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10dae36c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dad7900>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dad79a0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10dad7a90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10daec0a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10daec100>}, 'description': 'payments'}
2021-11-10 at 13:37:02 | ERROR | payments
2021-11-10 at 13:37:02 | ERROR | set()
2021-11-10 at 13:37:02 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-10 at 13:37:02 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-10 at 13:37:02 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10dad8240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dad7310>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10dad7400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10dad3be0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10dad3c40>}, 'description': 'productlines'}
2021-11-10 at 13:37:02 | ERROR | productlines
2021-11-10 at 13:37:02 | ERROR | set()
2021-11-10 at 13:37:02 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-10 at 13:37:02 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-10 at 13:37:02 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10daced40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dac3ef0>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10dad33d0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10dad33d0>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dad72c0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10dad33d0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10dad75e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10dae0370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10dae0400>}, 'description': 'products'}
2021-11-10 at 13:37:02 | ERROR | products
2021-11-10 at 13:37:02 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-10 at 13:37:02 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10dad33d0>, for_update=False), comment='产品代码'))
2021-11-10 at 13:37:02 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-10 at 13:37:02 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10dae3d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dad7b30>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10dad7b80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10daec370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10daec3d0>}}
2021-11-10 at 13:37:02 | ERROR | tokens
2021-11-10 at 13:37:02 | ERROR | set()
2021-11-10 at 13:37:02 | ERROR | PrimaryKeyConstraint()
2021-11-10 at 13:37:02 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-10 at 13:37:02 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10daef040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10dad7cc0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10dad7f40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10daec940>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10daec9a0>}, 'description': 'zinopara'}
2021-11-10 at 13:37:02 | ERROR | zinopara
2021-11-10 at 13:37:02 | ERROR | set()
2021-11-10 at 13:37:02 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-10 at 13:37:02 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 13:37:02 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ddc7740>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ddec9a0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ddec860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ddb4d00>, 'dialect_options': {}}
2021-11-10 at 13:37:02 | CRITICAL | order_view
2021-11-10 at 13:37:02 | CRITICAL | set()
2021-11-10 at 13:37:02 | CRITICAL | PrimaryKeyConstraint()
2021-11-10 at 13:37:02 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-10 at 13:37:02 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-10 at 13:37:03 | INFO | Neptune Start Up ....
2021-11-10 at 13:37:03 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:37:03 | INFO | Add Custom query ...
2021-11-10 at 13:37:03 | INFO | Neptune Starting ....
2021-11-10 at 13:37:03 | INFO | API cache does not exists ....
2021-11-10 at 13:37:13 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:37:13 | INFO | API cache does not exists ....
2021-11-10 at 13:37:14 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 13:37:14 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 13:37:14 | DEBUG | Generate Schema file from database ...
2021-11-10 at 13:37:14 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 13:37:15 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 13:37:15 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 13:37:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5bf0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5bd9f0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5c7130>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f5d9590>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f5d0e50>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5d0ee0>}, 'description': 'customers'}
2021-11-10 at 13:37:15 | ERROR | customers
2021-11-10 at 13:37:15 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-10 at 13:37:15 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-10 at 13:37:15 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-10 at 13:37:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5bfd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5c71d0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5c7590>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5c7ef0>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f5d9360>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f5d0af0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5d0b80>}, 'description': 'employees'}
2021-11-10 at 13:37:15 | ERROR | employees
2021-11-10 at 13:37:15 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-10 at 13:37:15 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-10 at 13:37:15 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-10 at 13:37:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5d4ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5d96d0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f5d9770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f5df2b0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5df310>}, 'description': 'items'}
2021-11-10 at 13:37:15 | ERROR | items
2021-11-10 at 13:37:15 | ERROR | set()
2021-11-10 at 13:37:15 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-10 at 13:37:15 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-10 at 13:37:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5c94c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5c75e0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f5c79f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f5d0430>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5d04c0>}, 'description': 'offices'}
2021-11-10 at 13:37:15 | ERROR | offices
2021-11-10 at 13:37:15 | ERROR | set()
2021-11-10 at 13:37:15 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-10 at 13:37:15 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-10 at 13:37:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5d4e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5d9860>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5d9db0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5d99a0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f5eb680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f5f4910>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5f49a0>}, 'description': 'orderdetails'}
2021-11-10 at 13:37:15 | ERROR | orderdetails
2021-11-10 at 13:37:15 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-10 at 13:37:15 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-10 at 13:37:15 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-10 at 13:37:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5e30c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5d99f0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5d9a40>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f5d9c20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f5dfee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5dff70>}, 'description': 'orders'}
2021-11-10 at 13:37:15 | ERROR | orders
2021-11-10 at 13:37:15 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-10 at 13:37:15 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-10 at 13:37:15 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-10 at 13:37:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5f76c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5eb810>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5eb8b0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f5eb9a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f6000a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f600100>}, 'description': 'payments'}
2021-11-10 at 13:37:15 | ERROR | payments
2021-11-10 at 13:37:15 | ERROR | set()
2021-11-10 at 13:37:15 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-10 at 13:37:15 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-10 at 13:37:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5ed240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5eb220>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f5eb310>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f5e7be0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5e7c40>}, 'description': 'productlines'}
2021-11-10 at 13:37:15 | ERROR | productlines
2021-11-10 at 13:37:15 | ERROR | set()
2021-11-10 at 13:37:15 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-10 at 13:37:15 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-10 at 13:37:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5e3d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5d9e00>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f5e73d0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f5e73d0>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5eb1d0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f5e73d0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f5eb4f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f5f4370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5f4400>}, 'description': 'products'}
2021-11-10 at 13:37:15 | ERROR | products
2021-11-10 at 13:37:15 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-10 at 13:37:15 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f5e73d0>, for_update=False), comment='产品代码'))
2021-11-10 at 13:37:15 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-10 at 13:37:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5f7d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5eba40>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f5eba90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f600370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f6003d0>}}
2021-11-10 at 13:37:15 | ERROR | tokens
2021-11-10 at 13:37:15 | ERROR | set()
2021-11-10 at 13:37:15 | ERROR | PrimaryKeyConstraint()
2021-11-10 at 13:37:15 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-10 at 13:37:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f603040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5ebbd0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f5ebe50>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f600940>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f6009a0>}, 'description': 'zinopara'}
2021-11-10 at 13:37:15 | ERROR | zinopara
2021-11-10 at 13:37:15 | ERROR | set()
2021-11-10 at 13:37:15 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-10 at 13:37:15 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 13:37:15 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f8dd640>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f901860>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f901900>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f600e80>, 'dialect_options': {}}
2021-11-10 at 13:37:15 | CRITICAL | order_view
2021-11-10 at 13:37:15 | INFO | Neptune Start Up ....
2021-11-10 at 13:37:15 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:37:15 | INFO | Add Custom query ...
2021-11-10 at 13:37:15 | INFO | Neptune Starting ....
2021-11-10 at 13:37:15 | INFO | API cache does not exists ....
2021-11-10 at 13:37:49 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:37:49 | INFO | API cache does not exists ....
2021-11-10 at 13:37:50 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 13:37:50 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 13:37:50 | DEBUG | Generate Schema file from database ...
2021-11-10 at 13:37:50 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 13:37:50 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 13:37:50 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 13:37:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1059940c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105992a40>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10599c180>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1059ae5e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1059a5e50>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1059a5ee0>}, 'description': 'customers'}
2021-11-10 at 13:37:50 | ERROR | customers
2021-11-10 at 13:37:50 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-10 at 13:37:50 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-10 at 13:37:50 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-10 at 13:37:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105994d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10599c220>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10599c5e0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10599cf40>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1059ae3b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1059a5af0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1059a5b80>}, 'description': 'employees'}
2021-11-10 at 13:37:50 | ERROR | employees
2021-11-10 at 13:37:50 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-10 at 13:37:50 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-10 at 13:37:50 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-10 at 13:37:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1059a9ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1059ae720>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1059ae7c0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1059b42b0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1059b4310>}, 'description': 'items'}
2021-11-10 at 13:37:50 | ERROR | items
2021-11-10 at 13:37:50 | ERROR | set()
2021-11-10 at 13:37:50 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-10 at 13:37:50 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-10 at 13:37:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10599e4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10599c630>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10599ca40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1059a5430>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1059a54c0>}, 'description': 'offices'}
2021-11-10 at 13:37:50 | ERROR | offices
2021-11-10 at 13:37:50 | ERROR | set()
2021-11-10 at 13:37:50 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-10 at 13:37:50 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-10 at 13:37:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1059a9e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1059ae8b0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1059aee00>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1059ae9f0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1059c06d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1059ca910>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1059ca9a0>}, 'description': 'orderdetails'}
2021-11-10 at 13:37:50 | ERROR | orderdetails
2021-11-10 at 13:37:50 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-10 at 13:37:50 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-10 at 13:37:50 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-10 at 13:37:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1059b80c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1059aea40>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1059aea90>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1059aec70>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1059b4ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1059b4f70>}, 'description': 'orders'}
2021-11-10 at 13:37:50 | ERROR | orders
2021-11-10 at 13:37:50 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-10 at 13:37:50 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-10 at 13:37:50 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-10 at 13:37:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1059cc6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1059c0860>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1059c0900>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1059c09f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1059d50a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1059d5100>}, 'description': 'payments'}
2021-11-10 at 13:37:50 | ERROR | payments
2021-11-10 at 13:37:50 | ERROR | set()
2021-11-10 at 13:37:50 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-10 at 13:37:50 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-10 at 13:37:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1059c2240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1059c0270>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1059c0360>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1059bcbe0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1059bcc40>}, 'description': 'productlines'}
2021-11-10 at 13:37:50 | ERROR | productlines
2021-11-10 at 13:37:50 | ERROR | set()
2021-11-10 at 13:37:50 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-10 at 13:37:50 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-10 at 13:37:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1059b8d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1059aee50>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1059bc3d0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1059bc3d0>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1059c0220>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1059bc3d0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1059c0540>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1059ca370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1059ca400>}, 'description': 'products'}
2021-11-10 at 13:37:50 | ERROR | products
2021-11-10 at 13:37:50 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-10 at 13:37:50 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1059bc3d0>, for_update=False), comment='产品代码'))
2021-11-10 at 13:37:50 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-10 at 13:37:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1059ccd40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1059c0a90>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1059c0ae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1059d5370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1059d53d0>}}
2021-11-10 at 13:37:50 | ERROR | tokens
2021-11-10 at 13:37:50 | ERROR | set()
2021-11-10 at 13:37:50 | ERROR | PrimaryKeyConstraint()
2021-11-10 at 13:37:50 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-10 at 13:37:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1059d8040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1059c0c20>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1059c0ea0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1059d5940>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1059d59a0>}, 'description': 'zinopara'}
2021-11-10 at 13:37:50 | ERROR | zinopara
2021-11-10 at 13:37:50 | ERROR | set()
2021-11-10 at 13:37:50 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-10 at 13:37:50 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 13:37:50 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105cb1740>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105cd68b0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105cd6680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105c7abe0>, 'dialect_options': {}}
2021-11-10 at 13:37:50 | CRITICAL | order_view
2021-11-10 at 13:37:50 | CRITICAL | ['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__sub__', '__rsub__', '__and__', '__rand__', '__xor__', '__rxor__', '__or__', '__ror__', '__isub__', '__iand__', '__ixor__', '__ior__', '__len__', '__contains__', '__new__', 'add', 'clear', 'copy', 'discard', 'difference', 'difference_update', 'intersection', 'intersection_update', 'isdisjoint', 'issubset', 'issuperset', 'pop', '__reduce__', 'remove', '__sizeof__', 'symmetric_difference', 'symmetric_difference_update', 'union', 'update', '__doc__', '__str__', '__setattr__', '__delattr__', '__reduce_ex__', '__subclasshook__', '__init_subclass__', '__format__', '__dir__', '__class__']
2021-11-10 at 13:37:50 | CRITICAL | PrimaryKeyConstraint()
2021-11-10 at 13:37:50 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-10 at 13:37:50 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-10 at 13:37:52 | INFO | Neptune Start Up ....
2021-11-10 at 13:37:52 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:37:52 | INFO | Add Custom query ...
2021-11-10 at 13:37:52 | INFO | Neptune Starting ....
2021-11-10 at 13:37:52 | INFO | API cache does not exists ....
2021-11-10 at 13:38:10 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:38:10 | INFO | API cache does not exists ....
2021-11-10 at 13:38:12 | INFO | Neptune Start Up ....
2021-11-10 at 13:38:12 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:38:12 | INFO | Add Custom query ...
2021-11-10 at 13:38:12 | INFO | Neptune Starting ....
2021-11-10 at 13:38:12 | INFO | API cache does not exists ....
2021-11-10 at 13:40:19 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:40:19 | INFO | API cache does not exists ....
2021-11-10 at 13:40:22 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 13:40:22 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 13:40:22 | DEBUG | Generate Schema file from database ...
2021-11-10 at 13:40:22 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 13:40:22 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 13:40:22 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 13:40:22 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102bcc0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102bcaa40>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102bd4180>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102be6590>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102bdde50>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102bddee0>}, 'description': 'customers'}
2021-11-10 at 13:40:22 | ERROR | customers
2021-11-10 at 13:40:22 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-10 at 13:40:22 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-10 at 13:40:22 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-10 at 13:40:22 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102bccd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102bd4220>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102bd45e0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102bd4f40>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102be60e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102bddaf0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102bddb80>}, 'description': 'employees'}
2021-11-10 at 13:40:22 | ERROR | employees
2021-11-10 at 13:40:22 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-10 at 13:40:22 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-10 at 13:40:22 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-10 at 13:40:22 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102be1ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102be66d0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102be6770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102bec2b0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102bec310>}, 'description': 'items'}
2021-11-10 at 13:40:22 | ERROR | items
2021-11-10 at 13:40:22 | ERROR | set()
2021-11-10 at 13:40:22 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-10 at 13:40:22 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-10 at 13:40:22 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102bd64c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102bd4630>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102bd4a40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102bdd430>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102bdd4c0>}, 'description': 'offices'}
2021-11-10 at 13:40:22 | ERROR | offices
2021-11-10 at 13:40:22 | ERROR | set()
2021-11-10 at 13:40:22 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-10 at 13:40:22 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-10 at 13:40:22 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102be1e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102be6860>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102be6db0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102be69a0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102bf8680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102c01910>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102c019a0>}, 'description': 'orderdetails'}
2021-11-10 at 13:40:22 | ERROR | orderdetails
2021-11-10 at 13:40:22 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-10 at 13:40:22 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-10 at 13:40:22 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-10 at 13:40:22 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102bf00c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102be69f0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102be6a40>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102be6c20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102becee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102becf70>}, 'description': 'orders'}
2021-11-10 at 13:40:22 | ERROR | orders
2021-11-10 at 13:40:22 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-10 at 13:40:22 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-10 at 13:40:22 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-10 at 13:40:22 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102c046c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102bf8810>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102bf88b0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102bf89a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102c0d0a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102c0d100>}, 'description': 'payments'}
2021-11-10 at 13:40:22 | ERROR | payments
2021-11-10 at 13:40:22 | ERROR | set()
2021-11-10 at 13:40:22 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-10 at 13:40:22 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-10 at 13:40:22 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102bfa240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102bf8220>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102bf8310>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102bf4be0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102bf4c40>}, 'description': 'productlines'}
2021-11-10 at 13:40:22 | ERROR | productlines
2021-11-10 at 13:40:22 | ERROR | set()
2021-11-10 at 13:40:22 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-10 at 13:40:22 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-10 at 13:40:22 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102bf0d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102be6e00>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102bf43d0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102bf43d0>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102bf81d0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102bf43d0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102bf84f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102c01370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102c01400>}, 'description': 'products'}
2021-11-10 at 13:40:22 | ERROR | products
2021-11-10 at 13:40:22 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-10 at 13:40:22 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102bf43d0>, for_update=False), comment='产品代码'))
2021-11-10 at 13:40:22 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-10 at 13:40:22 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102c04d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102bf8a40>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102bf8a90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102c0d370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102c0d3d0>}}
2021-11-10 at 13:40:22 | ERROR | tokens
2021-11-10 at 13:40:22 | ERROR | set()
2021-11-10 at 13:40:22 | ERROR | PrimaryKeyConstraint()
2021-11-10 at 13:40:22 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-10 at 13:40:22 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102c10040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102bf8bd0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102bf8e50>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102c0d940>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102c0d9a0>}, 'description': 'zinopara'}
2021-11-10 at 13:40:22 | ERROR | zinopara
2021-11-10 at 13:40:22 | ERROR | set()
2021-11-10 at 13:40:22 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-10 at 13:40:22 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 13:40:22 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102ee9740>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102f0d5e0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102f0d810>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102ed3fa0>, 'dialect_options': {}}
2021-11-10 at 13:40:22 | CRITICAL | order_view
2021-11-10 at 13:40:23 | INFO | Neptune Start Up ....
2021-11-10 at 13:40:23 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:40:23 | INFO | Add Custom query ...
2021-11-10 at 13:40:23 | INFO | Neptune Starting ....
2021-11-10 at 13:40:23 | INFO | API cache does not exists ....
2021-11-10 at 13:41:33 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:41:33 | INFO | API cache does not exists ....
2021-11-10 at 13:41:36 | INFO | Neptune Start Up ....
2021-11-10 at 13:41:36 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:41:36 | INFO | Add Custom query ...
2021-11-10 at 13:41:36 | INFO | Neptune Starting ....
2021-11-10 at 13:41:36 | INFO | API cache does not exists ....
2021-11-10 at 13:41:48 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:41:48 | INFO | API cache does not exists ....
2021-11-10 at 13:41:49 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 13:41:49 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 13:41:49 | DEBUG | Generate Schema file from database ...
2021-11-10 at 13:41:49 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 13:41:50 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 13:41:50 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 13:41:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10aceb0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ace99f0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10acf4130>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ad05590>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10acfcf10>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10acfcfa0>}, 'description': 'customers'}
2021-11-10 at 13:41:50 | ERROR | customers
2021-11-10 at 13:41:50 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-10 at 13:41:50 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-10 at 13:41:50 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-10 at 13:41:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10acebd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10acf41d0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10acf4ef0>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10acf4590>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ad05360>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10acfcbb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10acfcc40>}, 'description': 'employees'}
2021-11-10 at 13:41:50 | ERROR | employees
2021-11-10 at 13:41:50 | ERROR | {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}
2021-11-10 at 13:41:50 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-10 at 13:41:50 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-10 at 13:41:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ad00ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ad056d0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ad05770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ad0b370>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ad0b3d0>}, 'description': 'items'}
2021-11-10 at 13:41:50 | ERROR | items
2021-11-10 at 13:41:50 | ERROR | set()
2021-11-10 at 13:41:50 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-10 at 13:41:50 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-10 at 13:41:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10acf54c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10acf45e0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10acf49f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10acfc4f0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10acfc580>}, 'description': 'offices'}
2021-11-10 at 13:41:50 | ERROR | offices
2021-11-10 at 13:41:50 | ERROR | set()
2021-11-10 at 13:41:50 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-10 at 13:41:50 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-10 at 13:41:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ad00e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ad05860>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ad05db0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ad059a0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ad18680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ad219d0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ad21a60>}, 'description': 'orderdetails'}
2021-11-10 at 13:41:50 | ERROR | orderdetails
2021-11-10 at 13:41:50 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-10 at 13:41:50 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-10 at 13:41:50 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-10 at 13:41:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ad0f0c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ad059f0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ad05a40>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ad05c20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ad0bfa0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ad13070>}, 'description': 'orders'}
2021-11-10 at 13:41:50 | ERROR | orders
2021-11-10 at 13:41:50 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-10 at 13:41:50 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-10 at 13:41:50 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-10 at 13:41:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ad236c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ad18810>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ad188b0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ad189a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ad2c160>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ad2c1c0>}, 'description': 'payments'}
2021-11-10 at 13:41:50 | ERROR | payments
2021-11-10 at 13:41:50 | ERROR | set()
2021-11-10 at 13:41:50 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-10 at 13:41:50 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-10 at 13:41:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ad19240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ad18220>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ad18310>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ad13ca0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ad13d00>}, 'description': 'productlines'}
2021-11-10 at 13:41:50 | ERROR | productlines
2021-11-10 at 13:41:50 | ERROR | set()
2021-11-10 at 13:41:50 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-10 at 13:41:50 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-10 at 13:41:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ad0fd40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ad05e00>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ad13490>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ad13490>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ad181d0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ad13490>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ad184f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ad21430>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ad214c0>}, 'description': 'products'}
2021-11-10 at 13:41:50 | ERROR | products
2021-11-10 at 13:41:50 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-10 at 13:41:50 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ad13490>, for_update=False), comment='产品代码'))
2021-11-10 at 13:41:50 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-10 at 13:41:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ad23d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ad18a40>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ad18a90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ad2c430>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ad2c490>}}
2021-11-10 at 13:41:50 | ERROR | tokens
2021-11-10 at 13:41:50 | ERROR | set()
2021-11-10 at 13:41:50 | ERROR | PrimaryKeyConstraint()
2021-11-10 at 13:41:50 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-10 at 13:41:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ad2f040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ad18bd0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ad18e50>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ad2ca00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ad2ca60>}, 'description': 'zinopara'}
2021-11-10 at 13:41:50 | ERROR | zinopara
2021-11-10 at 13:41:50 | ERROR | set()
2021-11-10 at 13:41:50 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-10 at 13:41:50 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 13:41:50 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b008640>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b02d5e0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b02d770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10afd15e0>, 'dialect_options': {}}
2021-11-10 at 13:41:50 | CRITICAL | order_view
2021-11-10 at 13:41:50 | CRITICAL | []
2021-11-10 at 13:41:50 | CRITICAL | PrimaryKeyConstraint()
2021-11-10 at 13:41:50 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-10 at 13:41:50 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-10 at 13:41:50 | INFO | Neptune Start Up ....
2021-11-10 at 13:41:50 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:41:51 | INFO | Add Custom query ...
2021-11-10 at 13:41:51 | INFO | Neptune Starting ....
2021-11-10 at 13:41:51 | INFO | API cache does not exists ....
2021-11-10 at 13:57:10 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:57:10 | INFO | API cache does not exists ....
2021-11-10 at 13:57:12 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 13:57:12 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 13:57:12 | DEBUG | Generate Schema file from database ...
2021-11-10 at 13:57:12 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 13:57:12 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 13:57:12 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 13:57:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109471140>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10947ab30>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x109485270>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1094956d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10948eee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10948ef70>}, 'description': 'customers'}
2021-11-10 at 13:57:12 | ERROR | customers
2021-11-10 at 13:57:12 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-10 at 13:57:12 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-10 at 13:57:12 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-10 at 13:57:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109471dc0>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109485310>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1094856d0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x109495090>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1094954a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10948eb80>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10948ec10>}, 'description': 'employees'}
2021-11-10 at 13:57:12 | ERROR | employees
2021-11-10 at 13:57:12 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-10 at 13:57:12 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-10 at 13:57:12 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-10 at 13:57:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109492b40>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109495810>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1094958b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10949d340>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10949d3a0>}, 'description': 'items'}
2021-11-10 at 13:57:12 | ERROR | items
2021-11-10 at 13:57:12 | ERROR | set()
2021-11-10 at 13:57:12 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-10 at 13:57:12 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-10 at 13:57:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109487540>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109485720>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x109485b30>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10948e4c0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10948e550>}, 'description': 'offices'}
2021-11-10 at 13:57:12 | ERROR | offices
2021-11-10 at 13:57:12 | ERROR | set()
2021-11-10 at 13:57:12 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-10 at 13:57:12 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-10 at 13:57:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109492ec0>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1094959a0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x109495ae0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x109495ef0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1094aa770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1094b29a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1094b2a30>}, 'description': 'orderdetails'}
2021-11-10 at 13:57:12 | ERROR | orderdetails
2021-11-10 at 13:57:12 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-10 at 13:57:12 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-10 at 13:57:12 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-10 at 13:57:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10949f140>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109495b30>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x109495b80>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x109495d60>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10949df70>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1094a5040>}, 'description': 'orders'}
2021-11-10 at 13:57:12 | ERROR | orders
2021-11-10 at 13:57:12 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-10 at 13:57:12 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-10 at 13:57:12 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-10 at 13:57:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1094b4740>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1094aa900>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1094aa9a0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1094aaa90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1094be130>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1094be190>}, 'description': 'payments'}
2021-11-10 at 13:57:12 | ERROR | payments
2021-11-10 at 13:57:12 | ERROR | set()
2021-11-10 at 13:57:12 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-10 at 13:57:12 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-10 at 13:57:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1094ab2c0>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1094aa310>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1094aa400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1094a5c70>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1094a5cd0>}, 'description': 'productlines'}
2021-11-10 at 13:57:12 | ERROR | productlines
2021-11-10 at 13:57:12 | ERROR | set()
2021-11-10 at 13:57:12 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-10 at 13:57:12 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-10 at 13:57:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10949fdc0>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109495f40>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1094a5460>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1094a5460>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1094aa2c0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1094a5460>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1094aa5e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1094b2400>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1094b2490>}, 'description': 'products'}
2021-11-10 at 13:57:12 | ERROR | products
2021-11-10 at 13:57:12 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-10 at 13:57:12 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1094a5460>, for_update=False), comment='产品代码'))
2021-11-10 at 13:57:12 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-10 at 13:57:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1094b4dc0>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1094aab30>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1094aab80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1094be400>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1094be460>}}
2021-11-10 at 13:57:12 | ERROR | tokens
2021-11-10 at 13:57:12 | ERROR | set()
2021-11-10 at 13:57:12 | ERROR | PrimaryKeyConstraint()
2021-11-10 at 13:57:12 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-10 at 13:57:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1094bf0c0>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1094aacc0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1094aaf40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1094be9d0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1094bea30>}, 'description': 'zinopara'}
2021-11-10 at 13:57:12 | ERROR | zinopara
2021-11-10 at 13:57:12 | ERROR | set()
2021-11-10 at 13:57:12 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-10 at 13:57:12 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 13:57:12 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109799640>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097be9f0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1097be8b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109785bb0>, 'dialect_options': {}}
2021-11-10 at 13:57:12 | CRITICAL | order_view
2021-11-10 at 13:57:12 | ERROR | set()
2021-11-10 at 13:57:12 | CRITICAL | PrimaryKeyConstraint()
2021-11-10 at 13:57:12 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-10 at 13:57:13 | INFO | Neptune Start Up ....
2021-11-10 at 13:57:13 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:57:13 | INFO | Add Custom query ...
2021-11-10 at 13:57:13 | INFO | Neptune Starting ....
2021-11-10 at 13:57:13 | INFO | API cache does not exists ....
2021-11-10 at 13:57:24 | INFO | Neptune Shutting Down ....
2021-11-10 at 13:57:24 | INFO | API cache does not exists ....
2021-11-10 at 13:57:24 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 13:57:25 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 13:57:25 | DEBUG | Generate Schema file from database ...
2021-11-10 at 13:57:25 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 13:57:25 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 13:57:25 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 13:57:25 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ccc3140>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cccda40>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ccd7180>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10cce95e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10cce0ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10cce0f70>}, 'description': 'customers'}
2021-11-10 at 13:57:25 | ERROR | customers
2021-11-10 at 13:57:25 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-10 at 13:57:25 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-10 at 13:57:25 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-10 at 13:57:25 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ccc3dc0>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ccd7220>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ccd75e0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ccd7f40>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10cce93b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10cce0b80>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10cce0c10>}, 'description': 'employees'}
2021-11-10 at 13:57:25 | ERROR | employees
2021-11-10 at 13:57:25 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-10 at 13:57:25 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-10 at 13:57:25 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-10 at 13:57:25 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10cce3b40>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cce9720>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10cce97c0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ccef340>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ccef3a0>}, 'description': 'items'}
2021-11-10 at 13:57:25 | ERROR | items
2021-11-10 at 13:57:25 | ERROR | set()
2021-11-10 at 13:57:25 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-10 at 13:57:25 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-10 at 13:57:25 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ccd9540>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ccd7630>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ccd7a40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10cce04c0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10cce0550>}, 'description': 'offices'}
2021-11-10 at 13:57:25 | ERROR | offices
2021-11-10 at 13:57:25 | ERROR | set()
2021-11-10 at 13:57:25 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-10 at 13:57:25 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-10 at 13:57:25 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10cce3ec0>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cce98b0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cce99f0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cce9e00>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ccfc6d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10cd049a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10cd04a30>}, 'description': 'orderdetails'}
2021-11-10 at 13:57:25 | ERROR | orderdetails
2021-11-10 at 13:57:25 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-10 at 13:57:25 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-10 at 13:57:25 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-10 at 13:57:25 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ccf1140>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cce9a40>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cce9a90>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10cce9c70>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10cceff70>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ccf7040>}, 'description': 'orders'}
2021-11-10 at 13:57:25 | ERROR | orders
2021-11-10 at 13:57:25 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-10 at 13:57:25 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-10 at 13:57:25 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-10 at 13:57:25 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10cd06740>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ccfc860>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ccfc900>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ccfc9f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10cd0f130>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10cd0f190>}, 'description': 'payments'}
2021-11-10 at 13:57:25 | ERROR | payments
2021-11-10 at 13:57:25 | ERROR | set()
2021-11-10 at 13:57:25 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-10 at 13:57:25 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-10 at 13:57:25 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ccfb2c0>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ccfc270>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ccfc360>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ccf7c70>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ccf7cd0>}, 'description': 'productlines'}
2021-11-10 at 13:57:25 | ERROR | productlines
2021-11-10 at 13:57:25 | ERROR | set()
2021-11-10 at 13:57:25 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-10 at 13:57:25 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-10 at 13:57:25 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ccf1dc0>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cce9e50>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ccf7460>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ccf7460>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ccfc220>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ccf7460>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ccfc540>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10cd04400>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10cd04490>}, 'description': 'products'}
2021-11-10 at 13:57:25 | ERROR | products
2021-11-10 at 13:57:25 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-10 at 13:57:25 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ccf7460>, for_update=False), comment='产品代码'))
2021-11-10 at 13:57:25 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-10 at 13:57:25 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10cd06dc0>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ccfca90>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ccfcae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10cd0f400>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10cd0f460>}}
2021-11-10 at 13:57:25 | ERROR | tokens
2021-11-10 at 13:57:25 | ERROR | set()
2021-11-10 at 13:57:25 | ERROR | PrimaryKeyConstraint()
2021-11-10 at 13:57:25 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-10 at 13:57:25 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10cd110c0>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ccfcc20>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ccfcea0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10cd0f9d0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10cd0fa30>}, 'description': 'zinopara'}
2021-11-10 at 13:57:25 | ERROR | zinopara
2021-11-10 at 13:57:25 | ERROR | set()
2021-11-10 at 13:57:25 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-10 at 13:57:25 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 13:57:25 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10cfeb7c0>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10d011860>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10d011590>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10cfb4be0>, 'dialect_options': {}}
2021-11-10 at 13:57:25 | CRITICAL | order_view
2021-11-10 at 13:57:25 | CRITICAL | set()
2021-11-10 at 13:57:25 | CRITICAL | PrimaryKeyConstraint()
2021-11-10 at 13:57:25 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-10 at 13:57:26 | INFO | Neptune Start Up ....
2021-11-10 at 13:57:26 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 13:57:26 | INFO | Add Custom query ...
2021-11-10 at 13:57:26 | INFO | Neptune Starting ....
2021-11-10 at 13:57:26 | INFO | API cache does not exists ....
2021-11-10 at 14:06:57 | INFO | Neptune Shutting Down ....
2021-11-10 at 14:06:57 | INFO | API cache does not exists ....
2021-11-10 at 14:06:58 | INFO | Neptune Start Up ....
2021-11-10 at 14:06:58 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 14:06:58 | INFO | Add Custom query ...
2021-11-10 at 14:06:58 | INFO | Neptune Starting ....
2021-11-10 at 14:06:58 | INFO | API cache does not exists ....
2021-11-10 at 14:12:02 | INFO | Neptune Shutting Down ....
2021-11-10 at 14:12:02 | INFO | API cache does not exists ....
2021-11-10 at 14:12:04 | INFO | Neptune Start Up ....
2021-11-10 at 14:12:04 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 14:12:04 | INFO | Add Custom query ...
2021-11-10 at 14:12:04 | INFO | Neptune Starting ....
2021-11-10 at 14:12:04 | INFO | API cache does not exists ....
2021-11-10 at 14:13:47 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 14:13:47 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 14:13:47 | DEBUG | Generate Schema file from database ...
2021-11-10 at 14:13:47 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 14:13:48 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 14:14:39 | INFO | Neptune Shutting Down ....
2021-11-10 at 14:14:39 | INFO | API cache does not exists ....
2021-11-10 at 14:14:39 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 14:14:39 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 14:14:39 | DEBUG | Generate Schema file from database ...
2021-11-10 at 14:14:40 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 14:14:40 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 14:14:40 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 14:14:40 | DEBUG | ****************************************************
2021-11-10 at 14:14:40 | DEBUG | __class__
2021-11-10 at 14:14:40 | DEBUG | __class_getitem__
2021-11-10 at 14:14:40 | DEBUG | __contains__
2021-11-10 at 14:14:40 | DEBUG | __delattr__
2021-11-10 at 14:14:40 | DEBUG | __dict__
2021-11-10 at 14:14:40 | DEBUG | __dir__
2021-11-10 at 14:14:40 | DEBUG | __doc__
2021-11-10 at 14:14:40 | DEBUG | __eq__
2021-11-10 at 14:14:40 | DEBUG | __format__
2021-11-10 at 14:14:40 | DEBUG | __ge__
2021-11-10 at 14:14:40 | DEBUG | __getattribute__
2021-11-10 at 14:14:40 | DEBUG | __getstate__
2021-11-10 at 14:14:40 | DEBUG | __gt__
2021-11-10 at 14:14:40 | DEBUG | __hash__
2021-11-10 at 14:14:40 | DEBUG | __init__
2021-11-10 at 14:14:40 | DEBUG | __init_subclass__
2021-11-10 at 14:14:40 | DEBUG | __le__
2021-11-10 at 14:14:40 | DEBUG | __lt__
2021-11-10 at 14:14:40 | DEBUG | __module__
2021-11-10 at 14:14:40 | DEBUG | __ne__
2021-11-10 at 14:14:40 | DEBUG | __new__
2021-11-10 at 14:14:40 | DEBUG | __reduce__
2021-11-10 at 14:14:40 | DEBUG | __reduce_ex__
2021-11-10 at 14:14:40 | DEBUG | __repr__
2021-11-10 at 14:14:40 | DEBUG | __setattr__
2021-11-10 at 14:14:40 | DEBUG | __setstate__
2021-11-10 at 14:14:40 | DEBUG | __sizeof__
2021-11-10 at 14:14:40 | DEBUG | __str__
2021-11-10 at 14:14:40 | DEBUG | __subclasshook__
2021-11-10 at 14:14:40 | DEBUG | __visit_name__
2021-11-10 at 14:14:40 | DEBUG | __weakref__
2021-11-10 at 14:14:40 | DEBUG | _add_table
2021-11-10 at 14:14:40 | DEBUG | _bind
2021-11-10 at 14:14:40 | DEBUG | _bind_to
2021-11-10 at 14:14:40 | DEBUG | _compiler_dispatch
2021-11-10 at 14:14:40 | DEBUG | _fk_memos
2021-11-10 at 14:14:40 | DEBUG | _init_items
2021-11-10 at 14:14:40 | DEBUG | _original_compiler_dispatch
2021-11-10 at 14:14:40 | DEBUG | _remove_table
2021-11-10 at 14:14:40 | DEBUG | _schema_item_copy
2021-11-10 at 14:14:40 | DEBUG | _schemas
2021-11-10 at 14:14:40 | DEBUG | _sequences
2021-11-10 at 14:14:40 | DEBUG | _set_parent
2021-11-10 at 14:14:40 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 14:14:40 | DEBUG | _use_schema_map
2021-11-10 at 14:14:40 | DEBUG | bind
2021-11-10 at 14:14:40 | DEBUG | clear
2021-11-10 at 14:14:40 | DEBUG | create_all
2021-11-10 at 14:14:40 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 14:14:40 | DEBUG | dispatch
2021-11-10 at 14:14:40 | DEBUG | drop_all
2021-11-10 at 14:14:40 | DEBUG | get_children
2021-11-10 at 14:14:40 | DEBUG | info
2021-11-10 at 14:14:40 | DEBUG | is_bound
2021-11-10 at 14:14:40 | DEBUG | naming_convention
2021-11-10 at 14:14:40 | DEBUG | reflect
2021-11-10 at 14:14:40 | DEBUG | remove
2021-11-10 at 14:14:40 | DEBUG | schema
2021-11-10 at 14:14:40 | DEBUG | sorted_tables
2021-11-10 at 14:14:40 | DEBUG | tables
2021-11-10 at 14:14:40 | DEBUG | ===================================================
2021-11-10 at 14:14:40 | DEBUG | items
2021-11-10 at 14:14:40 | DEBUG | offices
2021-11-10 at 14:14:40 | DEBUG | productlines
2021-11-10 at 14:14:40 | DEBUG | tokens
2021-11-10 at 14:14:40 | DEBUG | zinopara
2021-11-10 at 14:14:40 | DEBUG | employees
2021-11-10 at 14:14:40 | DEBUG | products
2021-11-10 at 14:14:40 | DEBUG | customers
2021-11-10 at 14:14:40 | DEBUG | orders
2021-11-10 at 14:14:40 | DEBUG | payments
2021-11-10 at 14:14:40 | DEBUG | orderdetails
2021-11-10 at 14:14:40 | DEBUG | ****************************************************
2021-11-10 at 14:14:40 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 14:14:42 | INFO | Neptune Start Up ....
2021-11-10 at 14:14:42 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 14:14:42 | INFO | Add Custom query ...
2021-11-10 at 14:14:42 | INFO | Neptune Starting ....
2021-11-10 at 14:14:42 | INFO | API cache does not exists ....
2021-11-10 at 14:14:47 | INFO | Neptune Shutting Down ....
2021-11-10 at 14:14:47 | INFO | API cache does not exists ....
2021-11-10 at 14:14:48 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 14:14:48 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 14:14:48 | DEBUG | Generate Schema file from database ...
2021-11-10 at 14:14:48 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 14:14:48 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 14:14:50 | INFO | Neptune Start Up ....
2021-11-10 at 14:14:50 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 14:14:50 | INFO | Add Custom query ...
2021-11-10 at 14:14:50 | INFO | Neptune Starting ....
2021-11-10 at 14:14:50 | INFO | API cache does not exists ....
2021-11-10 at 14:23:19 | INFO | Neptune Shutting Down ....
2021-11-10 at 14:23:19 | INFO | API cache does not exists ....
2021-11-10 at 14:23:34 | INFO | Neptune Start Up ....
2021-11-10 at 14:23:34 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 14:23:34 | INFO | Add Custom query ...
2021-11-10 at 14:23:34 | INFO | Neptune Starting ....
2021-11-10 at 14:23:34 | INFO | API cache does not exists ....
2021-11-10 at 14:23:35 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 14:23:35 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 14:23:35 | DEBUG | Generate Schema file from database ...
2021-11-10 at 14:23:35 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 14:23:35 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 14:23:35 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 14:23:35 | DEBUG | ****************************************************
2021-11-10 at 14:23:35 | DEBUG | __class__
2021-11-10 at 14:23:35 | DEBUG | __class_getitem__
2021-11-10 at 14:23:35 | DEBUG | __contains__
2021-11-10 at 14:23:35 | DEBUG | __delattr__
2021-11-10 at 14:23:35 | DEBUG | __dict__
2021-11-10 at 14:23:35 | DEBUG | __dir__
2021-11-10 at 14:23:35 | DEBUG | __doc__
2021-11-10 at 14:23:35 | DEBUG | __eq__
2021-11-10 at 14:23:35 | DEBUG | __format__
2021-11-10 at 14:23:35 | DEBUG | __ge__
2021-11-10 at 14:23:35 | DEBUG | __getattribute__
2021-11-10 at 14:23:35 | DEBUG | __getstate__
2021-11-10 at 14:23:35 | DEBUG | __gt__
2021-11-10 at 14:23:35 | DEBUG | __hash__
2021-11-10 at 14:23:35 | DEBUG | __init__
2021-11-10 at 14:23:35 | DEBUG | __init_subclass__
2021-11-10 at 14:23:35 | DEBUG | __le__
2021-11-10 at 14:23:35 | DEBUG | __lt__
2021-11-10 at 14:23:35 | DEBUG | __module__
2021-11-10 at 14:23:35 | DEBUG | __ne__
2021-11-10 at 14:23:35 | DEBUG | __new__
2021-11-10 at 14:23:35 | DEBUG | __reduce__
2021-11-10 at 14:23:35 | DEBUG | __reduce_ex__
2021-11-10 at 14:23:35 | DEBUG | __repr__
2021-11-10 at 14:23:35 | DEBUG | __setattr__
2021-11-10 at 14:23:35 | DEBUG | __setstate__
2021-11-10 at 14:23:35 | DEBUG | __sizeof__
2021-11-10 at 14:23:35 | DEBUG | __str__
2021-11-10 at 14:23:35 | DEBUG | __subclasshook__
2021-11-10 at 14:23:35 | DEBUG | __visit_name__
2021-11-10 at 14:23:35 | DEBUG | __weakref__
2021-11-10 at 14:23:35 | DEBUG | _add_table
2021-11-10 at 14:23:35 | DEBUG | _bind
2021-11-10 at 14:23:35 | DEBUG | _bind_to
2021-11-10 at 14:23:35 | DEBUG | _compiler_dispatch
2021-11-10 at 14:23:35 | DEBUG | _fk_memos
2021-11-10 at 14:23:35 | DEBUG | _init_items
2021-11-10 at 14:23:35 | DEBUG | _original_compiler_dispatch
2021-11-10 at 14:23:35 | DEBUG | _remove_table
2021-11-10 at 14:23:35 | DEBUG | _schema_item_copy
2021-11-10 at 14:23:35 | DEBUG | _schemas
2021-11-10 at 14:23:35 | DEBUG | _sequences
2021-11-10 at 14:23:35 | DEBUG | _set_parent
2021-11-10 at 14:23:35 | DEBUG | _set_parent_with_dispatch
2021-11-10 at 14:23:35 | DEBUG | _use_schema_map
2021-11-10 at 14:23:35 | DEBUG | bind
2021-11-10 at 14:23:35 | DEBUG | clear
2021-11-10 at 14:23:35 | DEBUG | create_all
2021-11-10 at 14:23:35 | DEBUG | create_drop_stringify_dialect
2021-11-10 at 14:23:35 | DEBUG | dispatch
2021-11-10 at 14:23:35 | DEBUG | drop_all
2021-11-10 at 14:23:35 | DEBUG | get_children
2021-11-10 at 14:23:35 | DEBUG | info
2021-11-10 at 14:23:35 | DEBUG | is_bound
2021-11-10 at 14:23:35 | DEBUG | naming_convention
2021-11-10 at 14:23:35 | DEBUG | reflect
2021-11-10 at 14:23:35 | DEBUG | remove
2021-11-10 at 14:23:35 | DEBUG | schema
2021-11-10 at 14:23:35 | DEBUG | sorted_tables
2021-11-10 at 14:23:35 | DEBUG | tables
2021-11-10 at 14:23:35 | DEBUG | ===================================================
2021-11-10 at 14:23:35 | DEBUG | items
2021-11-10 at 14:23:35 | DEBUG | offices
2021-11-10 at 14:23:35 | DEBUG | productlines
2021-11-10 at 14:23:35 | DEBUG | tokens
2021-11-10 at 14:23:35 | DEBUG | zinopara
2021-11-10 at 14:23:35 | DEBUG | employees
2021-11-10 at 14:23:35 | DEBUG | products
2021-11-10 at 14:23:35 | DEBUG | customers
2021-11-10 at 14:23:35 | DEBUG | orders
2021-11-10 at 14:23:35 | DEBUG | payments
2021-11-10 at 14:23:35 | DEBUG | orderdetails
2021-11-10 at 14:23:35 | DEBUG | ****************************************************
2021-11-10 at 14:23:35 | DEBUG | /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 14:26:09 | INFO | Neptune Shutting Down ....
2021-11-10 at 14:26:09 | INFO | API cache does not exists ....
2021-11-10 at 14:26:11 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 14:26:11 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 14:26:11 | DEBUG | Generate Schema file from database ...
2021-11-10 at 14:26:11 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 14:26:11 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 14:26:11 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 14:26:11 | DEBUG | ['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__len__', '__getitem__', '__setitem__', '__delitem__', '__contains__', '__new__', '__sizeof__', 'get', 'setdefault', 'pop', 'popitem', 'keys', 'items', 'values', 'update', 'fromkeys', 'clear', 'copy', '__reversed__', '__doc__', '__str__', '__setattr__', '__delattr__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__dir__', '__class__']
2021-11-10 at 14:26:11 | ERROR | customers
2021-11-10 at 14:26:11 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-10 at 14:26:11 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-10 at 14:26:11 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-10 at 14:26:11 | DEBUG | ['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__len__', '__getitem__', '__setitem__', '__delitem__', '__contains__', '__new__', '__sizeof__', 'get', 'setdefault', 'pop', 'popitem', 'keys', 'items', 'values', 'update', 'fromkeys', 'clear', 'copy', '__reversed__', '__doc__', '__str__', '__setattr__', '__delattr__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__dir__', '__class__']
2021-11-10 at 14:26:11 | ERROR | employees
2021-11-10 at 14:26:11 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-10 at 14:26:11 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-10 at 14:26:11 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-10 at 14:26:11 | DEBUG | ['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__len__', '__getitem__', '__setitem__', '__delitem__', '__contains__', '__new__', '__sizeof__', 'get', 'setdefault', 'pop', 'popitem', 'keys', 'items', 'values', 'update', 'fromkeys', 'clear', 'copy', '__reversed__', '__doc__', '__str__', '__setattr__', '__delattr__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__dir__', '__class__']
2021-11-10 at 14:26:11 | ERROR | items
2021-11-10 at 14:26:11 | ERROR | set()
2021-11-10 at 14:26:11 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-10 at 14:26:11 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-10 at 14:26:11 | DEBUG | ['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__len__', '__getitem__', '__setitem__', '__delitem__', '__contains__', '__new__', '__sizeof__', 'get', 'setdefault', 'pop', 'popitem', 'keys', 'items', 'values', 'update', 'fromkeys', 'clear', 'copy', '__reversed__', '__doc__', '__str__', '__setattr__', '__delattr__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__dir__', '__class__']
2021-11-10 at 14:26:11 | ERROR | offices
2021-11-10 at 14:26:11 | ERROR | set()
2021-11-10 at 14:26:11 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-10 at 14:26:11 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-10 at 14:26:11 | DEBUG | ['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__len__', '__getitem__', '__setitem__', '__delitem__', '__contains__', '__new__', '__sizeof__', 'get', 'setdefault', 'pop', 'popitem', 'keys', 'items', 'values', 'update', 'fromkeys', 'clear', 'copy', '__reversed__', '__doc__', '__str__', '__setattr__', '__delattr__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__dir__', '__class__']
2021-11-10 at 14:26:11 | ERROR | orderdetails
2021-11-10 at 14:26:11 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-10 at 14:26:11 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-10 at 14:26:11 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-10 at 14:26:11 | DEBUG | ['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__len__', '__getitem__', '__setitem__', '__delitem__', '__contains__', '__new__', '__sizeof__', 'get', 'setdefault', 'pop', 'popitem', 'keys', 'items', 'values', 'update', 'fromkeys', 'clear', 'copy', '__reversed__', '__doc__', '__str__', '__setattr__', '__delattr__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__dir__', '__class__']
2021-11-10 at 14:26:11 | ERROR | orders
2021-11-10 at 14:26:11 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-10 at 14:26:11 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-10 at 14:26:11 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-10 at 14:26:11 | DEBUG | ['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__len__', '__getitem__', '__setitem__', '__delitem__', '__contains__', '__new__', '__sizeof__', 'get', 'setdefault', 'pop', 'popitem', 'keys', 'items', 'values', 'update', 'fromkeys', 'clear', 'copy', '__reversed__', '__doc__', '__str__', '__setattr__', '__delattr__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__dir__', '__class__']
2021-11-10 at 14:26:11 | ERROR | payments
2021-11-10 at 14:26:11 | ERROR | set()
2021-11-10 at 14:26:11 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-10 at 14:26:11 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-10 at 14:26:11 | DEBUG | ['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__len__', '__getitem__', '__setitem__', '__delitem__', '__contains__', '__new__', '__sizeof__', 'get', 'setdefault', 'pop', 'popitem', 'keys', 'items', 'values', 'update', 'fromkeys', 'clear', 'copy', '__reversed__', '__doc__', '__str__', '__setattr__', '__delattr__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__dir__', '__class__']
2021-11-10 at 14:26:11 | ERROR | productlines
2021-11-10 at 14:26:11 | ERROR | set()
2021-11-10 at 14:26:11 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-10 at 14:26:11 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-10 at 14:26:11 | DEBUG | ['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__len__', '__getitem__', '__setitem__', '__delitem__', '__contains__', '__new__', '__sizeof__', 'get', 'setdefault', 'pop', 'popitem', 'keys', 'items', 'values', 'update', 'fromkeys', 'clear', 'copy', '__reversed__', '__doc__', '__str__', '__setattr__', '__delattr__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__dir__', '__class__']
2021-11-10 at 14:26:11 | ERROR | products
2021-11-10 at 14:26:11 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-10 at 14:26:11 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1044b6460>, for_update=False), comment='产品代码'))
2021-11-10 at 14:26:11 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-10 at 14:26:11 | DEBUG | ['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__len__', '__getitem__', '__setitem__', '__delitem__', '__contains__', '__new__', '__sizeof__', 'get', 'setdefault', 'pop', 'popitem', 'keys', 'items', 'values', 'update', 'fromkeys', 'clear', 'copy', '__reversed__', '__doc__', '__str__', '__setattr__', '__delattr__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__dir__', '__class__']
2021-11-10 at 14:26:11 | ERROR | tokens
2021-11-10 at 14:26:11 | ERROR | set()
2021-11-10 at 14:26:11 | ERROR | PrimaryKeyConstraint()
2021-11-10 at 14:26:11 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-10 at 14:26:11 | DEBUG | ['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__len__', '__getitem__', '__setitem__', '__delitem__', '__contains__', '__new__', '__sizeof__', 'get', 'setdefault', 'pop', 'popitem', 'keys', 'items', 'values', 'update', 'fromkeys', 'clear', 'copy', '__reversed__', '__doc__', '__str__', '__setattr__', '__delattr__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__dir__', '__class__']
2021-11-10 at 14:26:11 | ERROR | zinopara
2021-11-10 at 14:26:11 | ERROR | set()
2021-11-10 at 14:26:11 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-10 at 14:26:11 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 14:26:11 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1047aa640>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1047d0810>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1047d0630>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x104796e80>, 'dialect_options': {}}
2021-11-10 at 14:26:11 | CRITICAL | order_view
2021-11-10 at 14:26:11 | CRITICAL | set()
2021-11-10 at 14:26:11 | CRITICAL | PrimaryKeyConstraint()
2021-11-10 at 14:26:11 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-10 at 14:26:12 | INFO | Neptune Start Up ....
2021-11-10 at 14:26:12 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 14:26:12 | INFO | Add Custom query ...
2021-11-10 at 14:26:12 | INFO | Neptune Starting ....
2021-11-10 at 14:26:12 | INFO | API cache does not exists ....
2021-11-10 at 14:26:31 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 14:26:31 | INFO | Neptune Shutting Down ....
2021-11-10 at 14:26:31 | INFO | API cache does not exists ....
2021-11-10 at 14:26:31 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 14:26:31 | DEBUG | Generate Schema file from database ...
2021-11-10 at 14:26:31 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 14:26:32 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 14:26:32 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 14:26:32 | DEBUG | <class 'dict'>
2021-11-10 at 14:26:32 | ERROR | customers
2021-11-10 at 14:26:32 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-10 at 14:26:32 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-10 at 14:26:32 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-10 at 14:26:32 | DEBUG | <class 'dict'>
2021-11-10 at 14:26:32 | ERROR | employees
2021-11-10 at 14:26:32 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-10 at 14:26:32 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-10 at 14:26:32 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-10 at 14:26:32 | DEBUG | <class 'dict'>
2021-11-10 at 14:26:32 | ERROR | items
2021-11-10 at 14:26:32 | ERROR | set()
2021-11-10 at 14:26:32 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-10 at 14:26:32 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-10 at 14:26:32 | DEBUG | <class 'dict'>
2021-11-10 at 14:26:32 | ERROR | offices
2021-11-10 at 14:26:32 | ERROR | set()
2021-11-10 at 14:26:32 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-10 at 14:26:32 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-10 at 14:26:32 | DEBUG | <class 'dict'>
2021-11-10 at 14:26:32 | ERROR | orderdetails
2021-11-10 at 14:26:32 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-10 at 14:26:32 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-10 at 14:26:32 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-10 at 14:26:32 | DEBUG | <class 'dict'>
2021-11-10 at 14:26:32 | ERROR | orders
2021-11-10 at 14:26:32 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-10 at 14:26:32 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-10 at 14:26:32 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-10 at 14:26:32 | DEBUG | <class 'dict'>
2021-11-10 at 14:26:32 | ERROR | payments
2021-11-10 at 14:26:32 | ERROR | set()
2021-11-10 at 14:26:32 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-10 at 14:26:32 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-10 at 14:26:32 | DEBUG | <class 'dict'>
2021-11-10 at 14:26:32 | ERROR | productlines
2021-11-10 at 14:26:32 | ERROR | set()
2021-11-10 at 14:26:32 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-10 at 14:26:32 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-10 at 14:26:32 | DEBUG | <class 'dict'>
2021-11-10 at 14:26:32 | ERROR | products
2021-11-10 at 14:26:32 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-10 at 14:26:32 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10a2bf460>, for_update=False), comment='产品代码'))
2021-11-10 at 14:26:32 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-10 at 14:26:32 | DEBUG | <class 'dict'>
2021-11-10 at 14:26:32 | ERROR | tokens
2021-11-10 at 14:26:32 | ERROR | set()
2021-11-10 at 14:26:32 | ERROR | PrimaryKeyConstraint()
2021-11-10 at 14:26:32 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-10 at 14:26:32 | DEBUG | <class 'dict'>
2021-11-10 at 14:26:32 | ERROR | zinopara
2021-11-10 at 14:26:32 | ERROR | set()
2021-11-10 at 14:26:32 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-10 at 14:26:32 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 14:26:32 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10a5b26c0>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a5d8810>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10a5d8680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10a57c280>, 'dialect_options': {}}
2021-11-10 at 14:26:32 | CRITICAL | order_view
2021-11-10 at 14:26:32 | CRITICAL | set()
2021-11-10 at 14:26:32 | CRITICAL | PrimaryKeyConstraint()
2021-11-10 at 14:26:32 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-10 at 14:26:34 | INFO | Neptune Start Up ....
2021-11-10 at 14:26:34 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 14:26:34 | INFO | Add Custom query ...
2021-11-10 at 14:26:34 | INFO | Neptune Starting ....
2021-11-10 at 14:26:34 | INFO | API cache does not exists ....
2021-11-10 at 14:26:44 | INFO | Neptune Shutting Down ....
2021-11-10 at 14:26:44 | INFO | API cache does not exists ....
2021-11-10 at 14:26:47 | INFO | Neptune Start Up ....
2021-11-10 at 14:26:47 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 14:26:47 | INFO | Add Custom query ...
2021-11-10 at 14:26:47 | INFO | Neptune Starting ....
2021-11-10 at 14:26:47 | INFO | API cache does not exists ....
2021-11-10 at 14:27:06 | INFO | Neptune Shutting Down ....
2021-11-10 at 14:27:06 | INFO | API cache does not exists ....
2021-11-10 at 14:27:07 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 14:27:07 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 14:27:07 | DEBUG | Generate Schema file from database ...
2021-11-10 at 14:27:07 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 14:27:07 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 14:27:07 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 14:27:07 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10a1da140>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a1e5ae0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a1ee220>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10a201630>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10a1f8ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10a1f8f70>}, 'description': 'customers'}
2021-11-10 at 14:27:08 | INFO | Neptune Start Up ....
2021-11-10 at 14:27:08 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 14:27:08 | INFO | Add Custom query ...
2021-11-10 at 14:27:08 | INFO | Neptune Starting ....
2021-11-10 at 14:27:08 | INFO | API cache does not exists ....
2021-11-10 at 14:28:42 | INFO | Neptune Shutting Down ....
2021-11-10 at 14:28:42 | INFO | API cache does not exists ....
2021-11-10 at 14:28:44 | INFO | Neptune Start Up ....
2021-11-10 at 14:28:44 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 14:28:44 | INFO | Add Custom query ...
2021-11-10 at 14:28:45 | INFO | Neptune Starting ....
2021-11-10 at 14:28:45 | INFO | API cache does not exists ....
2021-11-10 at 14:30:41 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 14:30:41 | INFO | Neptune Shutting Down ....
2021-11-10 at 14:30:41 | INFO | API cache does not exists ....
2021-11-10 at 14:30:41 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-10 at 14:30:41 | DEBUG | Generate Schema file from database ...
2021-11-10 at 14:30:41 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 14:30:41 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 14:30:41 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-10 at 14:30:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1109160c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x110912ae0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x11091e220>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x11092e680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x110927ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x110927f70>}, 'description': 'customers'}
2021-11-10 at 14:30:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x11091e220>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x110927ee0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x110927f70>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1109160c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-10 at 14:30:41 | ERROR | customers
2021-11-10 at 14:30:41 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-10 at 14:30:41 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-10 at 14:30:41 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-10 at 14:30:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x110916d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x11091e2c0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x11091e680>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x11092e040>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x11092e450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x110927b80>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x110927c10>}, 'description': 'employees'}
2021-11-10 at 14:30:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x11091e680>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x11092e040>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x110927b80>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x110927c10>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x110916d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-10 at 14:30:41 | ERROR | employees
2021-11-10 at 14:30:41 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-10 at 14:30:41 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-10 at 14:30:41 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-10 at 14:30:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x11092bac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x11092e7c0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x11092e860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x110936340>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1109363a0>}, 'description': 'items'}
2021-11-10 at 14:30:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x110936340>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1109363a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x11092bac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-10 at 14:30:41 | ERROR | items
2021-11-10 at 14:30:41 | ERROR | set()
2021-11-10 at 14:30:41 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-10 at 14:30:41 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-10 at 14:30:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1109204c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x11091e6d0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x11091eae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1109274c0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x110927550>}, 'description': 'offices'}
2021-11-10 at 14:30:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1109274c0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x110927550>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1109204c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-10 at 14:30:41 | ERROR | offices
2021-11-10 at 14:30:41 | ERROR | set()
2021-11-10 at 14:30:41 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-10 at 14:30:41 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-10 at 14:30:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x11092be40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x11092e950>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x11092ea90>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x11092eea0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x110942770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x11094b9a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x11094ba30>}, 'description': 'orderdetails'}
2021-11-10 at 14:30:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x11092ea90>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x11092eea0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x11094b9a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x11094ba30>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x11092be40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-10 at 14:30:41 | ERROR | orderdetails
2021-11-10 at 14:30:41 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-10 at 14:30:41 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-10 at 14:30:41 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-10 at 14:30:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x11093a0c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x11092eae0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x11092eb30>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x11092ed10>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x110936f70>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x11093e040>}, 'description': 'orders'}
2021-11-10 at 14:30:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x11092eb30>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x110936f70>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x11093e040>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x11093a0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-10 at 14:30:41 | ERROR | orders
2021-11-10 at 14:30:41 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-10 at 14:30:41 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-10 at 14:30:41 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-10 at 14:30:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x11094e6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x110942900>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1109429a0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x110942a90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x110956130>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x110956190>}, 'description': 'payments'}
2021-11-10 at 14:30:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1109429a0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x110956130>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x110956190>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x11094e6c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-10 at 14:30:41 | ERROR | payments
2021-11-10 at 14:30:41 | ERROR | set()
2021-11-10 at 14:30:41 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-10 at 14:30:41 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-10 at 14:30:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x110944240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x110942310>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x110942400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x11093ec70>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x11093ecd0>}, 'description': 'productlines'}
2021-11-10 at 14:30:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x11093ec70>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x11093ecd0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x110944240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-10 at 14:30:41 | ERROR | productlines
2021-11-10 at 14:30:41 | ERROR | set()
2021-11-10 at 14:30:41 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-10 at 14:30:41 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-10 at 14:30:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x11093ad40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x11092eef0>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x11093e460>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x11093e460>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1109422c0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x11093e460>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1109425e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x11094b400>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x11094b490>}, 'description': 'products'}
2021-11-10 at 14:30:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x11093e460>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1109422c0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x11093e460>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x11094b400>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x11094b490>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x11093ad40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x11093e460>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-10 at 14:30:41 | ERROR | products
2021-11-10 at 14:30:41 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-10 at 14:30:41 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x11093e460>, for_update=False), comment='产品代码'))
2021-11-10 at 14:30:41 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-10 at 14:30:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x11094ed40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x110942b30>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x110942b80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x110956400>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x110956460>}}
2021-11-10 at 14:30:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x110956400>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x110956460>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x11094ed40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-10 at 14:30:41 | ERROR | tokens
2021-11-10 at 14:30:41 | ERROR | set()
2021-11-10 at 14:30:41 | ERROR | PrimaryKeyConstraint()
2021-11-10 at 14:30:41 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-10 at 14:30:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x11095a040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x110942cc0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x110942f40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1109569d0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x110956a30>}, 'description': 'zinopara'}
2021-11-10 at 14:30:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1109569d0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x110956a30>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x11095a040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-10 at 14:30:41 | ERROR | zinopara
2021-11-10 at 14:30:41 | ERROR | set()
2021-11-10 at 14:30:41 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-10 at 14:30:41 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-10 at 14:30:41 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x110c336c0>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x110c58720>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x110c58860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x110c66940>, 'dialect_options': {}}
2021-11-10 at 14:30:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x110c66940>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x110c336c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-10 at 14:30:41 | CRITICAL | order_view
2021-11-10 at 14:30:41 | CRITICAL | set()
2021-11-10 at 14:30:41 | CRITICAL | PrimaryKeyConstraint()
2021-11-10 at 14:30:41 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-10 at 14:30:44 | INFO | Neptune Start Up ....
2021-11-10 at 14:30:44 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 14:30:44 | INFO | Add Custom query ...
2021-11-10 at 14:30:44 | INFO | Neptune Starting ....
2021-11-10 at 14:30:44 | INFO | API cache does not exists ....
2021-11-10 at 14:40:35 | INFO | Neptune Shutting Down ....
2021-11-10 at 14:40:35 | INFO | API cache does not exists ....
2021-11-10 at 14:41:03 | INFO | Neptune Start Up ....
2021-11-10 at 14:41:03 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 14:41:03 | INFO | Add Custom query ...
2021-11-10 at 14:41:03 | INFO | Neptune Starting ....
2021-11-10 at 14:41:03 | INFO | API cache does not exists ....
2021-11-10 at 14:43:25 | INFO | Neptune Shutting Down ....
2021-11-10 at 14:43:25 | INFO | API cache does not exists ....
2021-11-10 at 14:43:28 | INFO | Neptune Start Up ....
2021-11-10 at 14:43:28 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 14:43:28 | INFO | Add Custom query ...
2021-11-10 at 14:43:28 | INFO | Neptune Starting ....
2021-11-10 at 14:43:28 | INFO | API cache does not exists ....
2021-11-10 at 14:44:08 | INFO | Neptune Shutting Down ....
2021-11-10 at 14:44:08 | INFO | API cache does not exists ....
2021-11-10 at 14:44:48 | INFO | Neptune Start Up ....
2021-11-10 at 14:44:48 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 14:44:48 | INFO | Add Custom query ...
2021-11-10 at 14:44:48 | INFO | Neptune Starting ....
2021-11-10 at 14:44:48 | INFO | API cache does not exists ....
2021-11-10 at 23:05:24 | INFO | Neptune Start Up ....
2021-11-10 at 23:05:24 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:05:24 | INFO | Add Custom query ...
2021-11-10 at 23:05:24 | INFO | Neptune Starting ....
2021-11-10 at 23:05:24 | INFO | API cache does not exists ....
2021-11-10 at 23:06:31 | DEBUG | Access '/' : run in app_root()
2021-11-10 at 23:19:34 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:19:34 | INFO | API cache does not exists ....
2021-11-10 at 23:19:35 | INFO | Neptune Start Up ....
2021-11-10 at 23:19:35 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:19:35 | INFO | Add Custom query ...
2021-11-10 at 23:19:35 | INFO | Neptune Starting ....
2021-11-10 at 23:19:35 | INFO | API cache does not exists ....
2021-11-10 at 23:19:54 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:19:54 | INFO | API cache does not exists ....
2021-11-10 at 23:19:55 | INFO | Neptune Start Up ....
2021-11-10 at 23:19:55 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:19:55 | INFO | Add Custom query ...
2021-11-10 at 23:19:55 | INFO | Neptune Starting ....
2021-11-10 at 23:19:55 | INFO | API cache does not exists ....
2021-11-10 at 23:20:02 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:20:02 | INFO | API cache does not exists ....
2021-11-10 at 23:20:09 | INFO | Neptune Start Up ....
2021-11-10 at 23:20:09 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:20:09 | INFO | Add Custom query ...
2021-11-10 at 23:20:09 | INFO | Neptune Starting ....
2021-11-10 at 23:20:09 | INFO | API cache does not exists ....
2021-11-10 at 23:20:34 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:20:34 | INFO | API cache does not exists ....
2021-11-10 at 23:20:35 | INFO | Neptune Start Up ....
2021-11-10 at 23:20:35 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:20:35 | INFO | Add Custom query ...
2021-11-10 at 23:20:35 | INFO | Neptune Starting ....
2021-11-10 at 23:20:35 | INFO | API cache does not exists ....
2021-11-10 at 23:21:16 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:21:16 | INFO | API cache does not exists ....
2021-11-10 at 23:21:18 | INFO | Neptune Start Up ....
2021-11-10 at 23:21:18 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:21:18 | INFO | Add Custom query ...
2021-11-10 at 23:21:18 | INFO | Neptune Starting ....
2021-11-10 at 23:21:18 | INFO | API cache does not exists ....
2021-11-10 at 23:21:21 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:21:21 | INFO | API cache does not exists ....
2021-11-10 at 23:21:22 | INFO | Neptune Start Up ....
2021-11-10 at 23:21:22 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:21:22 | INFO | Add Custom query ...
2021-11-10 at 23:21:22 | INFO | Neptune Starting ....
2021-11-10 at 23:21:22 | INFO | API cache does not exists ....
2021-11-10 at 23:23:13 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:23:13 | INFO | API cache does not exists ....
2021-11-10 at 23:23:14 | INFO | Neptune Start Up ....
2021-11-10 at 23:23:14 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:23:14 | INFO | Add Custom query ...
2021-11-10 at 23:23:14 | INFO | Neptune Starting ....
2021-11-10 at 23:23:14 | INFO | API cache does not exists ....
2021-11-10 at 23:23:28 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:23:28 | INFO | API cache does not exists ....
2021-11-10 at 23:23:29 | INFO | Neptune Start Up ....
2021-11-10 at 23:23:29 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:23:29 | INFO | Add Custom query ...
2021-11-10 at 23:23:29 | INFO | Neptune Starting ....
2021-11-10 at 23:23:29 | INFO | API cache does not exists ....
2021-11-10 at 23:23:47 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:23:47 | INFO | API cache does not exists ....
2021-11-10 at 23:23:48 | INFO | Neptune Start Up ....
2021-11-10 at 23:23:48 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:23:48 | INFO | Add Custom query ...
2021-11-10 at 23:23:48 | INFO | Neptune Starting ....
2021-11-10 at 23:23:48 | INFO | API cache does not exists ....
2021-11-10 at 23:24:11 | DEBUG | Access '/' : run in app_root()
2021-11-10 at 23:29:40 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:29:40 | INFO | API cache does not exists ....
2021-11-10 at 23:29:42 | INFO | Neptune Start Up ....
2021-11-10 at 23:29:42 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:29:42 | INFO | Add Custom query ...
2021-11-10 at 23:29:42 | INFO | Neptune Starting ....
2021-11-10 at 23:29:42 | INFO | API cache does not exists ....
2021-11-10 at 23:30:38 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:30:38 | INFO | API cache does not exists ....
2021-11-10 at 23:30:38 | INFO | Neptune Start Up ....
2021-11-10 at 23:30:38 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:30:38 | INFO | Add Custom query ...
2021-11-10 at 23:30:38 | INFO | Neptune Starting ....
2021-11-10 at 23:30:38 | INFO | API cache does not exists ....
2021-11-10 at 23:36:47 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:36:47 | INFO | API cache does not exists ....
2021-11-10 at 23:36:47 | INFO | Neptune Start Up ....
2021-11-10 at 23:36:47 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:36:48 | INFO | Add Custom query ...
2021-11-10 at 23:36:48 | INFO | Neptune Starting ....
2021-11-10 at 23:36:48 | INFO | API cache does not exists ....
2021-11-10 at 23:37:12 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:37:12 | INFO | API cache does not exists ....
2021-11-10 at 23:37:19 | INFO | Neptune Start Up ....
2021-11-10 at 23:37:19 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:37:19 | INFO | Add Custom query ...
2021-11-10 at 23:37:19 | INFO | Neptune Starting ....
2021-11-10 at 23:37:19 | INFO | API cache does not exists ....
2021-11-10 at 23:37:56 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:37:56 | INFO | API cache does not exists ....
2021-11-10 at 23:37:57 | INFO | Neptune Start Up ....
2021-11-10 at 23:37:57 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:37:57 | INFO | Add Custom query ...
2021-11-10 at 23:37:57 | INFO | Neptune Starting ....
2021-11-10 at 23:37:57 | INFO | API cache does not exists ....
2021-11-10 at 23:45:09 | DEBUG | Access '/token' : run in login_for_access_token(), input data username: [admin] and password: [admin]
2021-11-10 at 23:45:09 | DEBUG | authenticate_user with username: [admin] and password: [admin]
2021-11-10 at 23:45:09 | DEBUG | verify_password with hashed_password: [$2b$12$WGpjvAAjcew9hylrN0RdBOuzFPhdpj9OBp4Hqkz3xLUXuBh72u7xu]
2021-11-10 at 23:45:09 | DEBUG | create_access_token with encoded_jwt: [eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTYzNjU2MDkwOX0.Lp2XvKi-WlAWKq42Ljrp4aGdMlceRUbqKYr1syvbnwo]
2021-11-10 at 23:45:14 | DEBUG | Access '/_schema' : run in get_schema()
2021-11-10 at 23:45:14 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-10 at 23:45:16 | DEBUG | Metadata cache save to [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ] 
2021-11-10 at 23:45:16 | DEBUG | Generate Schema file from database ...
2021-11-10 at 23:45:16 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-10 at 23:45:25 | ERROR | Exception get metadata at genschema() object of type 'Column' has no len() 
2021-11-10 at 23:45:25 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-10 at 23:46:39 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:46:39 | INFO | API cache does not exists ....
2021-11-10 at 23:46:40 | INFO | Neptune Start Up ....
2021-11-10 at 23:46:40 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:46:40 | INFO | Add Custom query ...
2021-11-10 at 23:46:40 | INFO | Neptune Starting ....
2021-11-10 at 23:46:40 | INFO | API cache does not exists ....
2021-11-10 at 23:46:56 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:46:56 | INFO | API cache does not exists ....
2021-11-10 at 23:46:57 | INFO | Neptune Start Up ....
2021-11-10 at 23:46:57 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:46:57 | INFO | Add Custom query ...
2021-11-10 at 23:46:57 | INFO | Neptune Starting ....
2021-11-10 at 23:46:57 | INFO | API cache does not exists ....
2021-11-10 at 23:47:12 | INFO | Neptune Shutting Down ....
2021-11-10 at 23:47:12 | INFO | API cache does not exists ....
2021-11-10 at 23:47:14 | INFO | Neptune Start Up ....
2021-11-10 at 23:47:14 | INFO | API prefix is: [ /api/v1 ]
2021-11-10 at 23:47:14 | INFO | Add Custom query ...
2021-11-10 at 23:47:14 | INFO | Neptune Starting ....
2021-11-10 at 23:47:14 | INFO | API cache does not exists ....
2021-11-10 at 23:48:18 | DEBUG | Access '/' : run in app_root()
2021-11-11 at 00:00:13 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 00:00:13 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 00:00:13 | DEBUG | Generate Schema file from database ...
2021-11-11 at 00:00:14 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 00:00:23 | ERROR | Exception get metadata at genschema() object of type 'Column' has no len() 
2021-11-11 at 00:00:23 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 16:18:55 | INFO | Neptune Start Up ....
2021-11-11 at 16:18:55 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:18:55 | INFO | Add Custom query ...
2021-11-11 at 16:18:55 | INFO | Neptune Starting ....
2021-11-11 at 16:18:55 | INFO | API cache does not exists ....
2021-11-11 at 16:34:45 | INFO | Neptune Start Up ....
2021-11-11 at 16:34:45 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:34:45 | INFO | Add Custom query ...
2021-11-11 at 16:34:45 | INFO | Neptune Starting ....
2021-11-11 at 16:34:45 | INFO | API cache does not exists ....
2021-11-11 at 16:38:48 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:38:48 | INFO | API cache does not exists ....
2021-11-11 at 16:38:51 | INFO | Neptune Start Up ....
2021-11-11 at 16:38:51 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:38:51 | INFO | Add Custom query ...
2021-11-11 at 16:38:51 | INFO | Neptune Starting ....
2021-11-11 at 16:38:51 | INFO | API cache does not exists ....
2021-11-11 at 16:40:57 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:40:57 | INFO | API cache does not exists ....
2021-11-11 at 16:40:58 | INFO | Neptune Start Up ....
2021-11-11 at 16:40:58 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:40:58 | INFO | Add Custom query ...
2021-11-11 at 16:40:58 | INFO | Neptune Starting ....
2021-11-11 at 16:40:58 | INFO | API cache does not exists ....
2021-11-11 at 16:42:10 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:42:10 | INFO | API cache does not exists ....
2021-11-11 at 16:42:11 | INFO | Neptune Start Up ....
2021-11-11 at 16:42:11 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:42:11 | INFO | Add Custom query ...
2021-11-11 at 16:42:11 | INFO | Neptune Starting ....
2021-11-11 at 16:42:11 | INFO | API cache does not exists ....
2021-11-11 at 16:43:55 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:43:55 | INFO | API cache does not exists ....
2021-11-11 at 16:43:56 | INFO | Neptune Start Up ....
2021-11-11 at 16:43:56 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:43:56 | INFO | Add Custom query ...
2021-11-11 at 16:43:56 | INFO | Neptune Starting ....
2021-11-11 at 16:43:56 | INFO | API cache does not exists ....
2021-11-11 at 16:45:24 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:45:24 | INFO | API cache does not exists ....
2021-11-11 at 16:45:25 | INFO | Neptune Start Up ....
2021-11-11 at 16:45:25 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:45:25 | INFO | Add Custom query ...
2021-11-11 at 16:45:25 | INFO | Neptune Starting ....
2021-11-11 at 16:45:25 | INFO | API cache does not exists ....
2021-11-11 at 16:45:36 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:45:36 | INFO | API cache does not exists ....
2021-11-11 at 16:45:37 | INFO | Neptune Start Up ....
2021-11-11 at 16:45:37 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:45:37 | INFO | Add Custom query ...
2021-11-11 at 16:45:37 | INFO | Neptune Starting ....
2021-11-11 at 16:45:37 | INFO | API cache does not exists ....
2021-11-11 at 16:46:19 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:46:19 | INFO | API cache does not exists ....
2021-11-11 at 16:46:20 | INFO | Neptune Start Up ....
2021-11-11 at 16:46:20 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:46:20 | INFO | Add Custom query ...
2021-11-11 at 16:46:20 | INFO | Neptune Starting ....
2021-11-11 at 16:46:20 | INFO | API cache does not exists ....
2021-11-11 at 16:46:30 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:46:30 | INFO | API cache does not exists ....
2021-11-11 at 16:46:39 | INFO | Neptune Start Up ....
2021-11-11 at 16:46:39 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:46:39 | INFO | Add Custom query ...
2021-11-11 at 16:46:39 | INFO | Neptune Starting ....
2021-11-11 at 16:46:39 | INFO | API cache does not exists ....
2021-11-11 at 16:47:16 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:47:16 | INFO | API cache does not exists ....
2021-11-11 at 16:47:17 | INFO | Neptune Start Up ....
2021-11-11 at 16:47:17 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:47:17 | INFO | Add Custom query ...
2021-11-11 at 16:47:17 | INFO | Neptune Starting ....
2021-11-11 at 16:47:17 | INFO | API cache does not exists ....
2021-11-11 at 16:47:43 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:47:43 | INFO | API cache does not exists ....
2021-11-11 at 16:47:44 | INFO | Neptune Start Up ....
2021-11-11 at 16:47:44 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:47:44 | INFO | Add Custom query ...
2021-11-11 at 16:47:44 | INFO | Neptune Starting ....
2021-11-11 at 16:47:44 | INFO | API cache does not exists ....
2021-11-11 at 16:48:17 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:48:17 | INFO | API cache does not exists ....
2021-11-11 at 16:48:18 | INFO | Neptune Start Up ....
2021-11-11 at 16:48:18 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:48:18 | INFO | Add Custom query ...
2021-11-11 at 16:48:18 | INFO | Neptune Starting ....
2021-11-11 at 16:48:18 | INFO | API cache does not exists ....
2021-11-11 at 16:49:24 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:49:24 | INFO | API cache does not exists ....
2021-11-11 at 16:49:25 | INFO | Neptune Start Up ....
2021-11-11 at 16:49:25 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:49:25 | INFO | Add Custom query ...
2021-11-11 at 16:49:25 | INFO | Neptune Starting ....
2021-11-11 at 16:49:25 | INFO | API cache does not exists ....
2021-11-11 at 16:52:51 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:52:51 | INFO | API cache does not exists ....
2021-11-11 at 16:52:54 | INFO | Neptune Start Up ....
2021-11-11 at 16:52:54 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:52:54 | INFO | Add Custom query ...
2021-11-11 at 16:52:54 | INFO | Neptune Starting ....
2021-11-11 at 16:52:55 | INFO | API cache does not exists ....
2021-11-11 at 16:53:16 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 16:53:16 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 16:53:16 | DEBUG | Generate Schema file from database ...
2021-11-11 at 16:53:16 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:53:16 | INFO | API cache does not exists ....
2021-11-11 at 16:53:17 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 16:53:17 | INFO | Neptune Start Up ....
2021-11-11 at 16:53:17 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:53:17 | INFO | Add Custom query ...
2021-11-11 at 16:53:17 | INFO | Neptune Starting ....
2021-11-11 at 16:53:17 | INFO | API cache does not exists ....
2021-11-11 at 16:53:26 | ERROR | Exception get metadata at genschema() object of type 'Column' has no len() 
2021-11-11 at 16:53:26 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 16:53:26 | CRITICAL | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:53:26 | CRITICAL | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:53:26 | CRITICAL | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:53:26 | CRITICAL | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:53:26 | CRITICAL | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:53:26 | CRITICAL | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:53:26 | CRITICAL | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:53:26 | CRITICAL | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:53:26 | CRITICAL | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:53:26 | CRITICAL | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:53:26 | CRITICAL | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:53:26 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-11 at 16:53:26 | DEBUG | ****************************************************
2021-11-11 at 16:53:26 | DEBUG | __class__
2021-11-11 at 16:53:26 | DEBUG | __class_getitem__
2021-11-11 at 16:53:26 | DEBUG | __contains__
2021-11-11 at 16:53:26 | DEBUG | __delattr__
2021-11-11 at 16:53:26 | DEBUG | __dict__
2021-11-11 at 16:53:26 | DEBUG | __dir__
2021-11-11 at 16:53:26 | DEBUG | __doc__
2021-11-11 at 16:53:26 | DEBUG | __eq__
2021-11-11 at 16:53:26 | DEBUG | __format__
2021-11-11 at 16:53:26 | DEBUG | __ge__
2021-11-11 at 16:53:26 | DEBUG | __getattribute__
2021-11-11 at 16:53:26 | DEBUG | __getstate__
2021-11-11 at 16:53:26 | DEBUG | __gt__
2021-11-11 at 16:53:26 | DEBUG | __hash__
2021-11-11 at 16:53:26 | DEBUG | __init__
2021-11-11 at 16:53:26 | DEBUG | __init_subclass__
2021-11-11 at 16:53:26 | DEBUG | __le__
2021-11-11 at 16:53:26 | DEBUG | __lt__
2021-11-11 at 16:53:26 | DEBUG | __module__
2021-11-11 at 16:53:26 | DEBUG | __ne__
2021-11-11 at 16:53:26 | DEBUG | __new__
2021-11-11 at 16:53:26 | DEBUG | __reduce__
2021-11-11 at 16:53:26 | DEBUG | __reduce_ex__
2021-11-11 at 16:53:26 | DEBUG | __repr__
2021-11-11 at 16:53:26 | DEBUG | __setattr__
2021-11-11 at 16:53:26 | DEBUG | __setstate__
2021-11-11 at 16:53:26 | DEBUG | __sizeof__
2021-11-11 at 16:53:26 | DEBUG | __str__
2021-11-11 at 16:53:26 | DEBUG | __subclasshook__
2021-11-11 at 16:53:26 | DEBUG | __visit_name__
2021-11-11 at 16:53:26 | DEBUG | __weakref__
2021-11-11 at 16:53:26 | DEBUG | _add_table
2021-11-11 at 16:53:26 | DEBUG | _bind
2021-11-11 at 16:53:26 | DEBUG | _bind_to
2021-11-11 at 16:53:26 | DEBUG | _compiler_dispatch
2021-11-11 at 16:53:26 | DEBUG | _fk_memos
2021-11-11 at 16:53:26 | DEBUG | _init_items
2021-11-11 at 16:53:26 | DEBUG | _original_compiler_dispatch
2021-11-11 at 16:53:26 | DEBUG | _remove_table
2021-11-11 at 16:53:26 | DEBUG | _schema_item_copy
2021-11-11 at 16:53:26 | DEBUG | _schemas
2021-11-11 at 16:53:26 | DEBUG | _sequences
2021-11-11 at 16:53:26 | DEBUG | _set_parent
2021-11-11 at 16:53:26 | DEBUG | _set_parent_with_dispatch
2021-11-11 at 16:53:26 | DEBUG | _use_schema_map
2021-11-11 at 16:53:26 | DEBUG | bind
2021-11-11 at 16:53:26 | DEBUG | clear
2021-11-11 at 16:53:26 | DEBUG | create_all
2021-11-11 at 16:53:26 | DEBUG | create_drop_stringify_dialect
2021-11-11 at 16:53:26 | DEBUG | dispatch
2021-11-11 at 16:53:26 | DEBUG | drop_all
2021-11-11 at 16:53:26 | DEBUG | get_children
2021-11-11 at 16:53:26 | DEBUG | info
2021-11-11 at 16:53:26 | DEBUG | is_bound
2021-11-11 at 16:53:26 | DEBUG | naming_convention
2021-11-11 at 16:53:26 | DEBUG | reflect
2021-11-11 at 16:53:26 | DEBUG | remove
2021-11-11 at 16:53:26 | DEBUG | schema
2021-11-11 at 16:53:26 | DEBUG | sorted_tables
2021-11-11 at 16:53:26 | DEBUG | tables
2021-11-11 at 16:53:26 | DEBUG | ===================================================
2021-11-11 at 16:53:26 | DEBUG | items
2021-11-11 at 16:53:26 | DEBUG | offices
2021-11-11 at 16:53:26 | DEBUG | order_view
2021-11-11 at 16:53:26 | DEBUG | productlines
2021-11-11 at 16:53:26 | DEBUG | tokens
2021-11-11 at 16:53:26 | DEBUG | zinopara
2021-11-11 at 16:53:26 | DEBUG | employees
2021-11-11 at 16:53:26 | DEBUG | products
2021-11-11 at 16:53:26 | DEBUG | customers
2021-11-11 at 16:53:26 | DEBUG | orders
2021-11-11 at 16:53:26 | DEBUG | payments
2021-11-11 at 16:53:26 | DEBUG | orderdetails
2021-11-11 at 16:53:26 | DEBUG | ****************************************************
2021-11-11 at 16:53:26 | DEBUG | /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 16:55:33 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:55:33 | INFO | API cache does not exists ....
2021-11-11 at 16:55:35 | INFO | Neptune Start Up ....
2021-11-11 at 16:55:35 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:55:35 | INFO | Add Custom query ...
2021-11-11 at 16:55:35 | INFO | Neptune Starting ....
2021-11-11 at 16:55:35 | INFO | API cache does not exists ....
2021-11-11 at 16:55:35 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 16:55:35 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 16:55:35 | DEBUG | Generate Schema file from database ...
2021-11-11 at 16:55:36 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 16:55:45 | ERROR | Exception get metadata at genschema() object of type 'Column' has no len() 
2021-11-11 at 16:55:45 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 16:55:45 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:55:45 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:55:45 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:55:45 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:55:45 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:55:45 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:55:45 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:55:45 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:55:45 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:55:45 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:55:45 | SUCCESS | ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
2021-11-11 at 16:55:45 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-11 at 16:55:45 | DEBUG | ****************************************************
2021-11-11 at 16:55:45 | DEBUG | __class__
2021-11-11 at 16:55:45 | DEBUG | __class_getitem__
2021-11-11 at 16:55:45 | DEBUG | __contains__
2021-11-11 at 16:55:45 | DEBUG | __delattr__
2021-11-11 at 16:55:45 | DEBUG | __dict__
2021-11-11 at 16:55:45 | DEBUG | __dir__
2021-11-11 at 16:55:45 | DEBUG | __doc__
2021-11-11 at 16:55:45 | DEBUG | __eq__
2021-11-11 at 16:55:45 | DEBUG | __format__
2021-11-11 at 16:55:45 | DEBUG | __ge__
2021-11-11 at 16:55:45 | DEBUG | __getattribute__
2021-11-11 at 16:55:45 | DEBUG | __getstate__
2021-11-11 at 16:55:45 | DEBUG | __gt__
2021-11-11 at 16:55:45 | DEBUG | __hash__
2021-11-11 at 16:55:45 | DEBUG | __init__
2021-11-11 at 16:55:45 | DEBUG | __init_subclass__
2021-11-11 at 16:55:45 | DEBUG | __le__
2021-11-11 at 16:55:45 | DEBUG | __lt__
2021-11-11 at 16:55:45 | DEBUG | __module__
2021-11-11 at 16:55:45 | DEBUG | __ne__
2021-11-11 at 16:55:45 | DEBUG | __new__
2021-11-11 at 16:55:45 | DEBUG | __reduce__
2021-11-11 at 16:55:45 | DEBUG | __reduce_ex__
2021-11-11 at 16:55:45 | DEBUG | __repr__
2021-11-11 at 16:55:45 | DEBUG | __setattr__
2021-11-11 at 16:55:45 | DEBUG | __setstate__
2021-11-11 at 16:55:45 | DEBUG | __sizeof__
2021-11-11 at 16:55:45 | DEBUG | __str__
2021-11-11 at 16:55:45 | DEBUG | __subclasshook__
2021-11-11 at 16:55:45 | DEBUG | __visit_name__
2021-11-11 at 16:55:45 | DEBUG | __weakref__
2021-11-11 at 16:55:45 | DEBUG | _add_table
2021-11-11 at 16:55:45 | DEBUG | _bind
2021-11-11 at 16:55:45 | DEBUG | _bind_to
2021-11-11 at 16:55:45 | DEBUG | _compiler_dispatch
2021-11-11 at 16:55:45 | DEBUG | _fk_memos
2021-11-11 at 16:55:45 | DEBUG | _init_items
2021-11-11 at 16:55:45 | DEBUG | _original_compiler_dispatch
2021-11-11 at 16:55:45 | DEBUG | _remove_table
2021-11-11 at 16:55:45 | DEBUG | _schema_item_copy
2021-11-11 at 16:55:45 | DEBUG | _schemas
2021-11-11 at 16:55:45 | DEBUG | _sequences
2021-11-11 at 16:55:45 | DEBUG | _set_parent
2021-11-11 at 16:55:45 | DEBUG | _set_parent_with_dispatch
2021-11-11 at 16:55:45 | DEBUG | _use_schema_map
2021-11-11 at 16:55:45 | DEBUG | bind
2021-11-11 at 16:55:45 | DEBUG | clear
2021-11-11 at 16:55:45 | DEBUG | create_all
2021-11-11 at 16:55:45 | DEBUG | create_drop_stringify_dialect
2021-11-11 at 16:55:45 | DEBUG | dispatch
2021-11-11 at 16:55:45 | DEBUG | drop_all
2021-11-11 at 16:55:45 | DEBUG | get_children
2021-11-11 at 16:55:45 | DEBUG | info
2021-11-11 at 16:55:45 | DEBUG | is_bound
2021-11-11 at 16:55:45 | DEBUG | naming_convention
2021-11-11 at 16:55:45 | DEBUG | reflect
2021-11-11 at 16:55:45 | DEBUG | remove
2021-11-11 at 16:55:45 | DEBUG | schema
2021-11-11 at 16:55:45 | DEBUG | sorted_tables
2021-11-11 at 16:55:45 | DEBUG | tables
2021-11-11 at 16:55:45 | DEBUG | ===================================================
2021-11-11 at 16:55:45 | DEBUG | items
2021-11-11 at 16:55:45 | DEBUG | offices
2021-11-11 at 16:55:45 | DEBUG | order_view
2021-11-11 at 16:55:45 | DEBUG | productlines
2021-11-11 at 16:55:45 | DEBUG | tokens
2021-11-11 at 16:55:45 | DEBUG | zinopara
2021-11-11 at 16:55:45 | DEBUG | employees
2021-11-11 at 16:55:45 | DEBUG | products
2021-11-11 at 16:55:45 | DEBUG | customers
2021-11-11 at 16:55:45 | DEBUG | orders
2021-11-11 at 16:55:45 | DEBUG | payments
2021-11-11 at 16:55:45 | DEBUG | orderdetails
2021-11-11 at 16:55:45 | DEBUG | ****************************************************
2021-11-11 at 16:55:45 | DEBUG | /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 16:56:44 | INFO | Neptune Shutting Down ....
2021-11-11 at 16:56:44 | INFO | API cache does not exists ....
2021-11-11 at 16:56:45 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 16:56:45 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 16:56:45 | DEBUG | Generate Schema file from database ...
2021-11-11 at 16:56:46 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 16:56:47 | INFO | Neptune Start Up ....
2021-11-11 at 16:56:47 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 16:56:47 | INFO | Add Custom query ...
2021-11-11 at 16:56:47 | INFO | Neptune Starting ....
2021-11-11 at 16:56:47 | INFO | API cache does not exists ....
2021-11-11 at 16:56:55 | ERROR | Exception get metadata at genschema() object of type 'Column' has no len() 
2021-11-11 at 16:56:55 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 16:56:55 | CRITICAL | Name
2021-11-11 at 16:56:55 | CRITICAL | Type
2021-11-11 at 16:56:55 | CRITICAL | PrimaryKeys
2021-11-11 at 16:56:55 | CRITICAL | Indexes
2021-11-11 at 16:56:55 | CRITICAL | Columns
2021-11-11 at 16:56:55 | CRITICAL | Name
2021-11-11 at 16:56:55 | CRITICAL | Type
2021-11-11 at 16:56:55 | CRITICAL | PrimaryKeys
2021-11-11 at 16:56:55 | CRITICAL | Indexes
2021-11-11 at 16:56:55 | CRITICAL | Columns
2021-11-11 at 16:56:55 | CRITICAL | Name
2021-11-11 at 16:56:55 | CRITICAL | Type
2021-11-11 at 16:56:55 | CRITICAL | PrimaryKeys
2021-11-11 at 16:56:55 | CRITICAL | Indexes
2021-11-11 at 16:56:55 | CRITICAL | Columns
2021-11-11 at 16:56:55 | CRITICAL | Name
2021-11-11 at 16:56:55 | CRITICAL | Type
2021-11-11 at 16:56:55 | CRITICAL | PrimaryKeys
2021-11-11 at 16:56:55 | CRITICAL | Indexes
2021-11-11 at 16:56:55 | CRITICAL | Columns
2021-11-11 at 16:56:55 | CRITICAL | Name
2021-11-11 at 16:56:55 | CRITICAL | Type
2021-11-11 at 16:56:55 | CRITICAL | PrimaryKeys
2021-11-11 at 16:56:55 | CRITICAL | Indexes
2021-11-11 at 16:56:55 | CRITICAL | Columns
2021-11-11 at 16:56:55 | CRITICAL | Name
2021-11-11 at 16:56:55 | CRITICAL | Type
2021-11-11 at 16:56:55 | CRITICAL | PrimaryKeys
2021-11-11 at 16:56:55 | CRITICAL | Indexes
2021-11-11 at 16:56:55 | CRITICAL | Columns
2021-11-11 at 16:56:55 | CRITICAL | Name
2021-11-11 at 16:56:55 | CRITICAL | Type
2021-11-11 at 16:56:55 | CRITICAL | PrimaryKeys
2021-11-11 at 16:56:55 | CRITICAL | Indexes
2021-11-11 at 16:56:55 | CRITICAL | Columns
2021-11-11 at 16:56:55 | CRITICAL | Name
2021-11-11 at 16:56:55 | CRITICAL | Type
2021-11-11 at 16:56:55 | CRITICAL | PrimaryKeys
2021-11-11 at 16:56:55 | CRITICAL | Indexes
2021-11-11 at 16:56:55 | CRITICAL | Columns
2021-11-11 at 16:56:55 | CRITICAL | Name
2021-11-11 at 16:56:55 | CRITICAL | Type
2021-11-11 at 16:56:55 | CRITICAL | PrimaryKeys
2021-11-11 at 16:56:55 | CRITICAL | Indexes
2021-11-11 at 16:56:55 | CRITICAL | Columns
2021-11-11 at 16:56:55 | CRITICAL | Name
2021-11-11 at 16:56:55 | CRITICAL | Type
2021-11-11 at 16:56:55 | CRITICAL | PrimaryKeys
2021-11-11 at 16:56:55 | CRITICAL | Indexes
2021-11-11 at 16:56:55 | CRITICAL | Columns
2021-11-11 at 16:56:55 | CRITICAL | Name
2021-11-11 at 16:56:55 | CRITICAL | Type
2021-11-11 at 16:56:55 | CRITICAL | PrimaryKeys
2021-11-11 at 16:56:55 | CRITICAL | Indexes
2021-11-11 at 16:56:55 | CRITICAL | Columns
2021-11-11 at 16:56:55 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-11 at 16:56:55 | DEBUG | ****************************************************
2021-11-11 at 16:56:55 | DEBUG | __class__
2021-11-11 at 16:56:55 | DEBUG | __class_getitem__
2021-11-11 at 16:56:55 | DEBUG | __contains__
2021-11-11 at 16:56:55 | DEBUG | __delattr__
2021-11-11 at 16:56:55 | DEBUG | __dict__
2021-11-11 at 16:56:55 | DEBUG | __dir__
2021-11-11 at 16:56:55 | DEBUG | __doc__
2021-11-11 at 16:56:55 | DEBUG | __eq__
2021-11-11 at 16:56:55 | DEBUG | __format__
2021-11-11 at 16:56:55 | DEBUG | __ge__
2021-11-11 at 16:56:55 | DEBUG | __getattribute__
2021-11-11 at 16:56:55 | DEBUG | __getstate__
2021-11-11 at 16:56:55 | DEBUG | __gt__
2021-11-11 at 16:56:55 | DEBUG | __hash__
2021-11-11 at 16:56:55 | DEBUG | __init__
2021-11-11 at 16:56:55 | DEBUG | __init_subclass__
2021-11-11 at 16:56:55 | DEBUG | __le__
2021-11-11 at 16:56:55 | DEBUG | __lt__
2021-11-11 at 16:56:55 | DEBUG | __module__
2021-11-11 at 16:56:55 | DEBUG | __ne__
2021-11-11 at 16:56:55 | DEBUG | __new__
2021-11-11 at 16:56:55 | DEBUG | __reduce__
2021-11-11 at 16:56:55 | DEBUG | __reduce_ex__
2021-11-11 at 16:56:55 | DEBUG | __repr__
2021-11-11 at 16:56:55 | DEBUG | __setattr__
2021-11-11 at 16:56:55 | DEBUG | __setstate__
2021-11-11 at 16:56:55 | DEBUG | __sizeof__
2021-11-11 at 16:56:55 | DEBUG | __str__
2021-11-11 at 16:56:55 | DEBUG | __subclasshook__
2021-11-11 at 16:56:55 | DEBUG | __visit_name__
2021-11-11 at 16:56:55 | DEBUG | __weakref__
2021-11-11 at 16:56:55 | DEBUG | _add_table
2021-11-11 at 16:56:55 | DEBUG | _bind
2021-11-11 at 16:56:55 | DEBUG | _bind_to
2021-11-11 at 16:56:55 | DEBUG | _compiler_dispatch
2021-11-11 at 16:56:55 | DEBUG | _fk_memos
2021-11-11 at 16:56:55 | DEBUG | _init_items
2021-11-11 at 16:56:55 | DEBUG | _original_compiler_dispatch
2021-11-11 at 16:56:55 | DEBUG | _remove_table
2021-11-11 at 16:56:55 | DEBUG | _schema_item_copy
2021-11-11 at 16:56:55 | DEBUG | _schemas
2021-11-11 at 16:56:55 | DEBUG | _sequences
2021-11-11 at 16:56:55 | DEBUG | _set_parent
2021-11-11 at 16:56:55 | DEBUG | _set_parent_with_dispatch
2021-11-11 at 16:56:55 | DEBUG | _use_schema_map
2021-11-11 at 16:56:55 | DEBUG | bind
2021-11-11 at 16:56:55 | DEBUG | clear
2021-11-11 at 16:56:55 | DEBUG | create_all
2021-11-11 at 16:56:55 | DEBUG | create_drop_stringify_dialect
2021-11-11 at 16:56:55 | DEBUG | dispatch
2021-11-11 at 16:56:55 | DEBUG | drop_all
2021-11-11 at 16:56:55 | DEBUG | get_children
2021-11-11 at 16:56:55 | DEBUG | info
2021-11-11 at 16:56:55 | DEBUG | is_bound
2021-11-11 at 16:56:55 | DEBUG | naming_convention
2021-11-11 at 16:56:55 | DEBUG | reflect
2021-11-11 at 16:56:55 | DEBUG | remove
2021-11-11 at 16:56:55 | DEBUG | schema
2021-11-11 at 16:56:55 | DEBUG | sorted_tables
2021-11-11 at 16:56:55 | DEBUG | tables
2021-11-11 at 16:56:55 | DEBUG | ===================================================
2021-11-11 at 16:56:55 | DEBUG | items
2021-11-11 at 16:56:55 | DEBUG | offices
2021-11-11 at 16:56:55 | DEBUG | order_view
2021-11-11 at 16:56:55 | DEBUG | productlines
2021-11-11 at 16:56:55 | DEBUG | tokens
2021-11-11 at 16:56:55 | DEBUG | zinopara
2021-11-11 at 16:56:55 | DEBUG | employees
2021-11-11 at 16:56:55 | DEBUG | products
2021-11-11 at 16:56:55 | DEBUG | customers
2021-11-11 at 16:56:55 | DEBUG | orders
2021-11-11 at 16:56:55 | DEBUG | payments
2021-11-11 at 16:56:55 | DEBUG | orderdetails
2021-11-11 at 16:56:55 | DEBUG | ****************************************************
2021-11-11 at 16:56:55 | DEBUG | /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 16:57:39 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 16:57:39 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 16:57:39 | DEBUG | Generate Schema file from database ...
2021-11-11 at 16:57:39 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 16:57:48 | ERROR | Exception get metadata at genschema() object of type 'Column' has no len() 
2021-11-11 at 16:57:48 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 16:57:48 | CRITICAL | Name
2021-11-11 at 16:57:48 | CRITICAL | Type
2021-11-11 at 16:57:48 | CRITICAL | PrimaryKeys
2021-11-11 at 16:57:48 | CRITICAL | Indexes
2021-11-11 at 16:57:48 | CRITICAL | Columns
2021-11-11 at 16:57:48 | CRITICAL | Name
2021-11-11 at 16:57:48 | CRITICAL | Type
2021-11-11 at 16:57:48 | CRITICAL | PrimaryKeys
2021-11-11 at 16:57:48 | CRITICAL | Indexes
2021-11-11 at 16:57:48 | CRITICAL | Columns
2021-11-11 at 16:57:48 | CRITICAL | Name
2021-11-11 at 16:57:48 | CRITICAL | Type
2021-11-11 at 16:57:48 | CRITICAL | PrimaryKeys
2021-11-11 at 16:57:48 | CRITICAL | Indexes
2021-11-11 at 16:57:48 | CRITICAL | Columns
2021-11-11 at 16:57:48 | CRITICAL | Name
2021-11-11 at 16:57:48 | CRITICAL | Type
2021-11-11 at 16:57:48 | CRITICAL | PrimaryKeys
2021-11-11 at 16:57:48 | CRITICAL | Indexes
2021-11-11 at 16:57:48 | CRITICAL | Columns
2021-11-11 at 16:57:48 | CRITICAL | Name
2021-11-11 at 16:57:48 | CRITICAL | Type
2021-11-11 at 16:57:48 | CRITICAL | PrimaryKeys
2021-11-11 at 16:57:48 | CRITICAL | Indexes
2021-11-11 at 16:57:48 | CRITICAL | Columns
2021-11-11 at 16:57:48 | CRITICAL | Name
2021-11-11 at 16:57:48 | CRITICAL | Type
2021-11-11 at 16:57:48 | CRITICAL | PrimaryKeys
2021-11-11 at 16:57:48 | CRITICAL | Indexes
2021-11-11 at 16:57:48 | CRITICAL | Columns
2021-11-11 at 16:57:48 | CRITICAL | Name
2021-11-11 at 16:57:48 | CRITICAL | Type
2021-11-11 at 16:57:48 | CRITICAL | PrimaryKeys
2021-11-11 at 16:57:48 | CRITICAL | Indexes
2021-11-11 at 16:57:48 | CRITICAL | Columns
2021-11-11 at 16:57:48 | CRITICAL | Name
2021-11-11 at 16:57:48 | CRITICAL | Type
2021-11-11 at 16:57:48 | CRITICAL | PrimaryKeys
2021-11-11 at 16:57:48 | CRITICAL | Indexes
2021-11-11 at 16:57:48 | CRITICAL | Columns
2021-11-11 at 16:57:48 | CRITICAL | Name
2021-11-11 at 16:57:48 | CRITICAL | Type
2021-11-11 at 16:57:48 | CRITICAL | PrimaryKeys
2021-11-11 at 16:57:48 | CRITICAL | Indexes
2021-11-11 at 16:57:48 | CRITICAL | Columns
2021-11-11 at 16:57:48 | CRITICAL | Name
2021-11-11 at 16:57:48 | CRITICAL | Type
2021-11-11 at 16:57:48 | CRITICAL | PrimaryKeys
2021-11-11 at 16:57:48 | CRITICAL | Indexes
2021-11-11 at 16:57:48 | CRITICAL | Columns
2021-11-11 at 16:57:48 | CRITICAL | Name
2021-11-11 at 16:57:48 | CRITICAL | Type
2021-11-11 at 16:57:48 | CRITICAL | PrimaryKeys
2021-11-11 at 16:57:48 | CRITICAL | Indexes
2021-11-11 at 16:57:48 | CRITICAL | Columns
2021-11-11 at 16:57:48 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-11 at 16:57:49 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46da4e740>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d9f02c0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d9f09a0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7dc46da04e00>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7dc46da0e070>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7dc46da0e100>}, 'description': 'customers'}
2021-11-11 at 16:57:49 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d9f09a0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7dc46da0e070>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7dc46da0e100>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46da4e740>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 16:57:49 | ERROR | customers
2021-11-11 at 16:57:49 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-11 at 16:57:49 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-11 at 16:57:49 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-11 at 16:57:49 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d9f7440>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d9f0a40>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d9f0e00>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46da047c0>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7dc46da04bd0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9ffcd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d9ffd60>}, 'description': 'employees'}
2021-11-11 at 16:57:49 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d9f0e00>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46da047c0>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9ffcd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d9ffd60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d9f7440>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 16:57:49 | ERROR | employees
2021-11-11 at 16:57:49 | ERROR | {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}
2021-11-11 at 16:57:49 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-11 at 16:57:49 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-11 at 16:57:49 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46da0c1c0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46da04f40>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7dc46d992040>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7dc46da0e490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7dc46da0e4f0>}, 'description': 'items'}
2021-11-11 at 16:57:49 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7dc46da0e490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7dc46da0e4f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46da0c1c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 16:57:49 | ERROR | items
2021-11-11 at 16:57:49 | ERROR | set()
2021-11-11 at 16:57:49 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-11 at 16:57:49 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-11 at 16:57:49 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d9f7b40>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d9f0e50>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7dc46da042c0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9ff610>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d9ff6a0>}, 'description': 'offices'}
2021-11-11 at 16:57:49 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9ff610>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d9ff6a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d9f7b40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 16:57:49 | ERROR | offices
2021-11-11 at 16:57:49 | ERROR | set()
2021-11-11 at 16:57:49 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-11 at 16:57:49 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-11 at 16:57:49 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46da0c540>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d992130>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d992680>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d992270>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7dc46d992ea0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9a4af0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d9a4b80>}, 'description': 'orderdetails'}
2021-11-11 at 16:57:49 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d992680>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d992270>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9a4af0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d9a4b80>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46da0c540>",
    "foreign_keys": "{ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 16:57:49 | ERROR | orderdetails
2021-11-11 at 16:57:49 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-11 at 16:57:49 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-11 at 16:57:49 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-11 at 16:57:49 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46da0c740>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d9922c0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d992310>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7dc46d9924f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7dc46d998100>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d998190>}, 'description': 'orders'}
2021-11-11 at 16:57:49 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d992310>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7dc46d998100>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d998190>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46da0c740>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 16:57:49 | ERROR | orders
2021-11-11 at 16:57:49 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-11 at 16:57:49 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-11 at 16:57:49 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-11 at 16:57:49 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d9a5d40>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d9ad090>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d9ad130>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7dc46d9ad220>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9b1280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d9b12e0>}, 'description': 'payments'}
2021-11-11 at 16:57:49 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d9ad130>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9b1280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d9b12e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d9a5d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 16:57:49 | ERROR | payments
2021-11-11 at 16:57:49 | ERROR | set()
2021-11-11 at 16:57:49 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-11 at 16:57:49 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-11 at 16:57:49 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d9978c0>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d992a90>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7dc46d992b80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7dc46d998dc0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d998e20>}, 'description': 'productlines'}
2021-11-11 at 16:57:49 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7dc46d998dc0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d998e20>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d9978c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 16:57:49 | ERROR | productlines
2021-11-11 at 16:57:49 | ERROR | set()
2021-11-11 at 16:57:49 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-11 at 16:57:49 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-11 at 16:57:49 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d997440>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d9926d0>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7dc46d9985b0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d992a40>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7dc46d9985b0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7dc46d9985b0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7dc46d992d10>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9a4550>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d9a45e0>}, 'description': 'products'}
2021-11-11 at 16:57:49 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d992a40>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7dc46d9985b0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7dc46d9985b0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9a4550>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d9a45e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d997440>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7dc46d9985b0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-11 at 16:57:49 | ERROR | products
2021-11-11 at 16:57:49 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-11 at 16:57:49 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7dc46d9985b0>, for_update=False), comment='产品代码'))
2021-11-11 at 16:57:49 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-11 at 16:57:49 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d9af440>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d9ad2c0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7dc46d9ad310>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9b1550>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d9b15b0>}}
2021-11-11 at 16:57:49 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9b1550>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d9b15b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d9af440>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-11 at 16:57:49 | ERROR | tokens
2021-11-11 at 16:57:49 | ERROR | set()
2021-11-11 at 16:57:49 | ERROR | PrimaryKeyConstraint()
2021-11-11 at 16:57:49 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-11 at 16:57:49 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d9af6c0>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d9ad450>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7dc46d9ad6d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9b1b20>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d9b1b80>}, 'description': 'zinopara'}
2021-11-11 at 16:57:49 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9b1b20>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7dc46d9b1b80>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d9af6c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 16:57:49 | ERROR | zinopara
2021-11-11 at 16:57:49 | ERROR | set()
2021-11-11 at 16:57:49 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-11 at 16:57:49 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-11 at 16:57:49 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d9afd40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7dc46d9ad810>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7dc46d9ad900>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9bc160>, 'dialect_options': {}}
2021-11-11 at 16:57:49 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7dc46d9bc160>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7dc46d9afd40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-11 at 16:57:49 | CRITICAL | order_view
2021-11-11 at 16:57:49 | CRITICAL | set()
2021-11-11 at 16:57:49 | CRITICAL | PrimaryKeyConstraint()
2021-11-11 at 16:57:49 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-11 at 17:22:28 | INFO | Neptune Shutting Down ....
2021-11-11 at 17:22:28 | INFO | API cache does not exists ....
2021-11-11 at 17:22:29 | INFO | Neptune Start Up ....
2021-11-11 at 17:22:29 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 17:22:29 | INFO | Add Custom query ...
2021-11-11 at 17:22:29 | INFO | Neptune Starting ....
2021-11-11 at 17:22:29 | INFO | API cache does not exists ....
2021-11-11 at 17:24:56 | INFO | Neptune Shutting Down ....
2021-11-11 at 17:24:56 | INFO | API cache does not exists ....
2021-11-11 at 17:24:57 | INFO | Neptune Start Up ....
2021-11-11 at 17:24:57 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 17:24:57 | INFO | Add Custom query ...
2021-11-11 at 17:24:57 | INFO | Neptune Starting ....
2021-11-11 at 17:24:57 | INFO | API cache does not exists ....
2021-11-11 at 17:25:41 | INFO | Neptune Shutting Down ....
2021-11-11 at 17:25:41 | INFO | API cache does not exists ....
2021-11-11 at 17:25:42 | INFO | Neptune Start Up ....
2021-11-11 at 17:25:42 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 17:25:42 | INFO | Add Custom query ...
2021-11-11 at 17:25:42 | INFO | Neptune Starting ....
2021-11-11 at 17:25:42 | INFO | API cache does not exists ....
2021-11-11 at 17:38:53 | INFO | Neptune Shutting Down ....
2021-11-11 at 17:38:53 | INFO | API cache does not exists ....
2021-11-11 at 17:38:54 | INFO | Neptune Start Up ....
2021-11-11 at 17:38:54 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 17:38:54 | INFO | Add Custom query ...
2021-11-11 at 17:38:54 | INFO | Neptune Starting ....
2021-11-11 at 17:38:54 | INFO | API cache does not exists ....
2021-11-11 at 17:39:00 | INFO | Neptune Shutting Down ....
2021-11-11 at 17:39:00 | INFO | API cache does not exists ....
2021-11-11 at 17:39:01 | INFO | Neptune Start Up ....
2021-11-11 at 17:39:01 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 17:39:01 | INFO | Add Custom query ...
2021-11-11 at 17:39:01 | INFO | Neptune Starting ....
2021-11-11 at 17:39:01 | INFO | API cache does not exists ....
2021-11-11 at 18:12:18 | INFO | Neptune Shutting Down ....
2021-11-11 at 18:12:18 | INFO | API cache does not exists ....
2021-11-11 at 18:12:20 | INFO | Neptune Start Up ....
2021-11-11 at 18:12:20 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 18:12:20 | INFO | Add Custom query ...
2021-11-11 at 18:12:20 | INFO | Neptune Starting ....
2021-11-11 at 18:12:20 | INFO | API cache does not exists ....
2021-11-11 at 18:12:51 | INFO | Neptune Shutting Down ....
2021-11-11 at 18:12:51 | INFO | API cache does not exists ....
2021-11-11 at 18:12:52 | INFO | Neptune Start Up ....
2021-11-11 at 18:12:52 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 18:12:52 | INFO | Add Custom query ...
2021-11-11 at 18:12:52 | INFO | Neptune Starting ....
2021-11-11 at 18:12:52 | INFO | API cache does not exists ....
2021-11-11 at 18:13:15 | INFO | Neptune Shutting Down ....
2021-11-11 at 18:13:15 | INFO | API cache does not exists ....
2021-11-11 at 18:13:16 | INFO | Neptune Start Up ....
2021-11-11 at 18:13:16 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 18:13:16 | INFO | Add Custom query ...
2021-11-11 at 18:13:16 | INFO | Neptune Starting ....
2021-11-11 at 18:13:16 | INFO | API cache does not exists ....
2021-11-11 at 18:14:07 | INFO | Neptune Shutting Down ....
2021-11-11 at 18:14:07 | INFO | API cache does not exists ....
2021-11-11 at 18:14:08 | INFO | Neptune Start Up ....
2021-11-11 at 18:14:08 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 18:14:08 | INFO | Add Custom query ...
2021-11-11 at 18:14:08 | INFO | Neptune Starting ....
2021-11-11 at 18:14:08 | INFO | API cache does not exists ....
2021-11-11 at 18:14:38 | INFO | Neptune Shutting Down ....
2021-11-11 at 18:14:38 | INFO | API cache does not exists ....
2021-11-11 at 18:14:39 | INFO | Neptune Start Up ....
2021-11-11 at 18:14:39 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 18:14:39 | INFO | Add Custom query ...
2021-11-11 at 18:14:39 | INFO | Neptune Starting ....
2021-11-11 at 18:14:39 | INFO | API cache does not exists ....
2021-11-11 at 18:14:55 | INFO | Neptune Shutting Down ....
2021-11-11 at 18:14:55 | INFO | API cache does not exists ....
2021-11-11 at 18:14:56 | INFO | Neptune Start Up ....
2021-11-11 at 18:14:56 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 18:14:56 | INFO | Add Custom query ...
2021-11-11 at 18:14:56 | INFO | Neptune Starting ....
2021-11-11 at 18:14:56 | INFO | API cache does not exists ....
2021-11-11 at 18:15:34 | INFO | Neptune Shutting Down ....
2021-11-11 at 18:15:34 | INFO | API cache does not exists ....
2021-11-11 at 18:15:36 | INFO | Neptune Start Up ....
2021-11-11 at 18:15:36 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 18:15:36 | INFO | Add Custom query ...
2021-11-11 at 18:15:36 | INFO | Neptune Starting ....
2021-11-11 at 18:15:36 | INFO | API cache does not exists ....
2021-11-11 at 18:16:02 | INFO | Neptune Shutting Down ....
2021-11-11 at 18:16:02 | INFO | API cache does not exists ....
2021-11-11 at 18:16:03 | INFO | Neptune Start Up ....
2021-11-11 at 18:16:03 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 18:16:03 | INFO | Add Custom query ...
2021-11-11 at 18:16:03 | INFO | Neptune Starting ....
2021-11-11 at 18:16:03 | INFO | API cache does not exists ....
2021-11-11 at 18:16:38 | INFO | Neptune Shutting Down ....
2021-11-11 at 18:16:38 | INFO | API cache does not exists ....
2021-11-11 at 18:16:38 | INFO | Neptune Start Up ....
2021-11-11 at 18:16:38 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 18:16:38 | INFO | Add Custom query ...
2021-11-11 at 18:16:38 | INFO | Neptune Starting ....
2021-11-11 at 18:16:38 | INFO | API cache does not exists ....
2021-11-11 at 18:18:58 | INFO | Neptune Shutting Down ....
2021-11-11 at 18:18:58 | INFO | API cache does not exists ....
2021-11-11 at 18:18:59 | INFO | Neptune Start Up ....
2021-11-11 at 18:18:59 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 18:18:59 | INFO | Add Custom query ...
2021-11-11 at 18:18:59 | INFO | Neptune Starting ....
2021-11-11 at 18:18:59 | INFO | API cache does not exists ....
2021-11-11 at 18:19:05 | INFO | Neptune Shutting Down ....
2021-11-11 at 18:19:05 | INFO | API cache does not exists ....
2021-11-11 at 18:19:05 | INFO | Neptune Start Up ....
2021-11-11 at 18:19:05 | INFO | API prefix is: [ /api/v1 ]
2021-11-11 at 18:19:05 | INFO | Add Custom query ...
2021-11-11 at 18:19:05 | INFO | Neptune Starting ....
2021-11-11 at 18:19:05 | INFO | API cache does not exists ....
2021-11-11 at 21:41:51 | SUCCESS | [测试log] hello, world
2021-11-11 at 21:41:51 | INFO | [测试log] hello, world
2021-11-11 at 21:41:51 | DEBUG | [测试log] hello, world
2021-11-11 at 21:41:51 | WARNING | [测试log] hello, world
2021-11-11 at 21:41:51 | ERROR | [测试log] hello, world
2021-11-11 at 21:41:51 | CRITICAL | [测试log] hello, world
2021-11-11 at 21:41:51 | ERROR | [测试log] hello, world
NoneType: None
2021-11-11 at 21:43:56 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 21:43:56 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 21:43:56 | DEBUG | Generate Schema file from database ...
2021-11-11 at 21:43:57 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 21:44:06 | ERROR | Exception get metadata at genschema() object of type 'Column' has no len() 
2021-11-11 at 21:44:06 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 21:44:06 | CRITICAL | Name
2021-11-11 at 21:44:06 | CRITICAL | Type
2021-11-11 at 21:44:06 | CRITICAL | PrimaryKeys
2021-11-11 at 21:44:06 | CRITICAL | Indexes
2021-11-11 at 21:44:06 | CRITICAL | Columns
2021-11-11 at 21:44:06 | CRITICAL | Name
2021-11-11 at 21:44:06 | CRITICAL | Type
2021-11-11 at 21:44:06 | CRITICAL | PrimaryKeys
2021-11-11 at 21:44:06 | CRITICAL | Indexes
2021-11-11 at 21:44:06 | CRITICAL | Columns
2021-11-11 at 21:44:06 | CRITICAL | Name
2021-11-11 at 21:44:06 | CRITICAL | Type
2021-11-11 at 21:44:06 | CRITICAL | PrimaryKeys
2021-11-11 at 21:44:06 | CRITICAL | Indexes
2021-11-11 at 21:44:06 | CRITICAL | Columns
2021-11-11 at 21:44:06 | CRITICAL | Name
2021-11-11 at 21:44:06 | CRITICAL | Type
2021-11-11 at 21:44:06 | CRITICAL | PrimaryKeys
2021-11-11 at 21:44:06 | CRITICAL | Indexes
2021-11-11 at 21:44:06 | CRITICAL | Columns
2021-11-11 at 21:44:06 | CRITICAL | Name
2021-11-11 at 21:44:06 | CRITICAL | Type
2021-11-11 at 21:44:06 | CRITICAL | PrimaryKeys
2021-11-11 at 21:44:06 | CRITICAL | Indexes
2021-11-11 at 21:44:06 | CRITICAL | Columns
2021-11-11 at 21:44:06 | CRITICAL | Name
2021-11-11 at 21:44:06 | CRITICAL | Type
2021-11-11 at 21:44:06 | CRITICAL | PrimaryKeys
2021-11-11 at 21:44:06 | CRITICAL | Indexes
2021-11-11 at 21:44:06 | CRITICAL | Columns
2021-11-11 at 21:44:06 | CRITICAL | Name
2021-11-11 at 21:44:06 | CRITICAL | Type
2021-11-11 at 21:44:06 | CRITICAL | PrimaryKeys
2021-11-11 at 21:44:06 | CRITICAL | Indexes
2021-11-11 at 21:44:06 | CRITICAL | Columns
2021-11-11 at 21:44:06 | CRITICAL | Name
2021-11-11 at 21:44:06 | CRITICAL | Type
2021-11-11 at 21:44:06 | CRITICAL | PrimaryKeys
2021-11-11 at 21:44:06 | CRITICAL | Indexes
2021-11-11 at 21:44:06 | CRITICAL | Columns
2021-11-11 at 21:44:06 | CRITICAL | Name
2021-11-11 at 21:44:06 | CRITICAL | Type
2021-11-11 at 21:44:06 | CRITICAL | PrimaryKeys
2021-11-11 at 21:44:06 | CRITICAL | Indexes
2021-11-11 at 21:44:06 | CRITICAL | Columns
2021-11-11 at 21:44:06 | CRITICAL | Name
2021-11-11 at 21:44:06 | CRITICAL | Type
2021-11-11 at 21:44:06 | CRITICAL | PrimaryKeys
2021-11-11 at 21:44:06 | CRITICAL | Indexes
2021-11-11 at 21:44:06 | CRITICAL | Columns
2021-11-11 at 21:44:06 | CRITICAL | Name
2021-11-11 at 21:44:06 | CRITICAL | Type
2021-11-11 at 21:44:06 | CRITICAL | PrimaryKeys
2021-11-11 at 21:44:06 | CRITICAL | Indexes
2021-11-11 at 21:44:06 | CRITICAL | Columns
2021-11-11 at 21:44:06 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-11 at 21:44:06 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa14e740>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa0ef450>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa0efb30>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7bebfa0fdf90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7bebfa10e070>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa10e100>}, 'description': 'customers'}
2021-11-11 at 21:44:06 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa0efb30>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7bebfa10e070>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa10e100>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa14e740>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 21:44:06 | ERROR | customers
2021-11-11 at 21:44:06 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-11 at 21:44:06 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-11 at 21:44:06 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-11 at 21:44:06 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa0f7440>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa0efbd0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa0eff90>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa0fd950>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7bebfa0fdd60>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7bebfa100cd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa100d60>}, 'description': 'employees'}
2021-11-11 at 21:44:06 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa0eff90>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa0fd950>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7bebfa100cd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa100d60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa0f7440>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 21:44:06 | ERROR | employees
2021-11-11 at 21:44:06 | ERROR | {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}
2021-11-11 at 21:44:06 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-11 at 21:44:06 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-11 at 21:44:06 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa10c1c0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa08f130>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7bebfa08f1d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7bebfa10e490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa10e4f0>}, 'description': 'items'}
2021-11-11 at 21:44:06 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7bebfa10e490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa10e4f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa10c1c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 21:44:06 | ERROR | items
2021-11-11 at 21:44:06 | ERROR | set()
2021-11-11 at 21:44:06 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-11 at 21:44:06 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-11 at 21:44:06 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa0f7b40>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa0fd040>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7bebfa0fd450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7bebfa100610>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa1006a0>}, 'description': 'offices'}
2021-11-11 at 21:44:06 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7bebfa100610>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa1006a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa0f7b40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 21:44:06 | ERROR | offices
2021-11-11 at 21:44:06 | ERROR | set()
2021-11-11 at 21:44:06 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-11 at 21:44:06 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-11 at 21:44:06 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa10c540>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa08f2c0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa08f810>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa08f400>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7bebfa0ab0e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7bebfa0a4af0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa0a4b80>}, 'description': 'orderdetails'}
2021-11-11 at 21:44:06 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa08f810>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa08f400>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7bebfa0a4af0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa0a4b80>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa10c540>",
    "foreign_keys": "{ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 21:44:06 | ERROR | orderdetails
2021-11-11 at 21:44:06 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-11 at 21:44:06 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-11 at 21:44:06 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-11 at 21:44:06 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa10c740>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa08f450>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa08f4a0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7bebfa08f680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7bebfa098100>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa098190>}, 'description': 'orders'}
2021-11-11 at 21:44:06 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa08f4a0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7bebfa098100>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa098190>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa10c740>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 21:44:06 | ERROR | orders
2021-11-11 at 21:44:06 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-11 at 21:44:06 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-11 at 21:44:06 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-11 at 21:44:06 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa0a5d40>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa0ab270>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa0ab310>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7bebfa0ab400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7bebfa0b1280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa0b12e0>}, 'description': 'payments'}
2021-11-11 at 21:44:06 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa0ab310>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7bebfa0b1280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa0b12e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa0a5d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 21:44:06 | ERROR | payments
2021-11-11 at 21:44:06 | ERROR | set()
2021-11-11 at 21:44:06 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-11 at 21:44:06 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-11 at 21:44:06 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa0978c0>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa08fc20>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7bebfa08fd10>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7bebfa098dc0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa098e20>}, 'description': 'productlines'}
2021-11-11 at 21:44:06 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7bebfa098dc0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa098e20>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa0978c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 21:44:06 | ERROR | productlines
2021-11-11 at 21:44:06 | ERROR | set()
2021-11-11 at 21:44:06 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-11 at 21:44:06 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-11 at 21:44:06 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa097440>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa08f860>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7bebfa0985b0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa08fbd0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7bebfa0985b0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7bebfa0985b0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7bebfa08fef0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7bebfa0a4550>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa0a45e0>}, 'description': 'products'}
2021-11-11 at 21:44:06 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa08fbd0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7bebfa0985b0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7bebfa0985b0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7bebfa0a4550>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa0a45e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa097440>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7bebfa0985b0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-11 at 21:44:06 | ERROR | products
2021-11-11 at 21:44:06 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-11 at 21:44:06 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7bebfa0985b0>, for_update=False), comment='产品代码'))
2021-11-11 at 21:44:06 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-11 at 21:44:06 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa0af440>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa0ab4a0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7bebfa0ab4f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7bebfa0b1550>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa0b15b0>}}
2021-11-11 at 21:44:06 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7bebfa0b1550>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa0b15b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa0af440>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-11 at 21:44:06 | ERROR | tokens
2021-11-11 at 21:44:06 | ERROR | set()
2021-11-11 at 21:44:06 | ERROR | PrimaryKeyConstraint()
2021-11-11 at 21:44:06 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-11 at 21:44:06 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa0af6c0>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa0ab630>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7bebfa0ab8b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7bebfa0b1b20>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa0b1b80>}, 'description': 'zinopara'}
2021-11-11 at 21:44:06 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7bebfa0b1b20>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7bebfa0b1b80>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa0af6c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-11 at 21:44:06 | ERROR | zinopara
2021-11-11 at 21:44:06 | ERROR | set()
2021-11-11 at 21:44:06 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-11 at 21:44:06 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-11 at 21:44:06 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa0afd40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7bebfa0ab9f0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7bebfa0abae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7bebfa0bc160>, 'dialect_options': {}}
2021-11-11 at 21:44:06 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7bebfa0bc160>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7bebfa0afd40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-11 at 21:44:06 | CRITICAL | order_view
2021-11-11 at 21:44:06 | CRITICAL | set()
2021-11-11 at 21:44:06 | CRITICAL | PrimaryKeyConstraint()
2021-11-11 at 21:44:06 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-11 at 21:44:31 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 21:44:32 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 21:44:32 | DEBUG | Generate Schema file from database ...
2021-11-11 at 21:44:32 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 21:44:41 | ERROR | Exception get metadata at genschema() object of type 'Column' has no len() 
2021-11-11 at 21:44:41 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 21:58:48 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 22:02:44 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 22:02:44 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 22:02:44 | DEBUG | Generate Schema file from database ...
2021-11-11 at 22:02:45 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 22:02:55 | ERROR | Exception get metadata at genschema() object of type 'Column' has no len() 
2021-11-11 at 22:02:55 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 22:48:52 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 22:48:52 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 22:48:52 | DEBUG | Generate Schema file from database ...
2021-11-11 at 22:51:27 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 22:51:27 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 22:51:27 | DEBUG | Generate Schema file from database ...
2021-11-11 at 22:51:28 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 22:51:37 | ERROR | Exception get metadata at genschema() object of type 'Column' has no len() 
2021-11-11 at 23:29:24 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 23:29:24 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 23:29:24 | DEBUG | Generate Schema file from database ...
2021-11-11 at 23:29:24 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 23:29:33 | ERROR | Exception at gen_schema() object of type 'Column' has no len() 
2021-11-11 at 23:38:14 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 23:38:14 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 23:38:14 | DEBUG | Generate Schema file from database ...
2021-11-11 at 23:38:15 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 23:38:15 | ERROR | Exception at gen_schema() local variable 'jtbl' referenced before assignment 
2021-11-11 at 23:38:15 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 23:39:07 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 23:39:07 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 23:39:07 | DEBUG | Generate Schema file from database ...
2021-11-11 at 23:39:08 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 23:39:17 | ERROR | Exception at gen_schema() object of type 'Column' has no len() 
2021-11-11 at 23:39:17 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 23:40:37 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 23:40:37 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 23:40:37 | DEBUG | Generate Schema file from database ...
2021-11-11 at 23:40:38 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 23:40:39 | DEBUG | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-11 at 23:40:39 | DEBUG | {'name': 'customerName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:39 | DEBUG | {'name': 'contactLastName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:39 | DEBUG | {'name': 'contactFirstName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:39 | DEBUG | {'name': 'phone', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:39 | DEBUG | {'name': 'addressLine1', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:39 | DEBUG | {'name': 'addressLine2', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-11 at 23:40:39 | DEBUG | {'name': 'city', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:39 | DEBUG | {'name': 'state', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-11 at 23:40:39 | DEBUG | {'name': 'postalCode', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': True}
2021-11-11 at 23:40:39 | DEBUG | {'name': 'country', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:39 | DEBUG | {'name': 'salesRepEmployeeNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': True, 'autoincrement': False}
2021-11-11 at 23:40:39 | DEBUG | {'name': 'creditLimit', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': None, 'nullable': True}
2021-11-11 at 23:40:40 | DEBUG | {'name': 'employeeNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-11 at 23:40:40 | DEBUG | {'name': 'lastName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:40 | DEBUG | {'name': 'firstName', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:40 | DEBUG | {'name': 'extension', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:40 | DEBUG | {'name': 'email', 'type': VARCHAR(length=100), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:40 | DEBUG | {'name': 'officeCode', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:40 | DEBUG | {'name': 'reportsTo', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': True, 'autoincrement': False}
2021-11-11 at 23:40:40 | DEBUG | {'name': 'jobTitle', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:41 | DEBUG | {'name': 'id', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': True}
2021-11-11 at 23:40:41 | DEBUG | {'name': 'item_no', 'type': VARCHAR(length=255), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:42 | DEBUG | {'name': 'officeCode', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:42 | DEBUG | {'name': 'city', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:42 | DEBUG | {'name': 'phone', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:42 | DEBUG | {'name': 'addressLine1', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:42 | DEBUG | {'name': 'addressLine2', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-11 at 23:40:42 | DEBUG | {'name': 'state', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': True}
2021-11-11 at 23:40:42 | DEBUG | {'name': 'country', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:42 | DEBUG | {'name': 'postalCode', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:42 | DEBUG | {'name': 'territory', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:42 | DEBUG | {'name': 'orderNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-11 at 23:40:42 | DEBUG | {'name': 'productCode', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:42 | DEBUG | {'name': 'quantityOrdered', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-11 at 23:40:42 | DEBUG | {'name': 'priceEach', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:42 | DEBUG | {'name': 'orderLineNumber', 'type': SMALLINT(display_width=6), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-11 at 23:40:43 | DEBUG | {'name': 'orderNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-11 at 23:40:43 | DEBUG | {'name': 'orderDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:43 | DEBUG | {'name': 'requiredDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:43 | DEBUG | {'name': 'shippedDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': True}
2021-11-11 at 23:40:43 | DEBUG | {'name': 'status', 'type': VARCHAR(length=15), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:43 | DEBUG | {'name': 'comments', 'type': TEXT(), 'default': None, 'comment': None, 'nullable': True}
2021-11-11 at 23:40:43 | DEBUG | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-11 at 23:40:44 | DEBUG | {'name': 'customerNumber', 'type': INTEGER(display_width=11), 'default': None, 'comment': None, 'nullable': False, 'autoincrement': False}
2021-11-11 at 23:40:44 | DEBUG | {'name': 'checkNumber', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:44 | DEBUG | {'name': 'paymentDate', 'type': DATE(), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:44 | DEBUG | {'name': 'amount', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:45 | DEBUG | {'name': 'productLine', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:45 | DEBUG | {'name': 'textDescription', 'type': VARCHAR(length=4000), 'default': None, 'comment': None, 'nullable': True}
2021-11-11 at 23:40:45 | DEBUG | {'name': 'htmlDescription', 'type': MEDIUMTEXT(), 'default': None, 'comment': None, 'nullable': True}
2021-11-11 at 23:40:45 | DEBUG | {'name': 'image', 'type': MEDIUMBLOB(), 'default': None, 'comment': None, 'nullable': True}
2021-11-11 at 23:40:45 | DEBUG | {'name': 'productCode', 'type': VARCHAR(length=15), 'default': "''", 'comment': '产品代码', 'nullable': False}
2021-11-11 at 23:40:45 | DEBUG | {'name': 'productName', 'type': VARCHAR(length=70), 'default': None, 'comment': '产品名称', 'nullable': False}
2021-11-11 at 23:40:45 | DEBUG | {'name': 'productLine', 'type': VARCHAR(length=50), 'default': None, 'comment': '产品线', 'nullable': False}
2021-11-11 at 23:40:45 | DEBUG | {'name': 'productScale', 'type': VARCHAR(length=10), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:45 | DEBUG | {'name': 'productVendor', 'type': VARCHAR(length=50), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:45 | DEBUG | {'name': 'productDescription', 'type': TEXT(), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:45 | DEBUG | {'name': 'quantityInStock', 'type': SMALLINT(display_width=6), 'default': None, 'comment': '库存', 'nullable': False, 'autoincrement': False}
2021-11-11 at 23:40:45 | DEBUG | {'name': 'buyPrice', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': '价格', 'nullable': False}
2021-11-11 at 23:40:45 | DEBUG | {'name': 'MSRP', 'type': DECIMAL(precision=10, scale=2), 'default': None, 'comment': '建议零售价', 'nullable': False}
2021-11-11 at 23:40:46 | DEBUG | {'name': 's', 'type': VARCHAR(length=6), 'default': None, 'comment': None, 'nullable': True}
2021-11-11 at 23:40:47 | DEBUG | {'name': 'id', 'type': VARCHAR(collation='utf8mb4_unicode_ci', length=255), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:47 | DEBUG | {'name': 'type', 'type': VARCHAR(collation='utf8mb4_unicode_ci', length=255), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:47 | DEBUG | {'name': 'creatorid', 'type': VARCHAR(collation='utf8mb4_unicode_ci', length=255), 'default': None, 'comment': None, 'nullable': True}
2021-11-11 at 23:40:47 | DEBUG | {'name': 'json', 'type': TEXT(collation='utf8mb4_unicode_ci'), 'default': None, 'comment': None, 'nullable': False}
2021-11-11 at 23:40:47 | DEBUG | {'name': 'json_updates', 'type': TEXT(collation='utf8mb4_unicode_ci'), 'default': None, 'comment': None, 'nullable': True}
2021-11-11 at 23:40:47 | ERROR | Exception at gen_schema() object of type 'Column' has no len() 
2021-11-11 at 23:40:47 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 23:41:26 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 23:41:26 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 23:41:26 | DEBUG | Generate Schema file from database ...
2021-11-11 at 23:41:27 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 23:41:36 | ERROR | Exception at gen_schema() 'str' object is not callable 
2021-11-11 at 23:41:36 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 23:43:00 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 23:43:00 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 23:43:00 | DEBUG | Generate Schema file from database ...
2021-11-11 at 23:43:01 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 23:43:10 | ERROR | Exception at gen_schema() 'str' object is not callable 
2021-11-11 at 23:43:10 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 23:44:42 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 23:44:42 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 23:44:42 | DEBUG | Generate Schema file from database ...
2021-11-11 at 23:44:43 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 23:44:52 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 23:44:52 | CRITICAL | Name
2021-11-11 at 23:44:52 | CRITICAL | Type
2021-11-11 at 23:44:52 | CRITICAL | PrimaryKeys
2021-11-11 at 23:44:52 | CRITICAL | Indexes
2021-11-11 at 23:44:52 | CRITICAL | Columns
2021-11-11 at 23:44:52 | CRITICAL | Name
2021-11-11 at 23:44:52 | CRITICAL | Type
2021-11-11 at 23:44:52 | CRITICAL | PrimaryKeys
2021-11-11 at 23:44:52 | CRITICAL | Indexes
2021-11-11 at 23:44:52 | CRITICAL | Columns
2021-11-11 at 23:44:52 | CRITICAL | Name
2021-11-11 at 23:44:52 | CRITICAL | Type
2021-11-11 at 23:44:52 | CRITICAL | PrimaryKeys
2021-11-11 at 23:44:52 | CRITICAL | Indexes
2021-11-11 at 23:44:52 | CRITICAL | Columns
2021-11-11 at 23:44:52 | CRITICAL | Name
2021-11-11 at 23:44:52 | CRITICAL | Type
2021-11-11 at 23:44:52 | CRITICAL | PrimaryKeys
2021-11-11 at 23:44:52 | CRITICAL | Indexes
2021-11-11 at 23:44:52 | CRITICAL | Columns
2021-11-11 at 23:44:52 | CRITICAL | Name
2021-11-11 at 23:44:52 | CRITICAL | Type
2021-11-11 at 23:44:52 | CRITICAL | PrimaryKeys
2021-11-11 at 23:44:52 | CRITICAL | Indexes
2021-11-11 at 23:44:52 | CRITICAL | Columns
2021-11-11 at 23:44:52 | CRITICAL | Name
2021-11-11 at 23:44:52 | CRITICAL | Type
2021-11-11 at 23:44:52 | CRITICAL | PrimaryKeys
2021-11-11 at 23:44:52 | CRITICAL | Indexes
2021-11-11 at 23:44:52 | CRITICAL | Columns
2021-11-11 at 23:44:52 | CRITICAL | Name
2021-11-11 at 23:44:52 | CRITICAL | Type
2021-11-11 at 23:44:52 | CRITICAL | PrimaryKeys
2021-11-11 at 23:44:52 | CRITICAL | Indexes
2021-11-11 at 23:44:52 | CRITICAL | Columns
2021-11-11 at 23:44:52 | CRITICAL | Name
2021-11-11 at 23:44:52 | CRITICAL | Type
2021-11-11 at 23:44:52 | CRITICAL | PrimaryKeys
2021-11-11 at 23:44:52 | CRITICAL | Indexes
2021-11-11 at 23:44:52 | CRITICAL | Columns
2021-11-11 at 23:44:52 | CRITICAL | Name
2021-11-11 at 23:44:52 | CRITICAL | Type
2021-11-11 at 23:44:52 | CRITICAL | PrimaryKeys
2021-11-11 at 23:44:52 | CRITICAL | Indexes
2021-11-11 at 23:44:52 | CRITICAL | Columns
2021-11-11 at 23:44:52 | CRITICAL | Name
2021-11-11 at 23:44:52 | CRITICAL | Type
2021-11-11 at 23:44:52 | CRITICAL | PrimaryKeys
2021-11-11 at 23:44:52 | CRITICAL | Indexes
2021-11-11 at 23:44:52 | CRITICAL | Columns
2021-11-11 at 23:44:52 | CRITICAL | Name
2021-11-11 at 23:44:52 | CRITICAL | Type
2021-11-11 at 23:44:52 | CRITICAL | PrimaryKeys
2021-11-11 at 23:44:52 | CRITICAL | Indexes
2021-11-11 at 23:44:52 | CRITICAL | Columns
2021-11-11 at 23:44:52 | CRITICAL | Name
2021-11-11 at 23:44:52 | CRITICAL | Type
2021-11-11 at 23:44:52 | CRITICAL | Columns
2021-11-11 at 23:44:52 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-11 at 23:47:25 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 23:47:25 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 23:47:25 | DEBUG | Generate Schema file from database ...
2021-11-11 at 23:47:26 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 23:47:35 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 23:47:35 | CRITICAL | Name
2021-11-11 at 23:47:35 | CRITICAL | Type
2021-11-11 at 23:47:35 | CRITICAL | PrimaryKeys
2021-11-11 at 23:47:35 | CRITICAL | Indexes
2021-11-11 at 23:47:35 | CRITICAL | Columns
2021-11-11 at 23:47:35 | CRITICAL | Name
2021-11-11 at 23:47:35 | CRITICAL | Type
2021-11-11 at 23:47:35 | CRITICAL | PrimaryKeys
2021-11-11 at 23:47:35 | CRITICAL | Indexes
2021-11-11 at 23:47:35 | CRITICAL | Columns
2021-11-11 at 23:47:35 | CRITICAL | Name
2021-11-11 at 23:47:35 | CRITICAL | Type
2021-11-11 at 23:47:35 | CRITICAL | PrimaryKeys
2021-11-11 at 23:47:35 | CRITICAL | Indexes
2021-11-11 at 23:47:35 | CRITICAL | Columns
2021-11-11 at 23:47:35 | CRITICAL | Name
2021-11-11 at 23:47:35 | CRITICAL | Type
2021-11-11 at 23:47:35 | CRITICAL | PrimaryKeys
2021-11-11 at 23:47:35 | CRITICAL | Indexes
2021-11-11 at 23:47:35 | CRITICAL | Columns
2021-11-11 at 23:47:35 | CRITICAL | Name
2021-11-11 at 23:47:35 | CRITICAL | Type
2021-11-11 at 23:47:35 | CRITICAL | PrimaryKeys
2021-11-11 at 23:47:35 | CRITICAL | Indexes
2021-11-11 at 23:47:35 | CRITICAL | Columns
2021-11-11 at 23:47:35 | CRITICAL | Name
2021-11-11 at 23:47:35 | CRITICAL | Type
2021-11-11 at 23:47:35 | CRITICAL | PrimaryKeys
2021-11-11 at 23:47:35 | CRITICAL | Indexes
2021-11-11 at 23:47:35 | CRITICAL | Columns
2021-11-11 at 23:47:35 | CRITICAL | Name
2021-11-11 at 23:47:35 | CRITICAL | Type
2021-11-11 at 23:47:35 | CRITICAL | PrimaryKeys
2021-11-11 at 23:47:35 | CRITICAL | Indexes
2021-11-11 at 23:47:35 | CRITICAL | Columns
2021-11-11 at 23:47:35 | CRITICAL | Name
2021-11-11 at 23:47:35 | CRITICAL | Type
2021-11-11 at 23:47:35 | CRITICAL | PrimaryKeys
2021-11-11 at 23:47:35 | CRITICAL | Indexes
2021-11-11 at 23:47:35 | CRITICAL | Columns
2021-11-11 at 23:47:35 | CRITICAL | Name
2021-11-11 at 23:47:35 | CRITICAL | Type
2021-11-11 at 23:47:35 | CRITICAL | PrimaryKeys
2021-11-11 at 23:47:35 | CRITICAL | Indexes
2021-11-11 at 23:47:35 | CRITICAL | Columns
2021-11-11 at 23:47:35 | CRITICAL | Name
2021-11-11 at 23:47:35 | CRITICAL | Type
2021-11-11 at 23:47:35 | CRITICAL | PrimaryKeys
2021-11-11 at 23:47:35 | CRITICAL | Indexes
2021-11-11 at 23:47:35 | CRITICAL | Columns
2021-11-11 at 23:47:35 | CRITICAL | Name
2021-11-11 at 23:47:35 | CRITICAL | Type
2021-11-11 at 23:47:35 | CRITICAL | PrimaryKeys
2021-11-11 at 23:47:35 | CRITICAL | Indexes
2021-11-11 at 23:47:35 | CRITICAL | Columns
2021-11-11 at 23:47:35 | CRITICAL | Name
2021-11-11 at 23:47:35 | CRITICAL | Type
2021-11-11 at 23:47:35 | CRITICAL | Columns
2021-11-11 at 23:47:35 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-11 at 23:47:35 | DEBUG | ****************************************************
2021-11-11 at 23:47:35 | DEBUG | __class__
2021-11-11 at 23:47:35 | DEBUG | __class_getitem__
2021-11-11 at 23:47:35 | DEBUG | __contains__
2021-11-11 at 23:47:35 | DEBUG | __delattr__
2021-11-11 at 23:47:35 | DEBUG | __dict__
2021-11-11 at 23:47:35 | DEBUG | __dir__
2021-11-11 at 23:47:35 | DEBUG | __doc__
2021-11-11 at 23:47:35 | DEBUG | __eq__
2021-11-11 at 23:47:35 | DEBUG | __format__
2021-11-11 at 23:47:35 | DEBUG | __ge__
2021-11-11 at 23:47:35 | DEBUG | __getattribute__
2021-11-11 at 23:47:35 | DEBUG | __getstate__
2021-11-11 at 23:47:35 | DEBUG | __gt__
2021-11-11 at 23:47:35 | DEBUG | __hash__
2021-11-11 at 23:47:35 | DEBUG | __init__
2021-11-11 at 23:47:35 | DEBUG | __init_subclass__
2021-11-11 at 23:47:35 | DEBUG | __le__
2021-11-11 at 23:47:35 | DEBUG | __lt__
2021-11-11 at 23:47:35 | DEBUG | __module__
2021-11-11 at 23:47:35 | DEBUG | __ne__
2021-11-11 at 23:47:35 | DEBUG | __new__
2021-11-11 at 23:47:35 | DEBUG | __reduce__
2021-11-11 at 23:47:35 | DEBUG | __reduce_ex__
2021-11-11 at 23:47:35 | DEBUG | __repr__
2021-11-11 at 23:47:35 | DEBUG | __setattr__
2021-11-11 at 23:47:35 | DEBUG | __setstate__
2021-11-11 at 23:47:35 | DEBUG | __sizeof__
2021-11-11 at 23:47:35 | DEBUG | __str__
2021-11-11 at 23:47:35 | DEBUG | __subclasshook__
2021-11-11 at 23:47:35 | DEBUG | __visit_name__
2021-11-11 at 23:47:35 | DEBUG | __weakref__
2021-11-11 at 23:47:35 | DEBUG | _add_table
2021-11-11 at 23:47:35 | DEBUG | _bind
2021-11-11 at 23:47:35 | DEBUG | _bind_to
2021-11-11 at 23:47:35 | DEBUG | _compiler_dispatch
2021-11-11 at 23:47:35 | DEBUG | _fk_memos
2021-11-11 at 23:47:35 | DEBUG | _init_items
2021-11-11 at 23:47:35 | DEBUG | _original_compiler_dispatch
2021-11-11 at 23:47:35 | DEBUG | _remove_table
2021-11-11 at 23:47:35 | DEBUG | _schema_item_copy
2021-11-11 at 23:47:35 | DEBUG | _schemas
2021-11-11 at 23:47:35 | DEBUG | _sequences
2021-11-11 at 23:47:35 | DEBUG | _set_parent
2021-11-11 at 23:47:35 | DEBUG | _set_parent_with_dispatch
2021-11-11 at 23:47:35 | DEBUG | _use_schema_map
2021-11-11 at 23:47:35 | DEBUG | bind
2021-11-11 at 23:47:35 | DEBUG | clear
2021-11-11 at 23:47:35 | DEBUG | create_all
2021-11-11 at 23:47:35 | DEBUG | create_drop_stringify_dialect
2021-11-11 at 23:47:35 | DEBUG | dispatch
2021-11-11 at 23:47:35 | DEBUG | drop_all
2021-11-11 at 23:47:35 | DEBUG | get_children
2021-11-11 at 23:47:35 | DEBUG | info
2021-11-11 at 23:47:35 | DEBUG | is_bound
2021-11-11 at 23:47:35 | DEBUG | naming_convention
2021-11-11 at 23:47:35 | DEBUG | reflect
2021-11-11 at 23:47:35 | DEBUG | remove
2021-11-11 at 23:47:35 | DEBUG | schema
2021-11-11 at 23:47:35 | DEBUG | sorted_tables
2021-11-11 at 23:47:35 | DEBUG | tables
2021-11-11 at 23:47:35 | DEBUG | ===================================================
2021-11-11 at 23:47:35 | DEBUG | items
2021-11-11 at 23:47:35 | DEBUG | offices
2021-11-11 at 23:47:35 | DEBUG | order_view
2021-11-11 at 23:47:35 | DEBUG | productlines
2021-11-11 at 23:47:35 | DEBUG | tokens
2021-11-11 at 23:47:35 | DEBUG | zinopara
2021-11-11 at 23:47:35 | DEBUG | employees
2021-11-11 at 23:47:35 | DEBUG | products
2021-11-11 at 23:47:35 | DEBUG | customers
2021-11-11 at 23:47:35 | DEBUG | orders
2021-11-11 at 23:47:35 | DEBUG | payments
2021-11-11 at 23:47:35 | DEBUG | orderdetails
2021-11-11 at 23:47:35 | DEBUG | ****************************************************
2021-11-11 at 23:47:35 | DEBUG | /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 23:54:45 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 23:54:45 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 23:54:45 | DEBUG | Generate Schema file from database ...
2021-11-11 at 23:54:45 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-11 at 23:54:55 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 23:54:55 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-11 at 23:54:55 | DEBUG | ****************************************************
2021-11-11 at 23:54:55 | DEBUG | __class__
2021-11-11 at 23:54:55 | DEBUG | __class_getitem__
2021-11-11 at 23:54:55 | DEBUG | __contains__
2021-11-11 at 23:54:55 | DEBUG | __delattr__
2021-11-11 at 23:54:55 | DEBUG | __dict__
2021-11-11 at 23:54:55 | DEBUG | __dir__
2021-11-11 at 23:54:55 | DEBUG | __doc__
2021-11-11 at 23:54:55 | DEBUG | __eq__
2021-11-11 at 23:54:55 | DEBUG | __format__
2021-11-11 at 23:54:55 | DEBUG | __ge__
2021-11-11 at 23:54:55 | DEBUG | __getattribute__
2021-11-11 at 23:54:55 | DEBUG | __getstate__
2021-11-11 at 23:54:55 | DEBUG | __gt__
2021-11-11 at 23:54:55 | DEBUG | __hash__
2021-11-11 at 23:54:55 | DEBUG | __init__
2021-11-11 at 23:54:55 | DEBUG | __init_subclass__
2021-11-11 at 23:54:55 | DEBUG | __le__
2021-11-11 at 23:54:55 | DEBUG | __lt__
2021-11-11 at 23:54:55 | DEBUG | __module__
2021-11-11 at 23:54:55 | DEBUG | __ne__
2021-11-11 at 23:54:55 | DEBUG | __new__
2021-11-11 at 23:54:55 | DEBUG | __reduce__
2021-11-11 at 23:54:55 | DEBUG | __reduce_ex__
2021-11-11 at 23:54:55 | DEBUG | __repr__
2021-11-11 at 23:54:55 | DEBUG | __setattr__
2021-11-11 at 23:54:55 | DEBUG | __setstate__
2021-11-11 at 23:54:55 | DEBUG | __sizeof__
2021-11-11 at 23:54:55 | DEBUG | __str__
2021-11-11 at 23:54:55 | DEBUG | __subclasshook__
2021-11-11 at 23:54:55 | DEBUG | __visit_name__
2021-11-11 at 23:54:55 | DEBUG | __weakref__
2021-11-11 at 23:54:55 | DEBUG | _add_table
2021-11-11 at 23:54:55 | DEBUG | _bind
2021-11-11 at 23:54:55 | DEBUG | _bind_to
2021-11-11 at 23:54:55 | DEBUG | _compiler_dispatch
2021-11-11 at 23:54:55 | DEBUG | _fk_memos
2021-11-11 at 23:54:55 | DEBUG | _init_items
2021-11-11 at 23:54:55 | DEBUG | _original_compiler_dispatch
2021-11-11 at 23:54:55 | DEBUG | _remove_table
2021-11-11 at 23:54:55 | DEBUG | _schema_item_copy
2021-11-11 at 23:54:55 | DEBUG | _schemas
2021-11-11 at 23:54:55 | DEBUG | _sequences
2021-11-11 at 23:54:55 | DEBUG | _set_parent
2021-11-11 at 23:54:55 | DEBUG | _set_parent_with_dispatch
2021-11-11 at 23:54:55 | DEBUG | _use_schema_map
2021-11-11 at 23:54:55 | DEBUG | bind
2021-11-11 at 23:54:55 | DEBUG | clear
2021-11-11 at 23:54:55 | DEBUG | create_all
2021-11-11 at 23:54:55 | DEBUG | create_drop_stringify_dialect
2021-11-11 at 23:54:55 | DEBUG | dispatch
2021-11-11 at 23:54:55 | DEBUG | drop_all
2021-11-11 at 23:54:55 | DEBUG | get_children
2021-11-11 at 23:54:55 | DEBUG | info
2021-11-11 at 23:54:55 | DEBUG | is_bound
2021-11-11 at 23:54:55 | DEBUG | naming_convention
2021-11-11 at 23:54:55 | DEBUG | reflect
2021-11-11 at 23:54:55 | DEBUG | remove
2021-11-11 at 23:54:55 | DEBUG | schema
2021-11-11 at 23:54:55 | DEBUG | sorted_tables
2021-11-11 at 23:54:55 | DEBUG | tables
2021-11-11 at 23:54:55 | DEBUG | ===================================================
2021-11-11 at 23:54:55 | DEBUG | items
2021-11-11 at 23:54:55 | DEBUG | offices
2021-11-11 at 23:54:55 | DEBUG | order_view
2021-11-11 at 23:54:55 | DEBUG | productlines
2021-11-11 at 23:54:55 | DEBUG | tokens
2021-11-11 at 23:54:55 | DEBUG | zinopara
2021-11-11 at 23:54:55 | DEBUG | employees
2021-11-11 at 23:54:55 | DEBUG | products
2021-11-11 at 23:54:55 | DEBUG | customers
2021-11-11 at 23:54:55 | DEBUG | orders
2021-11-11 at 23:54:55 | DEBUG | payments
2021-11-11 at 23:54:55 | DEBUG | orderdetails
2021-11-11 at 23:54:55 | DEBUG | ****************************************************
2021-11-11 at 23:54:55 | DEBUG | /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-11 at 23:59:51 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-11 at 23:59:51 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-11 at 23:59:51 | DEBUG | Generate Schema file from database ...
2021-11-11 at 23:59:52 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 00:00:03 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 00:00:03 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 00:02:15 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 00:02:15 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 00:02:15 | DEBUG | Generate Schema file from database ...
2021-11-12 at 00:02:16 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 00:02:25 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 00:02:25 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 00:02:25 | DEBUG | ****************************************************
2021-11-12 at 00:02:25 | DEBUG | __class__
2021-11-12 at 00:02:25 | DEBUG | __class_getitem__
2021-11-12 at 00:02:25 | DEBUG | __contains__
2021-11-12 at 00:02:25 | DEBUG | __delattr__
2021-11-12 at 00:02:25 | DEBUG | __dict__
2021-11-12 at 00:02:25 | DEBUG | __dir__
2021-11-12 at 00:02:25 | DEBUG | __doc__
2021-11-12 at 00:02:25 | DEBUG | __eq__
2021-11-12 at 00:02:25 | DEBUG | __format__
2021-11-12 at 00:02:25 | DEBUG | __ge__
2021-11-12 at 00:02:25 | DEBUG | __getattribute__
2021-11-12 at 00:02:25 | DEBUG | __getstate__
2021-11-12 at 00:02:25 | DEBUG | __gt__
2021-11-12 at 00:02:25 | DEBUG | __hash__
2021-11-12 at 00:02:25 | DEBUG | __init__
2021-11-12 at 00:02:25 | DEBUG | __init_subclass__
2021-11-12 at 00:02:25 | DEBUG | __le__
2021-11-12 at 00:02:25 | DEBUG | __lt__
2021-11-12 at 00:02:25 | DEBUG | __module__
2021-11-12 at 00:02:25 | DEBUG | __ne__
2021-11-12 at 00:02:25 | DEBUG | __new__
2021-11-12 at 00:02:25 | DEBUG | __reduce__
2021-11-12 at 00:02:25 | DEBUG | __reduce_ex__
2021-11-12 at 00:02:25 | DEBUG | __repr__
2021-11-12 at 00:02:25 | DEBUG | __setattr__
2021-11-12 at 00:02:25 | DEBUG | __setstate__
2021-11-12 at 00:02:25 | DEBUG | __sizeof__
2021-11-12 at 00:02:25 | DEBUG | __str__
2021-11-12 at 00:02:25 | DEBUG | __subclasshook__
2021-11-12 at 00:02:25 | DEBUG | __visit_name__
2021-11-12 at 00:02:25 | DEBUG | __weakref__
2021-11-12 at 00:02:25 | DEBUG | _add_table
2021-11-12 at 00:02:25 | DEBUG | _bind
2021-11-12 at 00:02:25 | DEBUG | _bind_to
2021-11-12 at 00:02:25 | DEBUG | _compiler_dispatch
2021-11-12 at 00:02:25 | DEBUG | _fk_memos
2021-11-12 at 00:02:25 | DEBUG | _init_items
2021-11-12 at 00:02:25 | DEBUG | _original_compiler_dispatch
2021-11-12 at 00:02:25 | DEBUG | _remove_table
2021-11-12 at 00:02:25 | DEBUG | _schema_item_copy
2021-11-12 at 00:02:25 | DEBUG | _schemas
2021-11-12 at 00:02:25 | DEBUG | _sequences
2021-11-12 at 00:02:25 | DEBUG | _set_parent
2021-11-12 at 00:02:25 | DEBUG | _set_parent_with_dispatch
2021-11-12 at 00:02:25 | DEBUG | _use_schema_map
2021-11-12 at 00:02:25 | DEBUG | bind
2021-11-12 at 00:02:25 | DEBUG | clear
2021-11-12 at 00:02:25 | DEBUG | create_all
2021-11-12 at 00:02:25 | DEBUG | create_drop_stringify_dialect
2021-11-12 at 00:02:25 | DEBUG | dispatch
2021-11-12 at 00:02:25 | DEBUG | drop_all
2021-11-12 at 00:02:25 | DEBUG | get_children
2021-11-12 at 00:02:25 | DEBUG | info
2021-11-12 at 00:02:25 | DEBUG | is_bound
2021-11-12 at 00:02:25 | DEBUG | naming_convention
2021-11-12 at 00:02:25 | DEBUG | reflect
2021-11-12 at 00:02:25 | DEBUG | remove
2021-11-12 at 00:02:25 | DEBUG | schema
2021-11-12 at 00:02:25 | DEBUG | sorted_tables
2021-11-12 at 00:02:25 | DEBUG | tables
2021-11-12 at 00:02:25 | DEBUG | ===================================================
2021-11-12 at 00:02:25 | DEBUG | items
2021-11-12 at 00:02:25 | DEBUG | offices
2021-11-12 at 00:02:25 | DEBUG | order_view
2021-11-12 at 00:02:25 | DEBUG | productlines
2021-11-12 at 00:02:25 | DEBUG | tokens
2021-11-12 at 00:02:25 | DEBUG | zinopara
2021-11-12 at 00:02:25 | DEBUG | employees
2021-11-12 at 00:02:25 | DEBUG | products
2021-11-12 at 00:02:25 | DEBUG | customers
2021-11-12 at 00:02:25 | DEBUG | orders
2021-11-12 at 00:02:25 | DEBUG | payments
2021-11-12 at 00:02:25 | DEBUG | orderdetails
2021-11-12 at 00:02:25 | DEBUG | ****************************************************
2021-11-12 at 00:03:19 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 00:03:19 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 00:03:19 | DEBUG | Generate Schema file from database ...
2021-11-12 at 00:03:19 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 00:03:29 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 00:03:29 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 00:03:29 | DEBUG | ****************************************************
2021-11-12 at 00:03:29 | DEBUG | __class__
2021-11-12 at 00:03:29 | DEBUG | __class_getitem__
2021-11-12 at 00:03:29 | DEBUG | __contains__
2021-11-12 at 00:03:29 | DEBUG | __delattr__
2021-11-12 at 00:03:29 | DEBUG | __dict__
2021-11-12 at 00:03:29 | DEBUG | __dir__
2021-11-12 at 00:03:29 | DEBUG | __doc__
2021-11-12 at 00:03:29 | DEBUG | __eq__
2021-11-12 at 00:03:29 | DEBUG | __format__
2021-11-12 at 00:03:29 | DEBUG | __ge__
2021-11-12 at 00:03:29 | DEBUG | __getattribute__
2021-11-12 at 00:03:29 | DEBUG | __getstate__
2021-11-12 at 00:03:29 | DEBUG | __gt__
2021-11-12 at 00:03:29 | DEBUG | __hash__
2021-11-12 at 00:03:29 | DEBUG | __init__
2021-11-12 at 00:03:29 | DEBUG | __init_subclass__
2021-11-12 at 00:03:29 | DEBUG | __le__
2021-11-12 at 00:03:29 | DEBUG | __lt__
2021-11-12 at 00:03:29 | DEBUG | __module__
2021-11-12 at 00:03:29 | DEBUG | __ne__
2021-11-12 at 00:03:29 | DEBUG | __new__
2021-11-12 at 00:03:29 | DEBUG | __reduce__
2021-11-12 at 00:03:29 | DEBUG | __reduce_ex__
2021-11-12 at 00:03:29 | DEBUG | __repr__
2021-11-12 at 00:03:29 | DEBUG | __setattr__
2021-11-12 at 00:03:29 | DEBUG | __setstate__
2021-11-12 at 00:03:29 | DEBUG | __sizeof__
2021-11-12 at 00:03:29 | DEBUG | __str__
2021-11-12 at 00:03:29 | DEBUG | __subclasshook__
2021-11-12 at 00:03:29 | DEBUG | __visit_name__
2021-11-12 at 00:03:29 | DEBUG | __weakref__
2021-11-12 at 00:03:29 | DEBUG | _add_table
2021-11-12 at 00:03:29 | DEBUG | _bind
2021-11-12 at 00:03:29 | DEBUG | _bind_to
2021-11-12 at 00:03:29 | DEBUG | _compiler_dispatch
2021-11-12 at 00:03:29 | DEBUG | _fk_memos
2021-11-12 at 00:03:29 | DEBUG | _init_items
2021-11-12 at 00:03:29 | DEBUG | _original_compiler_dispatch
2021-11-12 at 00:03:29 | DEBUG | _remove_table
2021-11-12 at 00:03:29 | DEBUG | _schema_item_copy
2021-11-12 at 00:03:29 | DEBUG | _schemas
2021-11-12 at 00:03:29 | DEBUG | _sequences
2021-11-12 at 00:03:29 | DEBUG | _set_parent
2021-11-12 at 00:03:29 | DEBUG | _set_parent_with_dispatch
2021-11-12 at 00:03:29 | DEBUG | _use_schema_map
2021-11-12 at 00:03:29 | DEBUG | bind
2021-11-12 at 00:03:29 | DEBUG | clear
2021-11-12 at 00:03:29 | DEBUG | create_all
2021-11-12 at 00:03:29 | DEBUG | create_drop_stringify_dialect
2021-11-12 at 00:03:29 | DEBUG | dispatch
2021-11-12 at 00:03:29 | DEBUG | drop_all
2021-11-12 at 00:03:29 | DEBUG | get_children
2021-11-12 at 00:03:29 | DEBUG | info
2021-11-12 at 00:03:29 | DEBUG | is_bound
2021-11-12 at 00:03:29 | DEBUG | naming_convention
2021-11-12 at 00:03:29 | DEBUG | reflect
2021-11-12 at 00:03:29 | DEBUG | remove
2021-11-12 at 00:03:29 | DEBUG | schema
2021-11-12 at 00:03:29 | DEBUG | sorted_tables
2021-11-12 at 00:03:29 | DEBUG | tables
2021-11-12 at 00:03:29 | DEBUG | ===================================================
2021-11-12 at 00:03:29 | DEBUG | items
2021-11-12 at 00:03:29 | DEBUG | offices
2021-11-12 at 00:03:29 | DEBUG | order_view
2021-11-12 at 00:03:29 | DEBUG | productlines
2021-11-12 at 00:03:29 | DEBUG | tokens
2021-11-12 at 00:03:29 | DEBUG | zinopara
2021-11-12 at 00:03:29 | DEBUG | employees
2021-11-12 at 00:03:29 | DEBUG | products
2021-11-12 at 00:03:29 | DEBUG | customers
2021-11-12 at 00:03:29 | DEBUG | orders
2021-11-12 at 00:03:29 | DEBUG | payments
2021-11-12 at 00:03:29 | DEBUG | orderdetails
2021-11-12 at 00:03:29 | DEBUG | ****************************************************
2021-11-12 at 00:03:29 | DEBUG | /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:15:39 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 10:15:39 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 10:15:39 | DEBUG | Generate Schema file from database ...
2021-11-12 at 10:15:40 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 10:15:50 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:15:50 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 10:15:50 | DEBUG | ****************************************************
2021-11-12 at 10:15:50 | DEBUG | __class__
2021-11-12 at 10:15:50 | DEBUG | __class_getitem__
2021-11-12 at 10:15:50 | DEBUG | __contains__
2021-11-12 at 10:15:50 | DEBUG | __delattr__
2021-11-12 at 10:15:50 | DEBUG | __dict__
2021-11-12 at 10:15:50 | DEBUG | __dir__
2021-11-12 at 10:15:50 | DEBUG | __doc__
2021-11-12 at 10:15:50 | DEBUG | __eq__
2021-11-12 at 10:15:50 | DEBUG | __format__
2021-11-12 at 10:15:50 | DEBUG | __ge__
2021-11-12 at 10:15:50 | DEBUG | __getattribute__
2021-11-12 at 10:15:50 | DEBUG | __getstate__
2021-11-12 at 10:15:50 | DEBUG | __gt__
2021-11-12 at 10:15:50 | DEBUG | __hash__
2021-11-12 at 10:15:50 | DEBUG | __init__
2021-11-12 at 10:15:50 | DEBUG | __init_subclass__
2021-11-12 at 10:15:50 | DEBUG | __le__
2021-11-12 at 10:15:50 | DEBUG | __lt__
2021-11-12 at 10:15:50 | DEBUG | __module__
2021-11-12 at 10:15:50 | DEBUG | __ne__
2021-11-12 at 10:15:50 | DEBUG | __new__
2021-11-12 at 10:15:50 | DEBUG | __reduce__
2021-11-12 at 10:15:50 | DEBUG | __reduce_ex__
2021-11-12 at 10:15:50 | DEBUG | __repr__
2021-11-12 at 10:15:50 | DEBUG | __setattr__
2021-11-12 at 10:15:50 | DEBUG | __setstate__
2021-11-12 at 10:15:50 | DEBUG | __sizeof__
2021-11-12 at 10:15:50 | DEBUG | __str__
2021-11-12 at 10:15:50 | DEBUG | __subclasshook__
2021-11-12 at 10:15:50 | DEBUG | __visit_name__
2021-11-12 at 10:15:50 | DEBUG | __weakref__
2021-11-12 at 10:15:50 | DEBUG | _add_table
2021-11-12 at 10:15:50 | DEBUG | _bind
2021-11-12 at 10:15:50 | DEBUG | _bind_to
2021-11-12 at 10:15:50 | DEBUG | _compiler_dispatch
2021-11-12 at 10:15:50 | DEBUG | _fk_memos
2021-11-12 at 10:15:50 | DEBUG | _init_items
2021-11-12 at 10:15:50 | DEBUG | _original_compiler_dispatch
2021-11-12 at 10:15:50 | DEBUG | _remove_table
2021-11-12 at 10:15:50 | DEBUG | _schema_item_copy
2021-11-12 at 10:15:50 | DEBUG | _schemas
2021-11-12 at 10:15:50 | DEBUG | _sequences
2021-11-12 at 10:15:50 | DEBUG | _set_parent
2021-11-12 at 10:15:50 | DEBUG | _set_parent_with_dispatch
2021-11-12 at 10:15:50 | DEBUG | _use_schema_map
2021-11-12 at 10:15:50 | DEBUG | bind
2021-11-12 at 10:15:50 | DEBUG | clear
2021-11-12 at 10:15:50 | DEBUG | create_all
2021-11-12 at 10:15:50 | DEBUG | create_drop_stringify_dialect
2021-11-12 at 10:15:50 | DEBUG | dispatch
2021-11-12 at 10:15:50 | DEBUG | drop_all
2021-11-12 at 10:15:50 | DEBUG | get_children
2021-11-12 at 10:15:50 | DEBUG | info
2021-11-12 at 10:15:50 | DEBUG | is_bound
2021-11-12 at 10:15:50 | DEBUG | naming_convention
2021-11-12 at 10:15:50 | DEBUG | reflect
2021-11-12 at 10:15:50 | DEBUG | remove
2021-11-12 at 10:15:50 | DEBUG | schema
2021-11-12 at 10:15:50 | DEBUG | sorted_tables
2021-11-12 at 10:15:50 | DEBUG | tables
2021-11-12 at 10:15:50 | DEBUG | ===================================================
2021-11-12 at 10:15:50 | DEBUG | items
2021-11-12 at 10:15:50 | DEBUG | offices
2021-11-12 at 10:15:50 | DEBUG | order_view
2021-11-12 at 10:15:50 | DEBUG | productlines
2021-11-12 at 10:15:50 | DEBUG | tokens
2021-11-12 at 10:15:50 | DEBUG | zinopara
2021-11-12 at 10:15:50 | DEBUG | employees
2021-11-12 at 10:15:50 | DEBUG | products
2021-11-12 at 10:15:50 | DEBUG | customers
2021-11-12 at 10:15:50 | DEBUG | orders
2021-11-12 at 10:15:50 | DEBUG | payments
2021-11-12 at 10:15:50 | DEBUG | orderdetails
2021-11-12 at 10:15:50 | DEBUG | ****************************************************
2021-11-12 at 10:15:50 | DEBUG | /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:28:25 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 10:28:25 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 10:28:25 | DEBUG | Generate Schema file from database ...
2021-11-12 at 10:28:26 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 10:28:36 | ERROR | Exception at gen_schema() Operator 'getitem' is not supported on this expression 
2021-11-12 at 10:28:36 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:28:36 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 10:28:36 | DEBUG | ****************************************************
2021-11-12 at 10:28:36 | DEBUG | __class__
2021-11-12 at 10:28:36 | DEBUG | __class_getitem__
2021-11-12 at 10:28:36 | DEBUG | __contains__
2021-11-12 at 10:28:36 | DEBUG | __delattr__
2021-11-12 at 10:28:36 | DEBUG | __dict__
2021-11-12 at 10:28:36 | DEBUG | __dir__
2021-11-12 at 10:28:36 | DEBUG | __doc__
2021-11-12 at 10:28:36 | DEBUG | __eq__
2021-11-12 at 10:28:36 | DEBUG | __format__
2021-11-12 at 10:28:36 | DEBUG | __ge__
2021-11-12 at 10:28:36 | DEBUG | __getattribute__
2021-11-12 at 10:28:36 | DEBUG | __getstate__
2021-11-12 at 10:28:36 | DEBUG | __gt__
2021-11-12 at 10:28:36 | DEBUG | __hash__
2021-11-12 at 10:28:36 | DEBUG | __init__
2021-11-12 at 10:28:36 | DEBUG | __init_subclass__
2021-11-12 at 10:28:36 | DEBUG | __le__
2021-11-12 at 10:28:36 | DEBUG | __lt__
2021-11-12 at 10:28:36 | DEBUG | __module__
2021-11-12 at 10:28:36 | DEBUG | __ne__
2021-11-12 at 10:28:36 | DEBUG | __new__
2021-11-12 at 10:28:36 | DEBUG | __reduce__
2021-11-12 at 10:28:36 | DEBUG | __reduce_ex__
2021-11-12 at 10:28:36 | DEBUG | __repr__
2021-11-12 at 10:28:36 | DEBUG | __setattr__
2021-11-12 at 10:28:36 | DEBUG | __setstate__
2021-11-12 at 10:28:36 | DEBUG | __sizeof__
2021-11-12 at 10:28:36 | DEBUG | __str__
2021-11-12 at 10:28:36 | DEBUG | __subclasshook__
2021-11-12 at 10:28:36 | DEBUG | __visit_name__
2021-11-12 at 10:28:36 | DEBUG | __weakref__
2021-11-12 at 10:28:36 | DEBUG | _add_table
2021-11-12 at 10:28:36 | DEBUG | _bind
2021-11-12 at 10:28:36 | DEBUG | _bind_to
2021-11-12 at 10:28:36 | DEBUG | _compiler_dispatch
2021-11-12 at 10:28:36 | DEBUG | _fk_memos
2021-11-12 at 10:28:36 | DEBUG | _init_items
2021-11-12 at 10:28:36 | DEBUG | _original_compiler_dispatch
2021-11-12 at 10:28:36 | DEBUG | _remove_table
2021-11-12 at 10:28:36 | DEBUG | _schema_item_copy
2021-11-12 at 10:28:36 | DEBUG | _schemas
2021-11-12 at 10:28:36 | DEBUG | _sequences
2021-11-12 at 10:28:36 | DEBUG | _set_parent
2021-11-12 at 10:28:36 | DEBUG | _set_parent_with_dispatch
2021-11-12 at 10:28:36 | DEBUG | _use_schema_map
2021-11-12 at 10:28:36 | DEBUG | bind
2021-11-12 at 10:28:36 | DEBUG | clear
2021-11-12 at 10:28:36 | DEBUG | create_all
2021-11-12 at 10:28:36 | DEBUG | create_drop_stringify_dialect
2021-11-12 at 10:28:36 | DEBUG | dispatch
2021-11-12 at 10:28:36 | DEBUG | drop_all
2021-11-12 at 10:28:36 | DEBUG | get_children
2021-11-12 at 10:28:36 | DEBUG | info
2021-11-12 at 10:28:36 | DEBUG | is_bound
2021-11-12 at 10:28:36 | DEBUG | naming_convention
2021-11-12 at 10:28:36 | DEBUG | reflect
2021-11-12 at 10:28:36 | DEBUG | remove
2021-11-12 at 10:28:36 | DEBUG | schema
2021-11-12 at 10:28:36 | DEBUG | sorted_tables
2021-11-12 at 10:28:36 | DEBUG | tables
2021-11-12 at 10:28:36 | DEBUG | ===================================================
2021-11-12 at 10:28:36 | DEBUG | items
2021-11-12 at 10:28:36 | DEBUG | offices
2021-11-12 at 10:28:36 | DEBUG | order_view
2021-11-12 at 10:28:36 | DEBUG | productlines
2021-11-12 at 10:28:36 | DEBUG | tokens
2021-11-12 at 10:28:36 | DEBUG | zinopara
2021-11-12 at 10:28:36 | DEBUG | employees
2021-11-12 at 10:28:36 | DEBUG | products
2021-11-12 at 10:28:36 | DEBUG | customers
2021-11-12 at 10:28:36 | DEBUG | orders
2021-11-12 at 10:28:36 | DEBUG | payments
2021-11-12 at 10:28:36 | DEBUG | orderdetails
2021-11-12 at 10:28:36 | DEBUG | ****************************************************
2021-11-12 at 10:28:36 | DEBUG | /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:30:37 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 10:30:38 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 10:30:38 | DEBUG | Generate Schema file from database ...
2021-11-12 at 10:30:38 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 10:30:48 | ERROR | Exception at gen_schema() Operator 'getitem' is not supported on this expression 
2021-11-12 at 10:30:48 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:30:48 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 10:30:48 | DEBUG | ****************************************************
2021-11-12 at 10:30:48 | DEBUG | __class__
2021-11-12 at 10:30:48 | DEBUG | __class_getitem__
2021-11-12 at 10:30:48 | DEBUG | __contains__
2021-11-12 at 10:30:48 | DEBUG | __delattr__
2021-11-12 at 10:30:48 | DEBUG | __dict__
2021-11-12 at 10:30:48 | DEBUG | __dir__
2021-11-12 at 10:30:48 | DEBUG | __doc__
2021-11-12 at 10:30:48 | DEBUG | __eq__
2021-11-12 at 10:30:48 | DEBUG | __format__
2021-11-12 at 10:30:48 | DEBUG | __ge__
2021-11-12 at 10:30:48 | DEBUG | __getattribute__
2021-11-12 at 10:30:48 | DEBUG | __getstate__
2021-11-12 at 10:30:48 | DEBUG | __gt__
2021-11-12 at 10:30:48 | DEBUG | __hash__
2021-11-12 at 10:30:48 | DEBUG | __init__
2021-11-12 at 10:30:48 | DEBUG | __init_subclass__
2021-11-12 at 10:30:48 | DEBUG | __le__
2021-11-12 at 10:30:48 | DEBUG | __lt__
2021-11-12 at 10:30:48 | DEBUG | __module__
2021-11-12 at 10:30:48 | DEBUG | __ne__
2021-11-12 at 10:30:48 | DEBUG | __new__
2021-11-12 at 10:30:48 | DEBUG | __reduce__
2021-11-12 at 10:30:48 | DEBUG | __reduce_ex__
2021-11-12 at 10:30:48 | DEBUG | __repr__
2021-11-12 at 10:30:48 | DEBUG | __setattr__
2021-11-12 at 10:30:48 | DEBUG | __setstate__
2021-11-12 at 10:30:48 | DEBUG | __sizeof__
2021-11-12 at 10:30:48 | DEBUG | __str__
2021-11-12 at 10:30:48 | DEBUG | __subclasshook__
2021-11-12 at 10:30:48 | DEBUG | __visit_name__
2021-11-12 at 10:30:48 | DEBUG | __weakref__
2021-11-12 at 10:30:48 | DEBUG | _add_table
2021-11-12 at 10:30:48 | DEBUG | _bind
2021-11-12 at 10:30:48 | DEBUG | _bind_to
2021-11-12 at 10:30:48 | DEBUG | _compiler_dispatch
2021-11-12 at 10:30:48 | DEBUG | _fk_memos
2021-11-12 at 10:30:48 | DEBUG | _init_items
2021-11-12 at 10:30:48 | DEBUG | _original_compiler_dispatch
2021-11-12 at 10:30:48 | DEBUG | _remove_table
2021-11-12 at 10:30:48 | DEBUG | _schema_item_copy
2021-11-12 at 10:30:48 | DEBUG | _schemas
2021-11-12 at 10:30:48 | DEBUG | _sequences
2021-11-12 at 10:30:48 | DEBUG | _set_parent
2021-11-12 at 10:30:48 | DEBUG | _set_parent_with_dispatch
2021-11-12 at 10:30:48 | DEBUG | _use_schema_map
2021-11-12 at 10:30:48 | DEBUG | bind
2021-11-12 at 10:30:48 | DEBUG | clear
2021-11-12 at 10:30:48 | DEBUG | create_all
2021-11-12 at 10:30:48 | DEBUG | create_drop_stringify_dialect
2021-11-12 at 10:30:48 | DEBUG | dispatch
2021-11-12 at 10:30:48 | DEBUG | drop_all
2021-11-12 at 10:30:48 | DEBUG | get_children
2021-11-12 at 10:30:48 | DEBUG | info
2021-11-12 at 10:30:48 | DEBUG | is_bound
2021-11-12 at 10:30:48 | DEBUG | naming_convention
2021-11-12 at 10:30:48 | DEBUG | reflect
2021-11-12 at 10:30:48 | DEBUG | remove
2021-11-12 at 10:30:48 | DEBUG | schema
2021-11-12 at 10:30:48 | DEBUG | sorted_tables
2021-11-12 at 10:30:48 | DEBUG | tables
2021-11-12 at 10:30:48 | DEBUG | ===================================================
2021-11-12 at 10:30:48 | DEBUG | items
2021-11-12 at 10:30:48 | DEBUG | offices
2021-11-12 at 10:30:48 | DEBUG | order_view
2021-11-12 at 10:30:48 | DEBUG | productlines
2021-11-12 at 10:30:48 | DEBUG | tokens
2021-11-12 at 10:30:48 | DEBUG | zinopara
2021-11-12 at 10:30:48 | DEBUG | employees
2021-11-12 at 10:30:48 | DEBUG | products
2021-11-12 at 10:30:48 | DEBUG | customers
2021-11-12 at 10:30:48 | DEBUG | orders
2021-11-12 at 10:30:48 | DEBUG | payments
2021-11-12 at 10:30:48 | DEBUG | orderdetails
2021-11-12 at 10:30:48 | DEBUG | ****************************************************
2021-11-12 at 10:30:48 | DEBUG | /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:31:17 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 10:31:17 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 10:31:17 | DEBUG | Generate Schema file from database ...
2021-11-12 at 10:31:18 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 10:31:28 | ERROR | Exception at gen_schema() Operator 'getitem' is not supported on this expression 
2021-11-12 at 10:31:28 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:33:33 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 10:33:33 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 10:33:33 | DEBUG | Generate Schema file from database ...
2021-11-12 at 10:33:33 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 10:33:43 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:33:43 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 10:33:43 | DEBUG | ****************************************************
2021-11-12 at 10:33:43 | DEBUG | __class__
2021-11-12 at 10:33:43 | DEBUG | __class_getitem__
2021-11-12 at 10:33:43 | DEBUG | __contains__
2021-11-12 at 10:33:43 | DEBUG | __delattr__
2021-11-12 at 10:33:43 | DEBUG | __dict__
2021-11-12 at 10:33:43 | DEBUG | __dir__
2021-11-12 at 10:33:43 | DEBUG | __doc__
2021-11-12 at 10:33:43 | DEBUG | __eq__
2021-11-12 at 10:33:43 | DEBUG | __format__
2021-11-12 at 10:33:43 | DEBUG | __ge__
2021-11-12 at 10:33:43 | DEBUG | __getattribute__
2021-11-12 at 10:33:43 | DEBUG | __getstate__
2021-11-12 at 10:33:43 | DEBUG | __gt__
2021-11-12 at 10:33:43 | DEBUG | __hash__
2021-11-12 at 10:33:43 | DEBUG | __init__
2021-11-12 at 10:33:43 | DEBUG | __init_subclass__
2021-11-12 at 10:33:43 | DEBUG | __le__
2021-11-12 at 10:33:43 | DEBUG | __lt__
2021-11-12 at 10:33:43 | DEBUG | __module__
2021-11-12 at 10:33:43 | DEBUG | __ne__
2021-11-12 at 10:33:43 | DEBUG | __new__
2021-11-12 at 10:33:43 | DEBUG | __reduce__
2021-11-12 at 10:33:43 | DEBUG | __reduce_ex__
2021-11-12 at 10:33:43 | DEBUG | __repr__
2021-11-12 at 10:33:43 | DEBUG | __setattr__
2021-11-12 at 10:33:43 | DEBUG | __setstate__
2021-11-12 at 10:33:43 | DEBUG | __sizeof__
2021-11-12 at 10:33:43 | DEBUG | __str__
2021-11-12 at 10:33:43 | DEBUG | __subclasshook__
2021-11-12 at 10:33:43 | DEBUG | __visit_name__
2021-11-12 at 10:33:43 | DEBUG | __weakref__
2021-11-12 at 10:33:43 | DEBUG | _add_table
2021-11-12 at 10:33:43 | DEBUG | _bind
2021-11-12 at 10:33:43 | DEBUG | _bind_to
2021-11-12 at 10:33:43 | DEBUG | _compiler_dispatch
2021-11-12 at 10:33:43 | DEBUG | _fk_memos
2021-11-12 at 10:33:43 | DEBUG | _init_items
2021-11-12 at 10:33:43 | DEBUG | _original_compiler_dispatch
2021-11-12 at 10:33:43 | DEBUG | _remove_table
2021-11-12 at 10:33:43 | DEBUG | _schema_item_copy
2021-11-12 at 10:33:43 | DEBUG | _schemas
2021-11-12 at 10:33:43 | DEBUG | _sequences
2021-11-12 at 10:33:43 | DEBUG | _set_parent
2021-11-12 at 10:33:43 | DEBUG | _set_parent_with_dispatch
2021-11-12 at 10:33:43 | DEBUG | _use_schema_map
2021-11-12 at 10:33:43 | DEBUG | bind
2021-11-12 at 10:33:43 | DEBUG | clear
2021-11-12 at 10:33:43 | DEBUG | create_all
2021-11-12 at 10:33:43 | DEBUG | create_drop_stringify_dialect
2021-11-12 at 10:33:43 | DEBUG | dispatch
2021-11-12 at 10:33:43 | DEBUG | drop_all
2021-11-12 at 10:33:43 | DEBUG | get_children
2021-11-12 at 10:33:43 | DEBUG | info
2021-11-12 at 10:33:43 | DEBUG | is_bound
2021-11-12 at 10:33:43 | DEBUG | naming_convention
2021-11-12 at 10:33:43 | DEBUG | reflect
2021-11-12 at 10:33:43 | DEBUG | remove
2021-11-12 at 10:33:43 | DEBUG | schema
2021-11-12 at 10:33:43 | DEBUG | sorted_tables
2021-11-12 at 10:33:43 | DEBUG | tables
2021-11-12 at 10:33:43 | DEBUG | ===================================================
2021-11-12 at 10:33:43 | DEBUG | items
2021-11-12 at 10:33:43 | DEBUG | offices
2021-11-12 at 10:33:43 | DEBUG | order_view
2021-11-12 at 10:33:43 | DEBUG | productlines
2021-11-12 at 10:33:43 | DEBUG | tokens
2021-11-12 at 10:33:43 | DEBUG | zinopara
2021-11-12 at 10:33:43 | DEBUG | employees
2021-11-12 at 10:33:43 | DEBUG | products
2021-11-12 at 10:33:43 | DEBUG | customers
2021-11-12 at 10:33:43 | DEBUG | orders
2021-11-12 at 10:33:43 | DEBUG | payments
2021-11-12 at 10:33:43 | DEBUG | orderdetails
2021-11-12 at 10:33:43 | DEBUG | ****************************************************
2021-11-12 at 10:33:43 | DEBUG | /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:38:38 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 10:38:38 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 10:38:38 | DEBUG | Generate Schema file from database ...
2021-11-12 at 10:38:38 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 10:38:48 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:38:48 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 10:39:29 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 10:39:29 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 10:39:29 | DEBUG | Generate Schema file from database ...
2021-11-12 at 10:39:30 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 10:39:40 | ERROR | Exception at gen_schema() Operator 'getitem' is not supported on this expression 
2021-11-12 at 10:39:40 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:39:40 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 10:39:40 | DEBUG | ****************************************************
2021-11-12 at 10:39:40 | DEBUG | __class__
2021-11-12 at 10:39:40 | DEBUG | __class_getitem__
2021-11-12 at 10:39:40 | DEBUG | __contains__
2021-11-12 at 10:39:40 | DEBUG | __delattr__
2021-11-12 at 10:39:40 | DEBUG | __dict__
2021-11-12 at 10:39:40 | DEBUG | __dir__
2021-11-12 at 10:39:40 | DEBUG | __doc__
2021-11-12 at 10:39:40 | DEBUG | __eq__
2021-11-12 at 10:39:40 | DEBUG | __format__
2021-11-12 at 10:39:40 | DEBUG | __ge__
2021-11-12 at 10:39:40 | DEBUG | __getattribute__
2021-11-12 at 10:39:40 | DEBUG | __getstate__
2021-11-12 at 10:39:40 | DEBUG | __gt__
2021-11-12 at 10:39:40 | DEBUG | __hash__
2021-11-12 at 10:39:40 | DEBUG | __init__
2021-11-12 at 10:39:40 | DEBUG | __init_subclass__
2021-11-12 at 10:39:40 | DEBUG | __le__
2021-11-12 at 10:39:40 | DEBUG | __lt__
2021-11-12 at 10:39:40 | DEBUG | __module__
2021-11-12 at 10:39:40 | DEBUG | __ne__
2021-11-12 at 10:39:40 | DEBUG | __new__
2021-11-12 at 10:39:40 | DEBUG | __reduce__
2021-11-12 at 10:39:40 | DEBUG | __reduce_ex__
2021-11-12 at 10:39:40 | DEBUG | __repr__
2021-11-12 at 10:39:40 | DEBUG | __setattr__
2021-11-12 at 10:39:40 | DEBUG | __setstate__
2021-11-12 at 10:39:40 | DEBUG | __sizeof__
2021-11-12 at 10:39:40 | DEBUG | __str__
2021-11-12 at 10:39:40 | DEBUG | __subclasshook__
2021-11-12 at 10:39:40 | DEBUG | __visit_name__
2021-11-12 at 10:39:40 | DEBUG | __weakref__
2021-11-12 at 10:39:40 | DEBUG | _add_table
2021-11-12 at 10:39:40 | DEBUG | _bind
2021-11-12 at 10:39:40 | DEBUG | _bind_to
2021-11-12 at 10:39:40 | DEBUG | _compiler_dispatch
2021-11-12 at 10:39:40 | DEBUG | _fk_memos
2021-11-12 at 10:39:40 | DEBUG | _init_items
2021-11-12 at 10:39:40 | DEBUG | _original_compiler_dispatch
2021-11-12 at 10:39:40 | DEBUG | _remove_table
2021-11-12 at 10:39:40 | DEBUG | _schema_item_copy
2021-11-12 at 10:39:40 | DEBUG | _schemas
2021-11-12 at 10:39:40 | DEBUG | _sequences
2021-11-12 at 10:39:40 | DEBUG | _set_parent
2021-11-12 at 10:39:40 | DEBUG | _set_parent_with_dispatch
2021-11-12 at 10:39:40 | DEBUG | _use_schema_map
2021-11-12 at 10:39:40 | DEBUG | bind
2021-11-12 at 10:39:40 | DEBUG | clear
2021-11-12 at 10:39:40 | DEBUG | create_all
2021-11-12 at 10:39:40 | DEBUG | create_drop_stringify_dialect
2021-11-12 at 10:39:40 | DEBUG | dispatch
2021-11-12 at 10:39:40 | DEBUG | drop_all
2021-11-12 at 10:39:40 | DEBUG | get_children
2021-11-12 at 10:39:40 | DEBUG | info
2021-11-12 at 10:39:40 | DEBUG | is_bound
2021-11-12 at 10:39:40 | DEBUG | naming_convention
2021-11-12 at 10:39:40 | DEBUG | reflect
2021-11-12 at 10:39:40 | DEBUG | remove
2021-11-12 at 10:39:40 | DEBUG | schema
2021-11-12 at 10:39:40 | DEBUG | sorted_tables
2021-11-12 at 10:39:40 | DEBUG | tables
2021-11-12 at 10:39:40 | DEBUG | ===================================================
2021-11-12 at 10:39:40 | DEBUG | items
2021-11-12 at 10:39:40 | DEBUG | offices
2021-11-12 at 10:39:40 | DEBUG | order_view
2021-11-12 at 10:39:40 | DEBUG | productlines
2021-11-12 at 10:39:40 | DEBUG | tokens
2021-11-12 at 10:39:40 | DEBUG | zinopara
2021-11-12 at 10:39:40 | DEBUG | employees
2021-11-12 at 10:39:40 | DEBUG | products
2021-11-12 at 10:39:40 | DEBUG | customers
2021-11-12 at 10:39:40 | DEBUG | orders
2021-11-12 at 10:39:40 | DEBUG | payments
2021-11-12 at 10:39:40 | DEBUG | orderdetails
2021-11-12 at 10:39:40 | DEBUG | ****************************************************
2021-11-12 at 10:39:40 | DEBUG | /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:45:42 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 10:45:42 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 10:45:42 | DEBUG | Generate Schema file from database ...
2021-11-12 at 10:45:43 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 10:45:52 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:45:52 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 10:45:52 | DEBUG | ****************************************************
2021-11-12 at 10:45:52 | DEBUG | __class__
2021-11-12 at 10:45:52 | DEBUG | __class_getitem__
2021-11-12 at 10:45:52 | DEBUG | __contains__
2021-11-12 at 10:45:52 | DEBUG | __delattr__
2021-11-12 at 10:45:52 | DEBUG | __dict__
2021-11-12 at 10:45:52 | DEBUG | __dir__
2021-11-12 at 10:45:52 | DEBUG | __doc__
2021-11-12 at 10:45:52 | DEBUG | __eq__
2021-11-12 at 10:45:52 | DEBUG | __format__
2021-11-12 at 10:45:52 | DEBUG | __ge__
2021-11-12 at 10:45:52 | DEBUG | __getattribute__
2021-11-12 at 10:45:52 | DEBUG | __getstate__
2021-11-12 at 10:45:52 | DEBUG | __gt__
2021-11-12 at 10:45:52 | DEBUG | __hash__
2021-11-12 at 10:45:52 | DEBUG | __init__
2021-11-12 at 10:45:52 | DEBUG | __init_subclass__
2021-11-12 at 10:45:52 | DEBUG | __le__
2021-11-12 at 10:45:52 | DEBUG | __lt__
2021-11-12 at 10:45:52 | DEBUG | __module__
2021-11-12 at 10:45:52 | DEBUG | __ne__
2021-11-12 at 10:45:52 | DEBUG | __new__
2021-11-12 at 10:45:52 | DEBUG | __reduce__
2021-11-12 at 10:45:52 | DEBUG | __reduce_ex__
2021-11-12 at 10:45:52 | DEBUG | __repr__
2021-11-12 at 10:45:52 | DEBUG | __setattr__
2021-11-12 at 10:45:52 | DEBUG | __setstate__
2021-11-12 at 10:45:52 | DEBUG | __sizeof__
2021-11-12 at 10:45:52 | DEBUG | __str__
2021-11-12 at 10:45:52 | DEBUG | __subclasshook__
2021-11-12 at 10:45:52 | DEBUG | __visit_name__
2021-11-12 at 10:45:52 | DEBUG | __weakref__
2021-11-12 at 10:45:52 | DEBUG | _add_table
2021-11-12 at 10:45:52 | DEBUG | _bind
2021-11-12 at 10:45:52 | DEBUG | _bind_to
2021-11-12 at 10:45:52 | DEBUG | _compiler_dispatch
2021-11-12 at 10:45:52 | DEBUG | _fk_memos
2021-11-12 at 10:45:52 | DEBUG | _init_items
2021-11-12 at 10:45:52 | DEBUG | _original_compiler_dispatch
2021-11-12 at 10:45:52 | DEBUG | _remove_table
2021-11-12 at 10:45:52 | DEBUG | _schema_item_copy
2021-11-12 at 10:45:52 | DEBUG | _schemas
2021-11-12 at 10:45:52 | DEBUG | _sequences
2021-11-12 at 10:45:52 | DEBUG | _set_parent
2021-11-12 at 10:45:52 | DEBUG | _set_parent_with_dispatch
2021-11-12 at 10:45:52 | DEBUG | _use_schema_map
2021-11-12 at 10:45:52 | DEBUG | bind
2021-11-12 at 10:45:52 | DEBUG | clear
2021-11-12 at 10:45:52 | DEBUG | create_all
2021-11-12 at 10:45:52 | DEBUG | create_drop_stringify_dialect
2021-11-12 at 10:45:52 | DEBUG | dispatch
2021-11-12 at 10:45:52 | DEBUG | drop_all
2021-11-12 at 10:45:52 | DEBUG | get_children
2021-11-12 at 10:45:52 | DEBUG | info
2021-11-12 at 10:45:52 | DEBUG | is_bound
2021-11-12 at 10:45:52 | DEBUG | naming_convention
2021-11-12 at 10:45:52 | DEBUG | reflect
2021-11-12 at 10:45:52 | DEBUG | remove
2021-11-12 at 10:45:52 | DEBUG | schema
2021-11-12 at 10:45:52 | DEBUG | sorted_tables
2021-11-12 at 10:45:52 | DEBUG | tables
2021-11-12 at 10:45:52 | DEBUG | ===================================================
2021-11-12 at 10:45:52 | DEBUG | items
2021-11-12 at 10:45:52 | DEBUG | offices
2021-11-12 at 10:45:52 | DEBUG | order_view
2021-11-12 at 10:45:52 | DEBUG | productlines
2021-11-12 at 10:45:52 | DEBUG | tokens
2021-11-12 at 10:45:52 | DEBUG | zinopara
2021-11-12 at 10:45:52 | DEBUG | employees
2021-11-12 at 10:45:52 | DEBUG | products
2021-11-12 at 10:45:52 | DEBUG | customers
2021-11-12 at 10:45:52 | DEBUG | orders
2021-11-12 at 10:45:52 | DEBUG | payments
2021-11-12 at 10:45:52 | DEBUG | orderdetails
2021-11-12 at 10:45:52 | DEBUG | ****************************************************
2021-11-12 at 10:45:52 | DEBUG | /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:46:39 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 10:46:39 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 10:46:39 | DEBUG | Generate Schema file from database ...
2021-11-12 at 10:46:39 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 10:46:49 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:46:49 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 10:47:05 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 10:47:05 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 10:47:05 | DEBUG | Generate Schema file from database ...
2021-11-12 at 10:47:05 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 10:47:15 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 10:47:15 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 10:47:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bff80740>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bffa0310>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bffa09f0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x79b1bffb4e50>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x79b1bffbd0a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x79b1bffbd130>}, 'description': 'customers'}
2021-11-12 at 10:47:15 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bffa09f0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x79b1bffbd0a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x79b1bffbd130>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bff80740>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 10:47:15 | ERROR | customers
2021-11-12 at 10:47:15 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 10:47:15 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 10:47:15 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 10:47:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bffa7440>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bffa0a90>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bffa0e50>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bffb4810>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x79b1bffb4c20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x79b1bffafd00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x79b1bffafd90>}, 'description': 'employees'}
2021-11-12 at 10:47:15 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bffa0e50>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bffb4810>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x79b1bffafd00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x79b1bffafd90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bffa7440>",
    "foreign_keys": "{ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 10:47:15 | ERROR | employees
2021-11-12 at 10:47:15 | ERROR | {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}
2021-11-12 at 10:47:15 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 10:47:15 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 10:47:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bffbe1c0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bffb4f90>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x79b1bff42040>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x79b1bffbd4c0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x79b1bffbd520>}, 'description': 'items'}
2021-11-12 at 10:47:15 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x79b1bffbd4c0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x79b1bffbd520>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bffbe1c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 10:47:15 | ERROR | items
2021-11-12 at 10:47:15 | ERROR | set()
2021-11-12 at 10:47:15 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 10:47:15 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 10:47:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bffa7b40>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bffa0ea0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x79b1bffb4310>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x79b1bffaf640>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x79b1bffaf6d0>}, 'description': 'offices'}
2021-11-12 at 10:47:15 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x79b1bffaf640>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x79b1bffaf6d0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bffa7b40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 10:47:15 | ERROR | offices
2021-11-12 at 10:47:15 | ERROR | set()
2021-11-12 at 10:47:15 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 10:47:15 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 10:47:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bffbe540>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff42180>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff422c0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff426d0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x79b1bff42f40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x79b1bff54b20>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x79b1bff54bb0>}, 'description': 'orderdetails'}
2021-11-12 at 10:47:15 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff422c0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff426d0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x79b1bff54b20>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x79b1bff54bb0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bffbe540>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 10:47:15 | ERROR | orderdetails
2021-11-12 at 10:47:15 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 10:47:15 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 10:47:15 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 10:47:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bffbe740>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff42310>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff42360>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x79b1bff42540>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x79b1bff48130>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x79b1bff481c0>}, 'description': 'orders'}
2021-11-12 at 10:47:15 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff42360>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x79b1bff48130>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x79b1bff481c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bffbe740>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 10:47:15 | ERROR | orders
2021-11-12 at 10:47:15 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 10:47:15 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 10:47:15 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 10:47:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bff55d40>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff5e130>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff5e1d0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x79b1bff5e2c0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x79b1bff612b0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x79b1bff61310>}, 'description': 'payments'}
2021-11-12 at 10:47:15 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff5e1d0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x79b1bff612b0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x79b1bff61310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bff55d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 10:47:15 | ERROR | payments
2021-11-12 at 10:47:15 | ERROR | set()
2021-11-12 at 10:47:15 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 10:47:15 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 10:47:15 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bff478c0>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff42ae0>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x79b1bff42bd0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x79b1bff48df0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x79b1bff48e50>}, 'description': 'productlines'}
2021-11-12 at 10:47:15 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x79b1bff48df0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x79b1bff48e50>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bff478c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 10:47:15 | ERROR | productlines
2021-11-12 at 10:47:15 | ERROR | set()
2021-11-12 at 10:47:15 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 10:47:15 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 10:47:16 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bff47440>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff42720>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x79b1bff485e0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x79b1bff485e0>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff42a90>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x79b1bff485e0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x79b1bff42db0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x79b1bff54580>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x79b1bff54610>}, 'description': 'products'}
2021-11-12 at 10:47:16 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x79b1bff485e0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff42a90>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x79b1bff485e0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x79b1bff54580>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x79b1bff54610>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bff47440>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x79b1bff485e0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 10:47:16 | ERROR | products
2021-11-12 at 10:47:16 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 10:47:16 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x79b1bff485e0>, for_update=False), comment='产品代码'))
2021-11-12 at 10:47:16 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 10:47:16 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bff5f440>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff5e360>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x79b1bff5e3b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x79b1bff61580>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x79b1bff615e0>}}
2021-11-12 at 10:47:16 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x79b1bff61580>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x79b1bff615e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bff5f440>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 10:47:16 | ERROR | tokens
2021-11-12 at 10:47:16 | ERROR | set()
2021-11-12 at 10:47:16 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 10:47:16 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 10:47:16 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bff5f6c0>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff5e4f0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x79b1bff5e770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x79b1bff61b50>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x79b1bff61bb0>}, 'description': 'zinopara'}
2021-11-12 at 10:47:16 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x79b1bff61b50>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x79b1bff61bb0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bff5f6c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 10:47:16 | ERROR | zinopara
2021-11-12 at 10:47:16 | ERROR | set()
2021-11-12 at 10:47:16 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 10:47:16 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 10:47:16 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bff5fd40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x79b1bff5e8b0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x79b1bff5e9a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x79b1bff6c190>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 10:47:16 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x79b1bff6c190>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x79b1bff5fd40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 10:47:16 | CRITICAL | order_view
2021-11-12 at 10:47:16 | CRITICAL | set()
2021-11-12 at 10:47:16 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 10:47:16 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 11:13:14 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 11:13:14 | DEBUG | Metadata cache exists, load meta from cache file [ /home/ibmzhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 11:13:14 | DEBUG | Generate Schema file from database ...
2021-11-12 at 11:13:14 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 11:13:24 | DEBUG | Loading schema from /home/ibmzhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 11:13:24 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 11:13:24 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d159f740>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d15be400>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d15beae0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7c20d15d4f40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7c20d155e0a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7c20d155e130>}, 'description': 'customers'}
2021-11-12 at 11:13:24 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d15beae0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7c20d155e0a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7c20d155e130>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d159f740>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 11:13:24 | ERROR | customers
2021-11-12 at 11:13:24 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 11:13:24 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 11:13:24 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 11:13:24 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d15c7440>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d15beb80>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d15bef40>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d15d4900>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7c20d15d4d10>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7c20d15cfd00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7c20d15cfd90>}, 'description': 'employees'}
2021-11-12 at 11:13:24 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d15bef40>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d15d4900>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7c20d15cfd00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7c20d15cfd90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d15c7440>",
    "foreign_keys": "{ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 11:13:24 | ERROR | employees
2021-11-12 at 11:13:24 | ERROR | {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}
2021-11-12 at 11:13:24 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 11:13:24 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 11:13:24 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d155f1c0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d15610e0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7c20d1561180>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7c20d155e4c0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7c20d155e520>}, 'description': 'items'}
2021-11-12 at 11:13:24 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7c20d155e4c0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7c20d155e520>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d155f1c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 11:13:24 | ERROR | items
2021-11-12 at 11:13:24 | ERROR | set()
2021-11-12 at 11:13:24 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 11:13:24 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 11:13:24 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d15c7b40>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d15bef90>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7c20d15d4400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7c20d15cf640>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7c20d15cf6d0>}, 'description': 'offices'}
2021-11-12 at 11:13:24 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7c20d15cf640>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7c20d15cf6d0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d15c7b40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 11:13:24 | ERROR | offices
2021-11-12 at 11:13:24 | ERROR | set()
2021-11-12 at 11:13:24 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 11:13:24 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 11:13:24 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d155f540>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d1561270>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d15613b0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d15617c0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7c20d157b090>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7c20d1574b20>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7c20d1574bb0>}, 'description': 'orderdetails'}
2021-11-12 at 11:13:24 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d15613b0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d15617c0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7c20d1574b20>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7c20d1574bb0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d155f540>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 11:13:24 | ERROR | orderdetails
2021-11-12 at 11:13:24 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 11:13:24 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 11:13:24 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 11:13:24 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d155f740>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d1561400>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d1561450>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7c20d1561630>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7c20d1569130>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7c20d15691c0>}, 'description': 'orders'}
2021-11-12 at 11:13:24 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d1561450>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7c20d1569130>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7c20d15691c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d155f740>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 11:13:24 | ERROR | orders
2021-11-12 at 11:13:24 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 11:13:24 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 11:13:24 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 11:13:24 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d1575d40>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d157b220>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d157b2c0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7c20d157b3b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7c20d15812b0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7c20d1581310>}, 'description': 'payments'}
2021-11-12 at 11:13:24 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d157b2c0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7c20d15812b0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7c20d1581310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d1575d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 11:13:24 | ERROR | payments
2021-11-12 at 11:13:24 | ERROR | set()
2021-11-12 at 11:13:24 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 11:13:24 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 11:13:24 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d15688c0>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d1561bd0>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7c20d1561cc0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7c20d1569df0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7c20d1569e50>}, 'description': 'productlines'}
2021-11-12 at 11:13:24 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7c20d1569df0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7c20d1569e50>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d15688c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 11:13:24 | ERROR | productlines
2021-11-12 at 11:13:24 | ERROR | set()
2021-11-12 at 11:13:24 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 11:13:24 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 11:13:24 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d1568440>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d1561810>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7c20d15695e0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7c20d15695e0>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d1561b80>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7c20d15695e0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7c20d1561ea0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7c20d1574580>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7c20d1574610>}, 'description': 'products'}
2021-11-12 at 11:13:24 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7c20d15695e0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d1561b80>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7c20d15695e0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7c20d1574580>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7c20d1574610>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d1568440>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7c20d15695e0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 11:13:24 | ERROR | products
2021-11-12 at 11:13:24 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 11:13:24 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x7c20d15695e0>, for_update=False), comment='产品代码'))
2021-11-12 at 11:13:24 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 11:13:24 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d157f440>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d157b450>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7c20d157b4a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7c20d1581580>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7c20d15815e0>}}
2021-11-12 at 11:13:24 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7c20d1581580>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7c20d15815e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d157f440>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 11:13:24 | ERROR | tokens
2021-11-12 at 11:13:24 | ERROR | set()
2021-11-12 at 11:13:24 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 11:13:24 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 11:13:24 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d157f6c0>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d157b5e0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7c20d157b860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7c20d1581b50>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x7c20d1581bb0>}, 'description': 'zinopara'}
2021-11-12 at 11:13:24 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7c20d1581b50>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x7c20d1581bb0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d157f6c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 11:13:24 | ERROR | zinopara
2021-11-12 at 11:13:24 | ERROR | set()
2021-11-12 at 11:13:24 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 11:13:24 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 11:13:25 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d157fd40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x7c20d157b9a0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x7c20d157ba90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x7c20d158c190>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 11:13:25 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x7c20d158c190>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x7c20d157fd40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 11:13:25 | CRITICAL | order_view
2021-11-12 at 11:13:25 | CRITICAL | set()
2021-11-12 at 11:13:25 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 11:13:25 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 16:52:40 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 16:52:40 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 16:52:40 | DEBUG | Generate Schema file from database ...
2021-11-12 at 16:52:41 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 16:52:41 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 16:52:41 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-12 at 16:52:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10299c0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102996b30>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a0d270>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102a1b6d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102a21280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102a21310>}, 'description': 'customers'}
2021-11-12 at 16:52:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a0d270>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102a21280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102a21310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10299c0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:52:41 | ERROR | customers
2021-11-12 at 16:52:41 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 16:52:41 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 16:52:41 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 16:52:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10299cd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a0d310>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a0d6d0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a1b090>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102a1b4a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102a13ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102a13f70>}, 'description': 'employees'}
2021-11-12 at 16:52:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a0d6d0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a1b090>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102a13ee0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102a13f70>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10299cd40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:52:41 | ERROR | employees
2021-11-12 at 16:52:41 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-12 at 16:52:41 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 16:52:41 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 16:52:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102a19ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a1b810>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102a1b8b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102a216a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102a21700>}, 'description': 'items'}
2021-11-12 at 16:52:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102a216a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102a21700>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102a19ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:52:41 | ERROR | items
2021-11-12 at 16:52:41 | ERROR | set()
2021-11-12 at 16:52:41 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 16:52:41 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 16:52:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102a104c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a0d720>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102a0db30>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102a13820>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102a138b0>}, 'description': 'offices'}
2021-11-12 at 16:52:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102a13820>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102a138b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102a104c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:52:41 | ERROR | offices
2021-11-12 at 16:52:41 | ERROR | set()
2021-11-12 at 16:52:41 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 16:52:41 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 16:52:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102a19e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a1b9a0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a1bef0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a1bae0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102a317c0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102a38d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102a38d90>}, 'description': 'orderdetails'}
2021-11-12 at 16:52:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a1bef0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a1bae0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102a38d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102a38d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102a19e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:52:41 | ERROR | orderdetails
2021-11-12 at 16:52:41 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 16:52:41 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 16:52:41 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 16:52:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102a280c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a1bb30>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a1bb80>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102a1bd60>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102a2b310>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102a2b3a0>}, 'description': 'orders'}
2021-11-12 at 16:52:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a1bb80>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102a2b310>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102a2b3a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102a280c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:52:41 | ERROR | orders
2021-11-12 at 16:52:41 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 16:52:41 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 16:52:41 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 16:52:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102a3d6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a31950>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a319f0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102a31ae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102a43490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102a434f0>}, 'description': 'payments'}
2021-11-12 at 16:52:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a319f0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102a43490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102a434f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102a3d6c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:52:41 | ERROR | payments
2021-11-12 at 16:52:41 | ERROR | set()
2021-11-12 at 16:52:41 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 16:52:41 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 16:52:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102a32240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a31360>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102a31450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102a2bfd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102a38070>}, 'description': 'productlines'}
2021-11-12 at 16:52:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102a2bfd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102a38070>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102a32240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:52:41 | ERROR | productlines
2021-11-12 at 16:52:41 | ERROR | set()
2021-11-12 at 16:52:41 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 16:52:41 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 16:52:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102a28d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a1bf40>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102a2b7c0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a31310>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102a2b7c0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102a2b7c0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102a31630>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102a38760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102a387f0>}, 'description': 'products'}
2021-11-12 at 16:52:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a31310>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102a2b7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102a2b7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102a38760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102a387f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102a28d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102a2b7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:52:41 | ERROR | products
2021-11-12 at 16:52:41 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 16:52:41 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102a2b7c0>, for_update=False), comment='产品代码'))
2021-11-12 at 16:52:41 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 16:52:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102a3dd40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a31b80>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102a31bd0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102a43760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102a437c0>}}
2021-11-12 at 16:52:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102a43760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102a437c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102a3dd40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:52:41 | ERROR | tokens
2021-11-12 at 16:52:41 | ERROR | set()
2021-11-12 at 16:52:41 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 16:52:41 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 16:52:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102a49040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a31d10>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102a31f90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102a43d30>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102a43d90>}, 'description': 'zinopara'}
2021-11-12 at 16:52:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102a43d30>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102a43d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102a49040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:52:41 | ERROR | zinopara
2021-11-12 at 16:52:41 | ERROR | set()
2021-11-12 at 16:52:41 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 16:52:41 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 16:52:41 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102d1e840>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102d41ae0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102d41d60>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102d52670>, 'dialect_options': {}}
2021-11-12 at 16:52:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102d52670>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102d1e840>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:52:41 | CRITICAL | order_view
2021-11-12 at 16:52:41 | CRITICAL | set()
2021-11-12 at 16:52:41 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 16:52:41 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 16:55:56 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 16:55:56 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 16:55:56 | DEBUG | Generate Schema file from database ...
2021-11-12 at 16:55:56 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 16:55:56 | ERROR | Exception at gen_schema() Object of type DDLEventsDispatch is not JSON serializable 
2021-11-12 at 16:55:56 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 16:57:11 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 16:57:11 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 16:57:11 | DEBUG | Generate Schema file from database ...
2021-11-12 at 16:57:11 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 16:57:11 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 16:57:11 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-12 at 16:57:11 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108b280c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108b25ae0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108b99220>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108ba9680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108bae280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108bae310>}, 'description': 'customers'}
2021-11-12 at 16:57:11 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108b99220>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108bae280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108bae310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108b280c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:57:11 | ERROR | customers
2021-11-12 at 16:57:11 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 16:57:11 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 16:57:11 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 16:57:11 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108b28d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108b992c0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108b99680>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108ba9040>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108ba9450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108ba0ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108ba0f70>}, 'description': 'employees'}
2021-11-12 at 16:57:11 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108b99680>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108ba9040>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108ba0ee0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108ba0f70>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108b28d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:57:11 | ERROR | employees
2021-11-12 at 16:57:11 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-12 at 16:57:11 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 16:57:11 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 16:57:11 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108ba5ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108ba97c0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108ba9860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108bae6a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108bae700>}, 'description': 'items'}
2021-11-12 at 16:57:11 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108bae6a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108bae700>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108ba5ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:57:11 | ERROR | items
2021-11-12 at 16:57:11 | ERROR | set()
2021-11-12 at 16:57:11 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 16:57:11 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 16:57:11 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108b9c4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108b996d0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108b99ae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108ba0820>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108ba08b0>}, 'description': 'offices'}
2021-11-12 at 16:57:11 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108ba0820>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108ba08b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108b9c4c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:57:11 | ERROR | offices
2021-11-12 at 16:57:11 | ERROR | set()
2021-11-12 at 16:57:11 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 16:57:11 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 16:57:11 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108ba5e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108ba9950>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108ba9ea0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108ba9a90>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108bbd770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108bc4d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108bc4d90>}, 'description': 'orderdetails'}
2021-11-12 at 16:57:11 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108ba9ea0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108ba9a90>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108bc4d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108bc4d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108ba5e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:57:11 | ERROR | orderdetails
2021-11-12 at 16:57:11 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 16:57:11 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 16:57:11 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 16:57:11 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108bb40c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108ba9ae0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108ba9b30>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108ba9d10>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108bb8310>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108bb83a0>}, 'description': 'orders'}
2021-11-12 at 16:57:11 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108ba9b30>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108bb8310>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108bb83a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108bb40c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:57:11 | ERROR | orders
2021-11-12 at 16:57:11 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 16:57:11 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 16:57:11 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 16:57:11 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108bc96c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108bbd900>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108bbd9a0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108bbda90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108bcf490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108bcf4f0>}, 'description': 'payments'}
2021-11-12 at 16:57:11 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108bbd9a0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108bcf490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108bcf4f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108bc96c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:57:11 | ERROR | payments
2021-11-12 at 16:57:11 | ERROR | set()
2021-11-12 at 16:57:11 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 16:57:11 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 16:57:11 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108bbf240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108bbd310>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108bbd400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108bb8fd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108bc4070>}, 'description': 'productlines'}
2021-11-12 at 16:57:11 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108bb8fd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108bc4070>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108bbf240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:57:11 | ERROR | productlines
2021-11-12 at 16:57:11 | ERROR | set()
2021-11-12 at 16:57:11 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 16:57:11 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 16:57:11 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108bb4d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108ba9ef0>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x108bb87c0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108bbd2c0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x108bb87c0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x108bb87c0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108bbd5e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108bc4760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108bc47f0>}, 'description': 'products'}
2021-11-12 at 16:57:11 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108bbd2c0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x108bb87c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x108bb87c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108bc4760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108bc47f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108bb4d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x108bb87c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:57:11 | ERROR | products
2021-11-12 at 16:57:11 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 16:57:11 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x108bb87c0>, for_update=False), comment='产品代码'))
2021-11-12 at 16:57:11 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 16:57:11 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108bc9d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108bbdb30>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108bbdb80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108bcf760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108bcf7c0>}, 'description': 'tokens'}
2021-11-12 at 16:57:11 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108bcf760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108bcf7c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108bc9d40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:57:11 | ERROR | tokens
2021-11-12 at 16:57:11 | ERROR | set()
2021-11-12 at 16:57:11 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 16:57:11 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 16:57:11 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108bd5040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108bbdcc0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108bbdf40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108bcfd30>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108bcfd90>}, 'description': 'zinopara'}
2021-11-12 at 16:57:11 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108bcfd30>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108bcfd90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108bd5040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:57:11 | ERROR | zinopara
2021-11-12 at 16:57:11 | ERROR | set()
2021-11-12 at 16:57:11 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 16:57:11 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 16:57:11 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108e87a40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108ed5bd0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108ed5ae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108ee01f0>, 'dialect_options': {}}
2021-11-12 at 16:57:11 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108ee01f0>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108e87a40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 16:57:11 | CRITICAL | order_view
2021-11-12 at 16:57:11 | CRITICAL | set()
2021-11-12 at 16:57:11 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 16:57:11 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:07:42 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:07:43 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:07:43 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:07:43 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:07:43 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:07:43 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-12 at 17:07:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1088360c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1087a4c20>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088a2360>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1088b5770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1088bc280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1088bc310>}, 'description': 'customers'}
2021-11-12 at 17:07:43 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088a2360>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1088bc280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1088bc310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1088360c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:07:43 | ERROR | customers
2021-11-12 at 17:07:43 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:07:43 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:07:43 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:07:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108836d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088a2400>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088a27c0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088b5130>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1088b5540>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1088aeee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1088aef70>}, 'description': 'employees'}
2021-11-12 at 17:07:43 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088a27c0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088b5130>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1088aeee0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1088aef70>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108836d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:07:43 | ERROR | employees
2021-11-12 at 17:07:43 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-12 at 17:07:43 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:07:43 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:07:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1088b3ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088b58b0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1088b5950>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1088bc6a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1088bc700>}, 'description': 'items'}
2021-11-12 at 17:07:43 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1088bc6a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1088bc700>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1088b3ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:07:43 | ERROR | items
2021-11-12 at 17:07:43 | ERROR | set()
2021-11-12 at 17:07:43 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:07:43 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:07:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1088aa4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088a2810>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1088a2c20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1088ae820>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1088ae8b0>}, 'description': 'offices'}
2021-11-12 at 17:07:43 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1088ae820>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1088ae8b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1088aa4c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:07:43 | ERROR | offices
2021-11-12 at 17:07:43 | ERROR | set()
2021-11-12 at 17:07:43 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:07:43 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:07:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1088b3e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088b5a40>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088b5f90>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088b5b80>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1088cb860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1088d2d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1088d2d90>}, 'description': 'orderdetails'}
2021-11-12 at 17:07:43 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088b5f90>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088b5b80>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1088d2d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1088d2d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1088b3e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:07:43 | ERROR | orderdetails
2021-11-12 at 17:07:43 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:07:43 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:07:43 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:07:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1088c20c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088b5bd0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088b5c20>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1088b5e00>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1088c6310>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1088c63a0>}, 'description': 'orders'}
2021-11-12 at 17:07:43 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088b5c20>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1088c6310>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1088c63a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1088c20c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:07:43 | ERROR | orders
2021-11-12 at 17:07:43 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:07:43 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:07:43 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:07:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1088d76c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088cb9f0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088cba90>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1088cbb80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1088dd490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1088dd4f0>}, 'description': 'payments'}
2021-11-12 at 17:07:43 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088cba90>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1088dd490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1088dd4f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1088d76c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:07:43 | ERROR | payments
2021-11-12 at 17:07:43 | ERROR | set()
2021-11-12 at 17:07:43 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:07:43 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:07:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1088cd240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088cb400>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1088cb4f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1088c6fd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1088d2070>}, 'description': 'productlines'}
2021-11-12 at 17:07:43 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1088c6fd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1088d2070>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1088cd240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:07:43 | ERROR | productlines
2021-11-12 at 17:07:43 | ERROR | set()
2021-11-12 at 17:07:43 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:07:43 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:07:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1088c2d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088cb040>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1088c67c0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088cb3b0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1088c67c0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1088c67c0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1088cb6d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1088d2760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1088d27f0>}, 'description': 'products'}
2021-11-12 at 17:07:43 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088cb3b0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1088c67c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1088c67c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1088d2760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1088d27f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1088c2d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1088c67c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:07:43 | ERROR | products
2021-11-12 at 17:07:43 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:07:43 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1088c67c0>, for_update=False), comment='产品代码'))
2021-11-12 at 17:07:43 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:07:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1088d7d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088cbc20>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1088cbc70>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1088dd760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1088dd7c0>}, 'description': 'tokens'}
2021-11-12 at 17:07:43 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1088dd760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1088dd7c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1088d7d40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:07:43 | ERROR | tokens
2021-11-12 at 17:07:43 | ERROR | set()
2021-11-12 at 17:07:43 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:07:43 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:07:43 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1088e3040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1088cbdb0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1088e7090>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1088ddd30>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1088ddd90>}, 'description': 'zinopara'}
2021-11-12 at 17:07:43 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1088ddd30>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1088ddd90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1088e3040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:07:43 | ERROR | zinopara
2021-11-12 at 17:07:43 | ERROR | set()
2021-11-12 at 17:07:43 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:07:43 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:07:43 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108b957c0>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108be4e00>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108be4d60>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108bef1f0>, 'dialect_options': {}}
2021-11-12 at 17:07:43 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108bef1f0>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108b957c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:07:43 | CRITICAL | order_view
2021-11-12 at 17:07:43 | CRITICAL | set()
2021-11-12 at 17:07:43 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:07:43 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:08:11 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:08:11 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:08:11 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:08:11 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:08:12 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:08:12 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-12 at 17:08:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10975b0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109757b30>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097cc270>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1097dc6d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1097e2280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1097e2310>}, 'description': 'customers'}
2021-11-12 at 17:08:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097cc270>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1097e2280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1097e2310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10975b0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:12 | ERROR | customers
2021-11-12 at 17:08:12 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:08:12 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:08:12 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:08:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10975bd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097cc310>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097cc6d0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097dc090>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1097dc4a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1097d3ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1097d3f70>}, 'description': 'employees'}
2021-11-12 at 17:08:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097cc6d0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097dc090>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1097d3ee0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1097d3f70>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10975bd40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:12 | ERROR | employees
2021-11-12 at 17:08:12 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-12 at 17:08:12 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:08:12 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:08:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1097d9ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097dc810>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1097dc8b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1097e26a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1097e2700>}, 'description': 'items'}
2021-11-12 at 17:08:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1097e26a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1097e2700>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1097d9ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:12 | ERROR | items
2021-11-12 at 17:08:12 | ERROR | set()
2021-11-12 at 17:08:12 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:08:12 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:08:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1097cf4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097cc720>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1097ccb30>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1097d3820>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1097d38b0>}, 'description': 'offices'}
2021-11-12 at 17:08:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1097d3820>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1097d38b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1097cf4c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:12 | ERROR | offices
2021-11-12 at 17:08:12 | ERROR | set()
2021-11-12 at 17:08:12 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:08:12 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:08:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1097d9e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097dc9a0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097dcef0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097dcae0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1097f17c0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1097f8d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1097f8d90>}, 'description': 'orderdetails'}
2021-11-12 at 17:08:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097dcef0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097dcae0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1097f8d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1097f8d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1097d9e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:12 | ERROR | orderdetails
2021-11-12 at 17:08:12 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:08:12 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:08:12 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:08:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1097e80c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097dcb30>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097dcb80>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1097dcd60>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1097eb310>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1097eb3a0>}, 'description': 'orders'}
2021-11-12 at 17:08:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097dcb80>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1097eb310>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1097eb3a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1097e80c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:12 | ERROR | orders
2021-11-12 at 17:08:12 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:08:12 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:08:12 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:08:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1097fd6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097f1950>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097f19f0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1097f1ae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109803490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1098034f0>}, 'description': 'payments'}
2021-11-12 at 17:08:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097f19f0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x109803490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1098034f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1097fd6c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:12 | ERROR | payments
2021-11-12 at 17:08:12 | ERROR | set()
2021-11-12 at 17:08:12 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:08:12 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:08:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1097f3240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097f1360>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1097f1450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1097ebfd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1097f8070>}, 'description': 'productlines'}
2021-11-12 at 17:08:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1097ebfd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1097f8070>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1097f3240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:12 | ERROR | productlines
2021-11-12 at 17:08:12 | ERROR | set()
2021-11-12 at 17:08:12 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:08:12 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:08:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1097e8d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097dcf40>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1097eb7c0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097f1310>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1097eb7c0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1097eb7c0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1097f1630>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1097f8760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1097f87f0>}, 'description': 'products'}
2021-11-12 at 17:08:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097f1310>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1097eb7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1097eb7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1097f8760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1097f87f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1097e8d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1097eb7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:12 | ERROR | products
2021-11-12 at 17:08:12 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:08:12 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1097eb7c0>, for_update=False), comment='产品代码'))
2021-11-12 at 17:08:12 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:08:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1097fdd40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097f1b80>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1097f1bd0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109803760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1098037c0>}, 'description': 'tokens'}
2021-11-12 at 17:08:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x109803760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1098037c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1097fdd40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:12 | ERROR | tokens
2021-11-12 at 17:08:12 | ERROR | set()
2021-11-12 at 17:08:12 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:08:12 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:08:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109809040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1097f1d10>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1097f1f90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109803d30>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x109803d90>}, 'description': 'zinopara'}
2021-11-12 at 17:08:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x109803d30>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x109803d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x109809040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:12 | ERROR | zinopara
2021-11-12 at 17:08:12 | ERROR | set()
2021-11-12 at 17:08:12 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:08:12 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:08:12 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109abba40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109b07d10>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x109b07f40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109b14130>, 'dialect_options': {}}
2021-11-12 at 17:08:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x109b14130>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x109abba40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:12 | CRITICAL | order_view
2021-11-12 at 17:08:12 | CRITICAL | set()
2021-11-12 at 17:08:12 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:08:12 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:08:36 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:08:36 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:08:36 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:08:36 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:08:36 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:08:36 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-12 at 17:08:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f49d0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f49aae0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f50e220>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f51e680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f523280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f523310>}, 'description': 'customers'}
2021-11-12 at 17:08:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f50e220>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f523280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f523310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f49d0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:36 | ERROR | customers
2021-11-12 at 17:08:36 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:08:36 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:08:36 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:08:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f49dd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f50e2c0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f50e680>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f51e040>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f51e450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f515ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f515f70>}, 'description': 'employees'}
2021-11-12 at 17:08:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f50e680>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f51e040>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f515ee0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f515f70>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f49dd40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:36 | ERROR | employees
2021-11-12 at 17:08:36 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-12 at 17:08:36 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:08:36 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:08:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f51aac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f51e7c0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f51e860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f5236a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f523700>}, 'description': 'items'}
2021-11-12 at 17:08:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f5236a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f523700>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f51aac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:36 | ERROR | items
2021-11-12 at 17:08:36 | ERROR | set()
2021-11-12 at 17:08:36 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:08:36 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:08:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5114c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f50e6d0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f50eae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f515820>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5158b0>}, 'description': 'offices'}
2021-11-12 at 17:08:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f515820>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f5158b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5114c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:36 | ERROR | offices
2021-11-12 at 17:08:36 | ERROR | set()
2021-11-12 at 17:08:36 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:08:36 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:08:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f51ae40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f51e950>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f51eea0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f51ea90>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f532770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f539d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f539d90>}, 'description': 'orderdetails'}
2021-11-12 at 17:08:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f51eea0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f51ea90>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f539d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f539d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f51ae40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:36 | ERROR | orderdetails
2021-11-12 at 17:08:36 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:08:36 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:08:36 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:08:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5290c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f51eae0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f51eb30>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f51ed10>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f52c310>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f52c3a0>}, 'description': 'orders'}
2021-11-12 at 17:08:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f51eb30>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f52c310>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f52c3a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5290c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:36 | ERROR | orders
2021-11-12 at 17:08:36 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:08:36 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:08:36 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:08:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f53e6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f532900>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5329a0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f532a90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f544490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5444f0>}, 'description': 'payments'}
2021-11-12 at 17:08:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5329a0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f544490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f5444f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f53e6c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:36 | ERROR | payments
2021-11-12 at 17:08:36 | ERROR | set()
2021-11-12 at 17:08:36 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:08:36 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:08:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f533240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f532310>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f532400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f52cfd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f539070>}, 'description': 'productlines'}
2021-11-12 at 17:08:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f52cfd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f539070>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f533240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:36 | ERROR | productlines
2021-11-12 at 17:08:36 | ERROR | set()
2021-11-12 at 17:08:36 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:08:36 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:08:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f529d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f51eef0>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f52c7c0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5322c0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f52c7c0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f52c7c0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f5325e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f539760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5397f0>}, 'description': 'products'}
2021-11-12 at 17:08:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f5322c0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f52c7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f52c7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f539760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f5397f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f529d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f52c7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:36 | ERROR | products
2021-11-12 at 17:08:36 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:08:36 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f52c7c0>, for_update=False), comment='产品代码'))
2021-11-12 at 17:08:36 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:08:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f53ed40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f532b30>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f532b80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f544760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5447c0>}, 'description': 'tokens'}
2021-11-12 at 17:08:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f544760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f5447c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f53ed40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:36 | ERROR | tokens
2021-11-12 at 17:08:36 | ERROR | set()
2021-11-12 at 17:08:36 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:08:36 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:08:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f54a040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f532cc0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f532f40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f544d30>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f544d90>}, 'description': 'zinopara'}
2021-11-12 at 17:08:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f544d30>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f544d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f54a040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:36 | ERROR | zinopara
2021-11-12 at 17:08:36 | ERROR | set()
2021-11-12 at 17:08:36 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:08:36 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:08:36 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f7fcac0>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f49abd0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f84ac20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f8552b0>, 'dialect_options': {}}
2021-11-12 at 17:08:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f8552b0>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f7fcac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:08:36 | CRITICAL | order_view
2021-11-12 at 17:08:36 | CRITICAL | set()
2021-11-12 at 17:08:36 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:08:36 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:09:40 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:09:40 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:09:40 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:09:40 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:09:41 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:09:41 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-12 at 17:09:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10be340c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10be31a40>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bea5180>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10beb75e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10beba280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10beba310>}, 'description': 'customers'}
2021-11-12 at 17:09:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bea5180>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10beba280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10beba310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10be340c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:09:41 | ERROR | customers
2021-11-12 at 17:09:41 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:09:41 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:09:41 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:09:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10be34d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bea5220>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bea55e0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bea5f40>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10beb73b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10beacee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10beacf70>}, 'description': 'employees'}
2021-11-12 at 17:09:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bea55e0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bea5f40>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10beacee0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10beacf70>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10be34d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:09:41 | ERROR | employees
2021-11-12 at 17:09:41 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-12 at 17:09:41 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:09:41 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:09:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10beb1ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10beb7720>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10beb77c0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10beba6a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10beba700>}, 'description': 'items'}
2021-11-12 at 17:09:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10beba6a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10beba700>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10beb1ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:09:41 | ERROR | items
2021-11-12 at 17:09:41 | ERROR | set()
2021-11-12 at 17:09:41 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:09:41 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:09:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10bea84c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bea5630>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10bea5a40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10beac820>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10beac8b0>}, 'description': 'offices'}
2021-11-12 at 17:09:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10beac820>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10beac8b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10bea84c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:09:41 | ERROR | offices
2021-11-12 at 17:09:41 | ERROR | set()
2021-11-12 at 17:09:41 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:09:41 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:09:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10beb1e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10beb78b0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10beb7e00>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10beb79f0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10bec96d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10bed0d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10bed0d90>}, 'description': 'orderdetails'}
2021-11-12 at 17:09:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10beb7e00>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10beb79f0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10bed0d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10bed0d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10beb1e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:09:41 | ERROR | orderdetails
2021-11-12 at 17:09:41 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:09:41 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:09:41 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:09:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10bec00c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10beb7a40>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10beb7a90>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10beb7c70>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10bec3310>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10bec33a0>}, 'description': 'orders'}
2021-11-12 at 17:09:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10beb7a90>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10bec3310>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10bec33a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10bec00c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:09:41 | ERROR | orders
2021-11-12 at 17:09:41 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:09:41 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:09:41 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:09:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10bed56c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bec9860>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bec9900>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10bec99f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10bedb490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10bedb4f0>}, 'description': 'payments'}
2021-11-12 at 17:09:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bec9900>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10bedb490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10bedb4f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10bed56c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:09:41 | ERROR | payments
2021-11-12 at 17:09:41 | ERROR | set()
2021-11-12 at 17:09:41 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:09:41 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:09:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10becb240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bec9270>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10bec9360>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10bec3fd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10bed0070>}, 'description': 'productlines'}
2021-11-12 at 17:09:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10bec3fd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10bed0070>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10becb240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:09:41 | ERROR | productlines
2021-11-12 at 17:09:41 | ERROR | set()
2021-11-12 at 17:09:41 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:09:41 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:09:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10bec0d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10beb7e50>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10bec37c0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bec9220>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10bec37c0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10bec37c0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10bec9540>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10bed0760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10bed07f0>}, 'description': 'products'}
2021-11-12 at 17:09:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bec9220>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10bec37c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10bec37c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10bed0760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10bed07f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10bec0d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10bec37c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:09:41 | ERROR | products
2021-11-12 at 17:09:41 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:09:41 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10bec37c0>, for_update=False), comment='产品代码'))
2021-11-12 at 17:09:41 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:09:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10bed5d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bec9a90>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10bec9ae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10bedb760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10bedb7c0>}, 'description': 'tokens'}
2021-11-12 at 17:09:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10bedb760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10bedb7c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10bed5d40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:09:41 | ERROR | tokens
2021-11-12 at 17:09:41 | ERROR | set()
2021-11-12 at 17:09:41 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:09:41 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:09:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10bee1040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10bec9c20>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10bec9ea0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10bedbd30>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10bedbd90>}, 'description': 'zinopara'}
2021-11-12 at 17:09:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10bedbd30>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10bedbd90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10bee1040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:09:41 | ERROR | zinopara
2021-11-12 at 17:09:41 | ERROR | set()
2021-11-12 at 17:09:41 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:09:41 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:09:41 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c193ac0>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c1e1b30>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c1e1d10>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c1ec190>, 'dialect_options': {}}
2021-11-12 at 17:09:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c1ec190>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c193ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:09:41 | CRITICAL | order_view
2021-11-12 at 17:09:41 | CRITICAL | set()
2021-11-12 at 17:09:41 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:09:41 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:10:26 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:10:26 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:10:26 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:10:26 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:10:27 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:10:27 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-12 at 17:10:27 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c9ab0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c9a8a90>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca1c1d0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ca2e630>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ca31280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ca31310>}, 'description': 'customers'}
2021-11-12 at 17:10:27 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca1c1d0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10ca31280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10ca31310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c9ab0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:10:27 | ERROR | customers
2021-11-12 at 17:10:27 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:10:27 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:10:27 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:10:27 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c9abd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca1c270>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca1c630>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca1cf90>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ca2e400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ca23ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ca23f70>}, 'description': 'employees'}
2021-11-12 at 17:10:27 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca1c630>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca1cf90>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10ca23ee0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10ca23f70>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c9abd40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:10:27 | ERROR | employees
2021-11-12 at 17:10:27 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-12 at 17:10:27 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:10:27 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:10:27 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca28ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca2e770>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ca2e810>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ca316a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ca31700>}, 'description': 'items'}
2021-11-12 at 17:10:27 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10ca316a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10ca31700>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca28ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:10:27 | ERROR | items
2021-11-12 at 17:10:27 | ERROR | set()
2021-11-12 at 17:10:27 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:10:27 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:10:27 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca1f4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca1c680>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ca1ca90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ca23820>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ca238b0>}, 'description': 'offices'}
2021-11-12 at 17:10:27 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10ca23820>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10ca238b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca1f4c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:10:27 | ERROR | offices
2021-11-12 at 17:10:27 | ERROR | set()
2021-11-12 at 17:10:27 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:10:27 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:10:27 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca28e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca2e900>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca2ee50>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca2ea40>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ca40720>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ca47d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ca47d90>}, 'description': 'orderdetails'}
2021-11-12 at 17:10:27 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca2ee50>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca2ea40>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10ca47d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10ca47d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca28e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:10:27 | ERROR | orderdetails
2021-11-12 at 17:10:27 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:10:27 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:10:27 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:10:27 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca370c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca2ea90>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca2eae0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ca2ecc0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ca3b310>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ca3b3a0>}, 'description': 'orders'}
2021-11-12 at 17:10:27 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca2eae0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10ca3b310>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10ca3b3a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca370c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:10:27 | ERROR | orders
2021-11-12 at 17:10:27 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:10:27 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:10:27 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:10:27 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca4c6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca408b0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca40950>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ca40a40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ca52490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ca524f0>}, 'description': 'payments'}
2021-11-12 at 17:10:27 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca40950>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10ca52490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10ca524f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca4c6c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:10:27 | ERROR | payments
2021-11-12 at 17:10:27 | ERROR | set()
2021-11-12 at 17:10:27 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:10:27 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:10:27 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca42240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca402c0>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ca403b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ca3bfd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ca47070>}, 'description': 'productlines'}
2021-11-12 at 17:10:27 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10ca3bfd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10ca47070>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca42240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:10:27 | ERROR | productlines
2021-11-12 at 17:10:27 | ERROR | set()
2021-11-12 at 17:10:27 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:10:27 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:10:27 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca37d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca2eea0>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ca3b7c0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca40270>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ca3b7c0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ca3b7c0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ca40590>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ca47760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ca477f0>}, 'description': 'products'}
2021-11-12 at 17:10:27 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca40270>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ca3b7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ca3b7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10ca47760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10ca477f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca37d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ca3b7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:10:27 | ERROR | products
2021-11-12 at 17:10:27 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:10:27 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10ca3b7c0>, for_update=False), comment='产品代码'))
2021-11-12 at 17:10:27 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:10:27 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca4cd40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca40ae0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ca40b30>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ca52760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ca527c0>}, 'description': 'tokens'}
2021-11-12 at 17:10:27 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10ca52760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10ca527c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca4cd40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:10:27 | ERROR | tokens
2021-11-12 at 17:10:27 | ERROR | set()
2021-11-12 at 17:10:27 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:10:27 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:10:27 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca58040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ca40c70>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ca40ef0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ca52d30>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10ca52d90>}, 'description': 'zinopara'}
2021-11-12 at 17:10:27 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10ca52d30>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10ca52d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10ca58040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:10:27 | ERROR | zinopara
2021-11-12 at 17:10:27 | ERROR | set()
2021-11-12 at 17:10:27 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:10:27 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:10:27 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10cd09840>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cd57c20>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10cd57b80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10cd641f0>, 'dialect_options': {}}
2021-11-12 at 17:10:27 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10cd641f0>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10cd09840>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:10:27 | CRITICAL | order_view
2021-11-12 at 17:10:27 | CRITICAL | set()
2021-11-12 at 17:10:27 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:10:27 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:29:47 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:29:47 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:29:47 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:29:47 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:29:47 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:29:47 | DEBUG | Schema load with [ 11 ] tables and [ 0 ] views
2021-11-12 at 17:29:47 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fb7b0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fb76b80>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbe92c0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbfb720>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fc02280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fc02310>}, 'description': 'customers'}
2021-11-12 at 17:29:47 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbe92c0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10fc02280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10fc02310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10fb7b0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:29:47 | ERROR | customers
2021-11-12 at 17:29:47 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:29:47 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:29:47 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:29:47 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fb7bd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbe9360>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbe9720>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfb0e0>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbfb4f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbf2ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbf2f70>}, 'description': 'employees'}
2021-11-12 at 17:29:47 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbe9720>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfb0e0>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10fbf2ee0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10fbf2f70>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10fb7bd40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:29:47 | ERROR | employees
2021-11-12 at 17:29:47 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-12 at 17:29:47 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:29:47 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:29:47 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbf9ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfb860>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbfb900>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fc026a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fc02700>}, 'description': 'items'}
2021-11-12 at 17:29:47 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10fc026a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10fc02700>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbf9ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:29:47 | ERROR | items
2021-11-12 at 17:29:47 | ERROR | set()
2021-11-12 at 17:29:47 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:29:47 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:29:47 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbef4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbe9770>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbe9b80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fbf2820>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fbf28b0>}, 'description': 'offices'}
2021-11-12 at 17:29:47 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10fbf2820>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10fbf28b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbef4c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:29:47 | ERROR | offices
2021-11-12 at 17:29:47 | ERROR | set()
2021-11-12 at 17:29:47 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:29:47 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:29:47 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbf9e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfb9f0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfbf40>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfbb30>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fc11810>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fc18d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fc18d90>}, 'description': 'orderdetails'}
2021-11-12 at 17:29:47 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfbf40>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfbb30>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10fc18d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10fc18d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10fbf9e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:29:47 | ERROR | orderdetails
2021-11-12 at 17:29:47 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:29:47 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:29:47 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:29:47 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fc080c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfbb80>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfbbd0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fbfbdb0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fc0b310>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fc0b3a0>}, 'description': 'orders'}
2021-11-12 at 17:29:47 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfbbd0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10fc0b310>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10fc0b3a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10fc080c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:29:47 | ERROR | orders
2021-11-12 at 17:29:47 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:29:47 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:29:47 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:29:47 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fc1d6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fc119a0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fc11a40>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fc11b30>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fc23490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fc234f0>}, 'description': 'payments'}
2021-11-12 at 17:29:47 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fc11a40>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10fc23490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10fc234f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10fc1d6c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:29:47 | ERROR | payments
2021-11-12 at 17:29:47 | ERROR | set()
2021-11-12 at 17:29:47 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:29:47 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:29:47 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fc12240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fc113b0>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fc114a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fc0bfd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fc18070>}, 'description': 'productlines'}
2021-11-12 at 17:29:47 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10fc0bfd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10fc18070>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10fc12240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:29:47 | ERROR | productlines
2021-11-12 at 17:29:47 | ERROR | set()
2021-11-12 at 17:29:47 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:29:47 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:29:47 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fc08d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fbfbf90>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10fc0b7c0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fc11360>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10fc0b7c0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10fc0b7c0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fc11680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fc18760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fc187f0>}, 'description': 'products'}
2021-11-12 at 17:29:47 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fc11360>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10fc0b7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10fc0b7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10fc18760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10fc187f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10fc08d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10fc0b7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:29:47 | ERROR | products
2021-11-12 at 17:29:47 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:29:47 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10fc0b7c0>, for_update=False), comment='产品代码'))
2021-11-12 at 17:29:47 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:29:47 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fc1dd40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fc11bd0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fc11c20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fc23760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fc237c0>}, 'description': 'tokens'}
2021-11-12 at 17:29:47 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10fc23760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10fc237c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10fc1dd40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:29:47 | ERROR | tokens
2021-11-12 at 17:29:47 | ERROR | set()
2021-11-12 at 17:29:47 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:29:47 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:29:47 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10fc29040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10fc11d60>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10fc2c040>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10fc23d30>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10fc23d90>}, 'description': 'zinopara'}
2021-11-12 at 17:29:47 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10fc23d30>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10fc23d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10fc29040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:29:47 | ERROR | zinopara
2021-11-12 at 17:29:47 | ERROR | set()
2021-11-12 at 17:29:47 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:29:47 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:29:47 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10feda9c0>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10ff27ef0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10ff27c20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ff35370>, 'dialect_options': {}}
2021-11-12 at 17:29:47 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10ff35370>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10feda9c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:29:47 | CRITICAL | order_view
2021-11-12 at 17:29:47 | CRITICAL | set()
2021-11-12 at 17:29:47 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:29:47 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:31:41 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:31:41 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:31:41 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:31:41 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:31:41 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:31:41 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 17:31:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10292d0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1028bec20>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10292f360>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1029427c0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102949280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102949310>}, 'description': 'customers'}
2021-11-12 at 17:31:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10292f360>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102949280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102949310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10292d0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:31:41 | ERROR | customers
2021-11-12 at 17:31:41 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:31:41 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:31:41 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:31:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10292dd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10292f400>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10292f7c0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102942180>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102942590>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10293bee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10293bf70>}, 'description': 'employees'}
2021-11-12 at 17:31:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10292f7c0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102942180>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10293bee0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10293bf70>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10292dd40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:31:41 | ERROR | employees
2021-11-12 at 17:31:41 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-12 at 17:31:41 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:31:41 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:31:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102940ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102942900>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1029429a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1029496a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102949700>}, 'description': 'items'}
2021-11-12 at 17:31:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1029496a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102949700>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102940ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:31:41 | ERROR | items
2021-11-12 at 17:31:41 | ERROR | set()
2021-11-12 at 17:31:41 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:31:41 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:31:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1029374c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10292f810>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10292fc20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10293b820>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10293b8b0>}, 'description': 'offices'}
2021-11-12 at 17:31:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10293b820>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10293b8b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1029374c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:31:41 | ERROR | offices
2021-11-12 at 17:31:41 | ERROR | set()
2021-11-12 at 17:31:41 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:31:41 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:31:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102940e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102942a90>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102958040>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102942bd0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1029588b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10295fd00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10295fd90>}, 'description': 'orderdetails'}
2021-11-12 at 17:31:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102958040>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102942bd0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10295fd00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10295fd90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102940e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:31:41 | ERROR | orderdetails
2021-11-12 at 17:31:41 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:31:41 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:31:41 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:31:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10294f0c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102942c20>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102942c70>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102942e50>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102952310>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1029523a0>}, 'description': 'orders'}
2021-11-12 at 17:31:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102942c70>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102952310>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1029523a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10294f0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:31:41 | ERROR | orders
2021-11-12 at 17:31:41 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:31:41 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:31:41 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:31:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1029646c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102958a40>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102958ae0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102958bd0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10296a490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10296a4f0>}, 'description': 'payments'}
2021-11-12 at 17:31:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102958ae0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10296a490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10296a4f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1029646c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:31:41 | ERROR | payments
2021-11-12 at 17:31:41 | ERROR | set()
2021-11-12 at 17:31:41 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:31:41 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:31:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102959240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102958450>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102958540>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102952fd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10295f070>}, 'description': 'productlines'}
2021-11-12 at 17:31:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102952fd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10295f070>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102959240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:31:41 | ERROR | productlines
2021-11-12 at 17:31:41 | ERROR | set()
2021-11-12 at 17:31:41 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:31:41 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:31:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10294fd40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102958090>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1029527c0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102958400>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1029527c0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1029527c0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102958720>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10295f760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10295f7f0>}, 'description': 'products'}
2021-11-12 at 17:31:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102958400>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1029527c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1029527c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10295f760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10295f7f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10294fd40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1029527c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:31:41 | ERROR | products
2021-11-12 at 17:31:41 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:31:41 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1029527c0>, for_update=False), comment='产品代码'))
2021-11-12 at 17:31:41 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:31:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102964d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102958c70>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102958cc0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10296a760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10296a7c0>}, 'description': 'tokens'}
2021-11-12 at 17:31:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10296a760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10296a7c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102964d40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:31:41 | ERROR | tokens
2021-11-12 at 17:31:41 | ERROR | set()
2021-11-12 at 17:31:41 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:31:41 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:31:41 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10296f040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102958e00>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1029730e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10296ad30>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10296ad90>}, 'description': 'zinopara'}
2021-11-12 at 17:31:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10296ad30>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10296ad90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10296f040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:31:41 | ERROR | zinopara
2021-11-12 at 17:31:41 | ERROR | set()
2021-11-12 at 17:31:41 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:31:41 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:31:41 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102c20440>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102c33d10>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102c33c70>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102c39940>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 17:31:41 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102c39940>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102c20440>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:31:41 | CRITICAL | order_view
2021-11-12 at 17:31:41 | CRITICAL | set()
2021-11-12 at 17:31:41 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:31:41 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:35:11 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:35:11 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:35:11 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:35:11 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:35:12 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:35:12 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 17:35:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102e330c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102dc3b80>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e372c0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102e48720>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102e4f280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102e4f310>}, 'description': 'customers'}
2021-11-12 at 17:35:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e372c0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102e4f280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102e4f310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102e330c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:12 | ERROR | customers
2021-11-12 at 17:35:12 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:35:12 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:35:12 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:35:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102e33d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e37360>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e37720>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e480e0>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102e484f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102e40ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102e40f70>}, 'description': 'employees'}
2021-11-12 at 17:35:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e37720>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e480e0>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102e40ee0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102e40f70>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102e33d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:12 | ERROR | employees
2021-11-12 at 17:35:12 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-12 at 17:35:12 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:35:12 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:35:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102e46ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e48860>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102e48900>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102e4f6a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102e4f700>}, 'description': 'items'}
2021-11-12 at 17:35:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102e4f6a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102e4f700>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102e46ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:12 | ERROR | items
2021-11-12 at 17:35:12 | ERROR | set()
2021-11-12 at 17:35:12 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:35:12 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:35:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102e3d4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e37770>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102e37b80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102e40820>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102e408b0>}, 'description': 'offices'}
2021-11-12 at 17:35:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102e40820>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102e408b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102e3d4c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:12 | ERROR | offices
2021-11-12 at 17:35:12 | ERROR | set()
2021-11-12 at 17:35:12 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:35:12 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:35:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102e46e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e489f0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e48f40>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e48b30>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102e5e810>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102e65d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102e65d90>}, 'description': 'orderdetails'}
2021-11-12 at 17:35:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e48f40>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e48b30>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102e65d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102e65d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102e46e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:12 | ERROR | orderdetails
2021-11-12 at 17:35:12 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:35:12 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:35:12 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:35:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102e550c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e48b80>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e48bd0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102e48db0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102e58310>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102e583a0>}, 'description': 'orders'}
2021-11-12 at 17:35:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e48bd0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102e58310>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102e583a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102e550c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:12 | ERROR | orders
2021-11-12 at 17:35:12 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:35:12 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:35:12 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:35:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102e6a6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e5e9a0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e5ea40>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102e5eb30>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102e70490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102e704f0>}, 'description': 'payments'}
2021-11-12 at 17:35:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e5ea40>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102e70490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102e704f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102e6a6c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:12 | ERROR | payments
2021-11-12 at 17:35:12 | ERROR | set()
2021-11-12 at 17:35:12 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:35:12 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:35:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102e5f240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e5e3b0>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102e5e4a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102e58fd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102e65070>}, 'description': 'productlines'}
2021-11-12 at 17:35:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102e58fd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102e65070>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102e5f240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:12 | ERROR | productlines
2021-11-12 at 17:35:12 | ERROR | set()
2021-11-12 at 17:35:12 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:35:12 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:35:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102e55d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e48f90>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102e587c0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e5e360>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102e587c0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102e587c0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102e5e680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102e65760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102e657f0>}, 'description': 'products'}
2021-11-12 at 17:35:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e5e360>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102e587c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102e587c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102e65760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102e657f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102e55d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102e587c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:12 | ERROR | products
2021-11-12 at 17:35:12 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:35:12 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x102e587c0>, for_update=False), comment='产品代码'))
2021-11-12 at 17:35:12 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:35:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102e6ad40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e5ebd0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102e5ec20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102e70760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102e707c0>}, 'description': 'tokens'}
2021-11-12 at 17:35:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102e70760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102e707c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102e6ad40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:12 | ERROR | tokens
2021-11-12 at 17:35:12 | ERROR | set()
2021-11-12 at 17:35:12 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:35:12 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:35:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102e75040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102e5ed60>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x102e7a040>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x102e70d30>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x102e70d90>}, 'description': 'zinopara'}
2021-11-12 at 17:35:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x102e70d30>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x102e70d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102e75040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:12 | ERROR | zinopara
2021-11-12 at 17:35:12 | ERROR | set()
2021-11-12 at 17:35:12 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:35:12 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:35:12 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x103126440>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102a7e130>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10313a130>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10313f940>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 17:35:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10313f940>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x103126440>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:12 | CRITICAL | order_view
2021-11-12 at 17:35:12 | CRITICAL | set()
2021-11-12 at 17:35:12 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:35:12 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:35:35 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:35:35 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:35:35 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:35:35 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:35:35 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:35:35 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 17:35:35 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e3240c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e2b7ae0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e32b220>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e33b680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e340280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e340310>}, 'description': 'customers'}
2021-11-12 at 17:35:35 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e32b220>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e340280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e340310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e3240c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:35 | ERROR | customers
2021-11-12 at 17:35:35 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:35:35 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:35:35 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:35:35 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e324d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e32b2c0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e32b680>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e33b040>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e33b450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e332ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e332f70>}, 'description': 'employees'}
2021-11-12 at 17:35:35 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e32b680>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e33b040>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e332ee0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e332f70>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e324d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:35 | ERROR | employees
2021-11-12 at 17:35:35 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-12 at 17:35:35 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:35:35 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:35:35 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e337ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e33b7c0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e33b860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e3406a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e340700>}, 'description': 'items'}
2021-11-12 at 17:35:35 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e3406a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e340700>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e337ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:35 | ERROR | items
2021-11-12 at 17:35:35 | ERROR | set()
2021-11-12 at 17:35:35 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:35:35 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:35:35 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e32e4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e32b6d0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e32bae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e332820>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e3328b0>}, 'description': 'offices'}
2021-11-12 at 17:35:35 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e332820>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e3328b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e32e4c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:35 | ERROR | offices
2021-11-12 at 17:35:35 | ERROR | set()
2021-11-12 at 17:35:35 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:35:35 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:35:35 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e337e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e33b950>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e33bea0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e33ba90>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e34f770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e356d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e356d90>}, 'description': 'orderdetails'}
2021-11-12 at 17:35:35 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e33bea0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e33ba90>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e356d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e356d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e337e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:35 | ERROR | orderdetails
2021-11-12 at 17:35:35 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:35:35 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:35:35 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:35:35 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e3460c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e33bae0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e33bb30>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e33bd10>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e34a310>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e34a3a0>}, 'description': 'orders'}
2021-11-12 at 17:35:35 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e33bb30>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e34a310>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e34a3a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e3460c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:35 | ERROR | orders
2021-11-12 at 17:35:35 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:35:35 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:35:35 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:35:35 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e35b6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e34f900>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e34f9a0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e34fa90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e361490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e3614f0>}, 'description': 'payments'}
2021-11-12 at 17:35:35 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e34f9a0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e361490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e3614f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e35b6c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:35 | ERROR | payments
2021-11-12 at 17:35:35 | ERROR | set()
2021-11-12 at 17:35:35 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:35:35 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:35:35 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e351240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e34f310>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e34f400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e34afd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e356070>}, 'description': 'productlines'}
2021-11-12 at 17:35:35 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e34afd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e356070>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e351240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:35 | ERROR | productlines
2021-11-12 at 17:35:35 | ERROR | set()
2021-11-12 at 17:35:35 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:35:35 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:35:35 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e346d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e33bef0>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10e34a7c0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e34f2c0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10e34a7c0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10e34a7c0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e34f5e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e356760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e3567f0>}, 'description': 'products'}
2021-11-12 at 17:35:35 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e34f2c0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10e34a7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10e34a7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e356760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e3567f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e346d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10e34a7c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:35 | ERROR | products
2021-11-12 at 17:35:35 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:35:35 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10e34a7c0>, for_update=False), comment='产品代码'))
2021-11-12 at 17:35:35 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:35:35 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e35bd40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e34fb30>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e34fb80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e361760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e3617c0>}, 'description': 'tokens'}
2021-11-12 at 17:35:35 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e361760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e3617c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e35bd40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:35 | ERROR | tokens
2021-11-12 at 17:35:35 | ERROR | set()
2021-11-12 at 17:35:35 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:35:35 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:35:35 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e366040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e34fcc0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e34ff40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e361d30>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e361d90>}, 'description': 'zinopara'}
2021-11-12 at 17:35:35 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e361d30>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e361d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e366040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:35 | ERROR | zinopara
2021-11-12 at 17:35:35 | ERROR | set()
2021-11-12 at 17:35:35 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:35:35 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:35:35 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e617440>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e62bb80>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e62bae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e630940>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 17:35:35 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e630940>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e617440>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:35:35 | CRITICAL | order_view
2021-11-12 at 17:35:35 | CRITICAL | set()
2021-11-12 at 17:35:35 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:35:35 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:42:53 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:42:53 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:42:53 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:42:53 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:42:53 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:42:53 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 17:42:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10540b0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10539bb80>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10540f2c0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105420720>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105427280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x105427310>}, 'description': 'customers'}
2021-11-12 at 17:42:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10540f2c0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105427280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x105427310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10540b0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:42:53 | ERROR | customers
2021-11-12 at 17:42:53 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:42:53 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:42:53 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:42:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10540bd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10540f360>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10540f720>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054200e0>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1054204f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105419ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x105419f70>}, 'description': 'employees'}
2021-11-12 at 17:42:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10540f720>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054200e0>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105419ee0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x105419f70>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10540bd40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:42:53 | ERROR | employees
2021-11-12 at 17:42:53 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-12 at 17:42:53 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:42:53 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:42:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10541eac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105420860>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105420900>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1054276a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x105427700>}, 'description': 'items'}
2021-11-12 at 17:42:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1054276a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x105427700>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10541eac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:42:53 | ERROR | items
2021-11-12 at 17:42:53 | ERROR | set()
2021-11-12 at 17:42:53 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:42:53 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:42:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1054154c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10540f770>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10540fb80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105419820>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1054198b0>}, 'description': 'offices'}
2021-11-12 at 17:42:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105419820>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1054198b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1054154c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:42:53 | ERROR | offices
2021-11-12 at 17:42:53 | ERROR | set()
2021-11-12 at 17:42:53 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:42:53 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:42:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10541ee40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054209f0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105420f40>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105420b30>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105436810>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10543dd00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10543dd90>}, 'description': 'orderdetails'}
2021-11-12 at 17:42:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105420f40>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105420b30>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10543dd00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10543dd90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10541ee40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:42:53 | ERROR | orderdetails
2021-11-12 at 17:42:53 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:42:53 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:42:53 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:42:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10542d0c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105420b80>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105420bd0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105420db0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105430310>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1054303a0>}, 'description': 'orders'}
2021-11-12 at 17:42:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105420bd0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105430310>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1054303a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10542d0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:42:53 | ERROR | orders
2021-11-12 at 17:42:53 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:42:53 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:42:53 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:42:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1054426c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054369a0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105436a40>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105436b30>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105448490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1054484f0>}, 'description': 'payments'}
2021-11-12 at 17:42:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105436a40>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105448490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1054484f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1054426c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:42:53 | ERROR | payments
2021-11-12 at 17:42:53 | ERROR | set()
2021-11-12 at 17:42:53 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:42:53 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:42:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105437240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054363b0>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1054364a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105430fd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10543d070>}, 'description': 'productlines'}
2021-11-12 at 17:42:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105430fd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10543d070>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105437240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:42:53 | ERROR | productlines
2021-11-12 at 17:42:53 | ERROR | set()
2021-11-12 at 17:42:53 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:42:53 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:42:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10542dd40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105420f90>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1054307c0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105436360>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1054307c0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1054307c0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105436680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10543d760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10543d7f0>}, 'description': 'products'}
2021-11-12 at 17:42:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105436360>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1054307c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1054307c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10543d760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10543d7f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10542dd40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1054307c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:42:53 | ERROR | products
2021-11-12 at 17:42:53 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:42:53 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1054307c0>, for_update=False), comment='产品代码'))
2021-11-12 at 17:42:53 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:42:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105442d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105436bd0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105436c20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105448760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1054487c0>}, 'description': 'tokens'}
2021-11-12 at 17:42:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105448760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1054487c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105442d40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:42:53 | ERROR | tokens
2021-11-12 at 17:42:53 | ERROR | set()
2021-11-12 at 17:42:53 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:42:53 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:42:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10544d040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105436d60>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105452040>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105448d30>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x105448d90>}, 'description': 'zinopara'}
2021-11-12 at 17:42:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105448d30>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x105448d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10544d040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:42:53 | ERROR | zinopara
2021-11-12 at 17:42:53 | ERROR | set()
2021-11-12 at 17:42:53 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:42:53 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:42:53 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1056fca40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10571ea40>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10571ea90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105722940>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 17:42:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105722940>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1056fca40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:42:53 | CRITICAL | order_view
2021-11-12 at 17:42:53 | CRITICAL | set()
2021-11-12 at 17:42:53 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:42:53 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:48:32 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:48:33 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:48:33 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:48:33 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:48:33 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:48:33 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 17:48:33 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1059f80c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1059f6a90>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a691d0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105a7c630>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105a7f280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x105a7f310>}, 'description': 'customers'}
2021-11-12 at 17:48:33 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a691d0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105a7f280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x105a7f310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1059f80c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:48:33 | ERROR | customers
2021-11-12 at 17:48:33 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:48:33 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:48:33 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:48:33 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1059f8d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a69270>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a69630>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a69f90>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105a7c400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105a70ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x105a70f70>}, 'description': 'employees'}
2021-11-12 at 17:48:33 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a69630>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a69f90>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105a70ee0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x105a70f70>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1059f8d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:48:33 | ERROR | employees
2021-11-12 at 17:48:33 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-12 at 17:48:33 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:48:33 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:48:33 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105a76ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a7c770>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105a7c810>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105a7f6a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x105a7f700>}, 'description': 'items'}
2021-11-12 at 17:48:33 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105a7f6a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x105a7f700>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105a76ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:48:33 | ERROR | items
2021-11-12 at 17:48:33 | ERROR | set()
2021-11-12 at 17:48:33 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:48:33 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:48:33 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105a6c4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a69680>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105a69a90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105a70820>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x105a708b0>}, 'description': 'offices'}
2021-11-12 at 17:48:33 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105a70820>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x105a708b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105a6c4c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:48:33 | ERROR | offices
2021-11-12 at 17:48:33 | ERROR | set()
2021-11-12 at 17:48:33 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:48:33 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:48:33 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105a76e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a7c900>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a7ce50>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a7ca40>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105a8e720>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105a95d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x105a95d90>}, 'description': 'orderdetails'}
2021-11-12 at 17:48:33 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a7ce50>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a7ca40>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105a95d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x105a95d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105a76e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:48:33 | ERROR | orderdetails
2021-11-12 at 17:48:33 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:48:33 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:48:33 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:48:33 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105a850c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a7ca90>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a7cae0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105a7ccc0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105a89310>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x105a893a0>}, 'description': 'orders'}
2021-11-12 at 17:48:33 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a7cae0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105a89310>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x105a893a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105a850c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:48:33 | ERROR | orders
2021-11-12 at 17:48:33 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:48:33 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:48:33 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:48:33 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105a9a6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a8e8b0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a8e950>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105a8ea40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105aa0490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x105aa04f0>}, 'description': 'payments'}
2021-11-12 at 17:48:33 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a8e950>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105aa0490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x105aa04f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105a9a6c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:48:33 | ERROR | payments
2021-11-12 at 17:48:33 | ERROR | set()
2021-11-12 at 17:48:33 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:48:33 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:48:33 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105a90240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a8e2c0>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105a8e3b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105a89fd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x105a95070>}, 'description': 'productlines'}
2021-11-12 at 17:48:33 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105a89fd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x105a95070>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105a90240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:48:33 | ERROR | productlines
2021-11-12 at 17:48:33 | ERROR | set()
2021-11-12 at 17:48:33 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:48:33 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:48:33 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105a85d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a7cea0>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x105a897c0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a8e270>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x105a897c0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x105a897c0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105a8e590>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105a95760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x105a957f0>}, 'description': 'products'}
2021-11-12 at 17:48:33 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a8e270>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x105a897c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x105a897c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105a95760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x105a957f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105a85d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x105a897c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:48:33 | ERROR | products
2021-11-12 at 17:48:33 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:48:33 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x105a897c0>, for_update=False), comment='产品代码'))
2021-11-12 at 17:48:33 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:48:33 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105a9ad40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a8eae0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105a8eb30>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105aa0760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x105aa07c0>}, 'description': 'tokens'}
2021-11-12 at 17:48:33 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105aa0760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x105aa07c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105a9ad40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:48:33 | ERROR | tokens
2021-11-12 at 17:48:33 | ERROR | set()
2021-11-12 at 17:48:33 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:48:33 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:48:33 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105aa5040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105a8ec70>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105a8eef0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105aa0d30>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x105aa0d90>}, 'description': 'zinopara'}
2021-11-12 at 17:48:33 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105aa0d30>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x105aa0d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105aa5040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:48:33 | ERROR | zinopara
2021-11-12 at 17:48:33 | ERROR | set()
2021-11-12 at 17:48:33 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:48:33 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:48:33 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105d56a40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105d7aa40>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x105d7aa90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x105d7c940>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 17:48:33 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x105d7c940>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105d56a40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:48:33 | CRITICAL | order_view
2021-11-12 at 17:48:33 | CRITICAL | set()
2021-11-12 at 17:48:33 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:48:33 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:49:35 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:49:35 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:49:35 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:49:35 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:49:36 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:49:36 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 17:49:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5330c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f4c3ae0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f53a220>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f54a680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f54f280>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f54f310>}, 'description': 'customers'}
2021-11-12 at 17:49:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f53a220>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc'))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f54f280>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f54f310>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5330c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:49:36 | ERROR | customers
2021-11-12 at 17:49:36 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:49:36 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:49:36 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:49:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f533d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f53a2c0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f53a680>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f54a040>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f54a450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f540ee0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f540f70>}, 'description': 'employees'}
2021-11-12 at 17:49:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f53a680>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f54a040>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f540ee0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f540f70>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f533d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber'), ForeignKey('mysqlsrc.offices.officeCode')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:49:36 | ERROR | employees
2021-11-12 at 17:49:36 | ERROR | {Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False)), Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>))}
2021-11-12 at 17:49:36 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:49:36 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:49:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f546ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f54a7c0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f54a860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f54f6a0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f54f700>}, 'description': 'items'}
2021-11-12 at 17:49:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f54f6a0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f54f700>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f546ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:49:36 | ERROR | items
2021-11-12 at 17:49:36 | ERROR | set()
2021-11-12 at 17:49:36 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:49:36 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:49:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f53d4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f53a6d0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f53aae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f540820>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5408b0>}, 'description': 'offices'}
2021-11-12 at 17:49:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f540820>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f5408b0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f53d4c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:49:36 | ERROR | offices
2021-11-12 at 17:49:36 | ERROR | set()
2021-11-12 at 17:49:36 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:49:36 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:49:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f546e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f54a950>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f54aea0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f54aa90>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f55e770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f565d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f565d90>}, 'description': 'orderdetails'}
2021-11-12 at 17:49:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f54aea0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f54aa90>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f565d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f565d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f546e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.products.productCode'), ForeignKey('mysqlsrc.orders.orderNumber')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:49:36 | ERROR | orderdetails
2021-11-12 at 17:49:36 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:49:36 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:49:36 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:49:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5550c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f54aae0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f54ab30>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f54ad10>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f558310>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5583a0>}, 'description': 'orders'}
2021-11-12 at 17:49:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f54ab30>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f558310>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f5583a0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f5550c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:49:36 | ERROR | orders
2021-11-12 at 17:49:36 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:49:36 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:49:36 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:49:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f56a6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f55e900>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f55e9a0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f55ea90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f570490>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5704f0>}, 'description': 'payments'}
2021-11-12 at 17:49:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f55e9a0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f570490>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f5704f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f56a6c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:49:36 | ERROR | payments
2021-11-12 at 17:49:36 | ERROR | set()
2021-11-12 at 17:49:36 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:49:36 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:49:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f55f240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f55e310>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f55e400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f558fd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f565070>}, 'description': 'productlines'}
2021-11-12 at 17:49:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f558fd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f565070>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f55f240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:49:36 | ERROR | productlines
2021-11-12 at 17:49:36 | ERROR | set()
2021-11-12 at 17:49:36 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:49:36 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:49:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f555d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f54aef0>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f5587c0>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f55e2c0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f5587c0>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f5587c0>, for_update=False), comment='产品代码'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f55e5e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f565760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5657f0>}, 'description': 'products'}
2021-11-12 at 17:49:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f55e2c0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f5587c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc')), PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f5587c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f565760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f5657f0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f555d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f5587c0>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:49:36 | ERROR | products
2021-11-12 at 17:49:36 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:49:36 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10f5587c0>, for_update=False), comment='产品代码'))
2021-11-12 at 17:49:36 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:49:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f56ad40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f55eb30>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f55eb80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f570760>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f5707c0>}, 'description': 'tokens'}
2021-11-12 at 17:49:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f570760>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f5707c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f56ad40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:49:36 | ERROR | tokens
2021-11-12 at 17:49:36 | ERROR | set()
2021-11-12 at 17:49:36 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:49:36 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:49:36 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f575040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f55ecc0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f55ef40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f570d30>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10f570d90>}, 'description': 'zinopara'}
2021-11-12 at 17:49:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f570d30>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10f570d90>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f575040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:49:36 | ERROR | zinopara
2021-11-12 at 17:49:36 | ERROR | set()
2021-11-12 at 17:49:36 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:49:36 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:49:36 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10f826a40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10f849950>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10f8499a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10f84a940>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 17:49:36 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10f84a940>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10f826a40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:49:36 | CRITICAL | order_view
2021-11-12 at 17:49:36 | CRITICAL | set()
2021-11-12 at 17:49:36 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:49:36 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:50:38 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:50:38 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:50:38 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:50:38 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:50:39 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:50:39 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 17:50:39 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b2f30c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b2f1a90>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b3651d0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b377630>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b37a250>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b37a2e0>}, 'description': 'customers'}
2021-11-12 at 17:50:39 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b3651d0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10b37a250>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10b37a2e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10b2f30c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:50:39 | ERROR | customers
2021-11-12 at 17:50:39 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:50:39 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:50:39 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:50:39 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b2f3d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b365270>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b365f90>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b365630>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b377400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b36beb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b36bf40>}, 'description': 'employees'}
2021-11-12 at 17:50:39 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b365f90>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b365630>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10b36beb0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10b36bf40>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10b2f3d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:50:39 | ERROR | employees
2021-11-12 at 17:50:39 | ERROR | {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}
2021-11-12 at 17:50:39 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:50:39 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:50:39 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b371ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b377770>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b377810>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b37a670>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b37a6d0>}, 'description': 'items'}
2021-11-12 at 17:50:39 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10b37a670>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10b37a6d0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10b371ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:50:39 | ERROR | items
2021-11-12 at 17:50:39 | ERROR | set()
2021-11-12 at 17:50:39 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:50:39 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:50:39 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b3684c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b365680>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b365a90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b36b7f0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b36b880>}, 'description': 'offices'}
2021-11-12 at 17:50:39 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10b36b7f0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10b36b880>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10b3684c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:50:39 | ERROR | offices
2021-11-12 at 17:50:39 | ERROR | set()
2021-11-12 at 17:50:39 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:50:39 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:50:39 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b371e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b377900>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b377e50>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b377a40>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b389720>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b390cd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b390d60>}, 'description': 'orderdetails'}
2021-11-12 at 17:50:39 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b377e50>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b377a40>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10b390cd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10b390d60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10b371e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:50:39 | ERROR | orderdetails
2021-11-12 at 17:50:39 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:50:39 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:50:39 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:50:39 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b37f0c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b377a90>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b377ae0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b377cc0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b3832e0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b383370>}, 'description': 'orders'}
2021-11-12 at 17:50:39 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b377ae0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10b3832e0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10b383370>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10b37f0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:50:39 | ERROR | orders
2021-11-12 at 17:50:39 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:50:39 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:50:39 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:50:39 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b3956c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b3898b0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b389950>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b389a40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b39b460>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b39b4c0>}, 'description': 'payments'}
2021-11-12 at 17:50:39 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b389950>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10b39b460>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10b39b4c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10b3956c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:50:39 | ERROR | payments
2021-11-12 at 17:50:39 | ERROR | set()
2021-11-12 at 17:50:39 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:50:39 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:50:39 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b38a240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b3892c0>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b3893b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b383fa0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b390040>}, 'description': 'productlines'}
2021-11-12 at 17:50:39 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10b383fa0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10b390040>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10b38a240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:50:39 | ERROR | productlines
2021-11-12 at 17:50:39 | ERROR | set()
2021-11-12 at 17:50:39 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:50:39 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:50:39 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b37fd40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b377ea0>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10b383790>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10b383790>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b389270>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10b383790>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b389590>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b390730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b3907c0>}, 'description': 'products'}
2021-11-12 at 17:50:39 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10b383790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b389270>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10b383790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10b390730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10b3907c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10b37fd40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10b383790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:50:39 | ERROR | products
2021-11-12 at 17:50:39 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:50:39 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10b383790>, for_update=False), comment='产品代码'))
2021-11-12 at 17:50:39 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:50:39 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b395d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b389ae0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b389b30>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b39b730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b39b790>}, 'description': 'tokens'}
2021-11-12 at 17:50:39 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10b39b730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10b39b790>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10b395d40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:50:39 | ERROR | tokens
2021-11-12 at 17:50:39 | ERROR | set()
2021-11-12 at 17:50:39 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:50:39 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:50:39 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b3a0040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b389c70>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b389ef0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b39bd00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10b39bd60>}, 'description': 'zinopara'}
2021-11-12 at 17:50:39 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10b39bd00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10b39bd60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10b3a0040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:50:39 | ERROR | zinopara
2021-11-12 at 17:50:39 | ERROR | set()
2021-11-12 at 17:50:39 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:50:39 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:50:39 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10b651a40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10b674a40>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10b674a90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10b677910>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 17:50:39 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10b677910>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10b651a40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:50:39 | CRITICAL | order_view
2021-11-12 at 17:50:39 | CRITICAL | set()
2021-11-12 at 17:50:39 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:50:39 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:51:46 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:51:46 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:51:46 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:51:46 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:51:46 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:51:46 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 17:51:46 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1090670c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x109065a40>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090d9180>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1090eb5e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1090ee250>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1090ee2e0>}, 'description': 'customers'}
2021-11-12 at 17:51:46 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090d9180>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1090ee250>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1090ee2e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1090670c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:51:46 | ERROR | customers
2021-11-12 at 17:51:46 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:51:46 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:51:46 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:51:46 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109067d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090d9220>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090d9f40>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090d95e0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1090eb3b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1090dfeb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1090dff40>}, 'description': 'employees'}
2021-11-12 at 17:51:46 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090d9f40>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090d95e0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1090dfeb0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1090dff40>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x109067d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:51:46 | ERROR | employees
2021-11-12 at 17:51:46 | ERROR | {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}
2021-11-12 at 17:51:46 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:51:46 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:51:46 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1090e4ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090eb720>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1090eb7c0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1090ee670>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1090ee6d0>}, 'description': 'items'}
2021-11-12 at 17:51:46 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1090ee670>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1090ee6d0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1090e4ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:51:46 | ERROR | items
2021-11-12 at 17:51:46 | ERROR | set()
2021-11-12 at 17:51:46 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:51:46 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:51:46 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1090dc4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090d9630>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1090d9a40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1090df7f0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1090df880>}, 'description': 'offices'}
2021-11-12 at 17:51:46 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1090df7f0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1090df880>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1090dc4c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:51:46 | ERROR | offices
2021-11-12 at 17:51:46 | ERROR | set()
2021-11-12 at 17:51:46 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:51:46 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:51:46 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1090e4e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090eb8b0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090ebe00>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090eb9f0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1090fd6d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109104cd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x109104d60>}, 'description': 'orderdetails'}
2021-11-12 at 17:51:46 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090ebe00>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090eb9f0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x109104cd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x109104d60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1090e4e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:51:46 | ERROR | orderdetails
2021-11-12 at 17:51:46 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:51:46 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:51:46 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:51:46 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1090f30c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090eba40>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090eba90>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1090ebc70>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1090f72e0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1090f7370>}, 'description': 'orders'}
2021-11-12 at 17:51:46 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090eba90>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1090f72e0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1090f7370>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1090f30c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:51:46 | ERROR | orders
2021-11-12 at 17:51:46 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:51:46 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:51:46 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:51:46 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1091096c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090fd860>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090fd900>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1090fd9f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10910f460>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10910f4c0>}, 'description': 'payments'}
2021-11-12 at 17:51:46 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090fd900>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10910f460>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10910f4c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1091096c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:51:46 | ERROR | payments
2021-11-12 at 17:51:46 | ERROR | set()
2021-11-12 at 17:51:46 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:51:46 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:51:46 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1090fe240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090fd270>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1090fd360>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1090f7fa0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x109104040>}, 'description': 'productlines'}
2021-11-12 at 17:51:46 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1090f7fa0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x109104040>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1090fe240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:51:46 | ERROR | productlines
2021-11-12 at 17:51:46 | ERROR | set()
2021-11-12 at 17:51:46 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:51:46 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:51:46 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1090f3d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090ebe50>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1090f7790>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1090f7790>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090fd220>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1090f7790>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1090fd540>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x109104730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1091047c0>}, 'description': 'products'}
2021-11-12 at 17:51:46 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1090f7790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090fd220>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1090f7790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x109104730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1091047c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1090f3d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1090f7790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:51:46 | ERROR | products
2021-11-12 at 17:51:46 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:51:46 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1090f7790>, for_update=False), comment='产品代码'))
2021-11-12 at 17:51:46 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:51:46 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109109d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090fda90>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1090fdae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10910f730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10910f790>}, 'description': 'tokens'}
2021-11-12 at 17:51:46 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10910f730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10910f790>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x109109d40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:51:46 | ERROR | tokens
2021-11-12 at 17:51:46 | ERROR | set()
2021-11-12 at 17:51:46 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:51:46 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:51:46 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x109113040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1090fdc20>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1090fdea0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10910fd00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10910fd60>}, 'description': 'zinopara'}
2021-11-12 at 17:51:46 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10910fd00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10910fd60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x109113040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:51:46 | ERROR | zinopara
2021-11-12 at 17:51:46 | ERROR | set()
2021-11-12 at 17:51:46 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:51:46 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:51:46 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1093c5a40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1093e79a0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1093e79f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1093e8910>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 17:51:46 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1093e8910>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1093c5a40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:51:46 | CRITICAL | order_view
2021-11-12 at 17:51:46 | CRITICAL | set()
2021-11-12 at 17:51:46 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:51:46 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:52:11 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:52:11 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:52:11 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:52:11 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:52:12 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:52:12 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 17:52:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8420c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c83dbd0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8b0310>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c8c2770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c8c9250>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c8c92e0>}, 'description': 'customers'}
2021-11-12 at 17:52:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8b0310>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c8c9250>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c8c92e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8420c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:52:12 | ERROR | customers
2021-11-12 at 17:52:12 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:52:12 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:52:12 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:52:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c842d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8b03b0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8c2130>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8b0770>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c8c2540>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c8baeb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c8baf40>}, 'description': 'employees'}
2021-11-12 at 17:52:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8c2130>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8b0770>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c8baeb0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c8baf40>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c842d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:52:12 | ERROR | employees
2021-11-12 at 17:52:12 | ERROR | {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}
2021-11-12 at 17:52:12 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:52:12 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:52:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8c0ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8c28b0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c8c2950>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c8c9670>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c8c96d0>}, 'description': 'items'}
2021-11-12 at 17:52:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c8c9670>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c8c96d0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8c0ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:52:12 | ERROR | items
2021-11-12 at 17:52:12 | ERROR | set()
2021-11-12 at 17:52:12 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:52:12 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:52:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8b74c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8b07c0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c8b0bd0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c8ba7f0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c8ba880>}, 'description': 'offices'}
2021-11-12 at 17:52:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c8ba7f0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c8ba880>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8b74c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:52:12 | ERROR | offices
2021-11-12 at 17:52:12 | ERROR | set()
2021-11-12 at 17:52:12 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:52:12 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:52:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8c0e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8c2a40>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8c2f90>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8c2b80>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c8d8860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c8dfcd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c8dfd60>}, 'description': 'orderdetails'}
2021-11-12 at 17:52:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8c2f90>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8c2b80>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c8dfcd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c8dfd60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8c0e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:52:12 | ERROR | orderdetails
2021-11-12 at 17:52:12 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:52:12 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:52:12 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:52:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8cf0c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8c2bd0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8c2c20>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c8c2e00>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c8d22e0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c8d2370>}, 'description': 'orders'}
2021-11-12 at 17:52:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8c2c20>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c8d22e0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c8d2370>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8cf0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:52:12 | ERROR | orders
2021-11-12 at 17:52:12 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:52:12 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:52:12 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:52:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8e46c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8d89f0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8d8a90>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c8d8b80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c8ea460>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c8ea4c0>}, 'description': 'payments'}
2021-11-12 at 17:52:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8d8a90>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c8ea460>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c8ea4c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8e46c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:52:12 | ERROR | payments
2021-11-12 at 17:52:12 | ERROR | set()
2021-11-12 at 17:52:12 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:52:12 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:52:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8d9240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8d8400>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c8d84f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c8d2fa0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c8df040>}, 'description': 'productlines'}
2021-11-12 at 17:52:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c8d2fa0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c8df040>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8d9240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:52:12 | ERROR | productlines
2021-11-12 at 17:52:12 | ERROR | set()
2021-11-12 at 17:52:12 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:52:12 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:52:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8cfd40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8d8040>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10c8d2790>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10c8d2790>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8d83b0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10c8d2790>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c8d86d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c8df730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c8df7c0>}, 'description': 'products'}
2021-11-12 at 17:52:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10c8d2790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8d83b0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10c8d2790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c8df730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c8df7c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8cfd40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10c8d2790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:52:12 | ERROR | products
2021-11-12 at 17:52:12 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:52:12 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10c8d2790>, for_update=False), comment='产品代码'))
2021-11-12 at 17:52:12 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:52:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8e4d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8d8c20>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c8d8c70>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c8ea730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c8ea790>}, 'description': 'tokens'}
2021-11-12 at 17:52:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c8ea730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c8ea790>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8e4d40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:52:12 | ERROR | tokens
2021-11-12 at 17:52:12 | ERROR | set()
2021-11-12 at 17:52:12 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:52:12 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:52:12 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8ef040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c8d8db0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c8f3090>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c8ead00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c8ead60>}, 'description': 'zinopara'}
2021-11-12 at 17:52:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c8ead00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c8ead60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c8ef040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:52:12 | ERROR | zinopara
2021-11-12 at 17:52:12 | ERROR | set()
2021-11-12 at 17:52:12 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:52:12 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:52:12 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10cb9fa40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10cbc4a90>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10cbc4ae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10cbc6910>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 17:52:12 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10cbc6910>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10cb9fa40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:52:12 | CRITICAL | order_view
2021-11-12 at 17:52:12 | CRITICAL | set()
2021-11-12 at 17:52:12 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:52:12 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:55:59 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:55:59 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:55:59 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:55:59 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:56:00 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:56:00 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 17:56:00 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c2d30c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c241b30>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c345270>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c3546d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c35a250>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c35a2e0>}, 'description': 'customers'}
2021-11-12 at 17:56:00 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c345270>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c35a250>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c35a2e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c2d30c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:56:00 | ERROR | customers
2021-11-12 at 17:56:00 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:56:00 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:56:00 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:56:00 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c2d3d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c345310>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c354090>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c3456d0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c3544a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c34ceb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c34cf40>}, 'description': 'employees'}
2021-11-12 at 17:56:00 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c354090>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c3456d0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c34ceb0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c34cf40>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c2d3d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:56:00 | ERROR | employees
2021-11-12 at 17:56:00 | ERROR | {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}
2021-11-12 at 17:56:00 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:56:00 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:56:00 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c351ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c354810>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c3548b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c35a670>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c35a6d0>}, 'description': 'items'}
2021-11-12 at 17:56:00 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c35a670>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c35a6d0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c351ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:56:00 | ERROR | items
2021-11-12 at 17:56:00 | ERROR | set()
2021-11-12 at 17:56:00 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:56:00 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:56:00 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c3484c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c345720>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c345b30>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c34c7f0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c34c880>}, 'description': 'offices'}
2021-11-12 at 17:56:00 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c34c7f0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c34c880>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c3484c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:56:00 | ERROR | offices
2021-11-12 at 17:56:00 | ERROR | set()
2021-11-12 at 17:56:00 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:56:00 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:56:00 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c351e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c3549a0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c354ef0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c354ae0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c3697c0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c370cd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c370d60>}, 'description': 'orderdetails'}
2021-11-12 at 17:56:00 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c354ef0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c354ae0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c370cd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c370d60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c351e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:56:00 | ERROR | orderdetails
2021-11-12 at 17:56:00 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:56:00 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:56:00 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:56:00 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c3600c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c354b30>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c354b80>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c354d60>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c3632e0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c363370>}, 'description': 'orders'}
2021-11-12 at 17:56:00 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c354b80>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c3632e0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c363370>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c3600c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:56:00 | ERROR | orders
2021-11-12 at 17:56:00 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:56:00 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:56:00 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:56:00 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c3756c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c369950>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c3699f0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c369ae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c37b460>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c37b4c0>}, 'description': 'payments'}
2021-11-12 at 17:56:00 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c3699f0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c37b460>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c37b4c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c3756c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:56:00 | ERROR | payments
2021-11-12 at 17:56:00 | ERROR | set()
2021-11-12 at 17:56:00 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:56:00 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:56:00 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c36b240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c369360>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c369450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c363fa0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c370040>}, 'description': 'productlines'}
2021-11-12 at 17:56:00 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c363fa0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c370040>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c36b240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:56:00 | ERROR | productlines
2021-11-12 at 17:56:00 | ERROR | set()
2021-11-12 at 17:56:00 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:56:00 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:56:00 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c360d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c354f40>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10c363790>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10c363790>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c369310>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10c363790>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c369630>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c370730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c3707c0>}, 'description': 'products'}
2021-11-12 at 17:56:00 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10c363790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c369310>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10c363790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c370730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c3707c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c360d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10c363790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:56:00 | ERROR | products
2021-11-12 at 17:56:00 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:56:00 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10c363790>, for_update=False), comment='产品代码'))
2021-11-12 at 17:56:00 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:56:00 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c375d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c369b80>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c369bd0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c37b730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c37b790>}, 'description': 'tokens'}
2021-11-12 at 17:56:00 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c37b730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c37b790>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c375d40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:56:00 | ERROR | tokens
2021-11-12 at 17:56:00 | ERROR | set()
2021-11-12 at 17:56:00 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:56:00 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:56:00 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c380040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c369d10>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c369f90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c37bd00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10c37bd60>}, 'description': 'zinopara'}
2021-11-12 at 17:56:00 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c37bd00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10c37bd60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c380040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:56:00 | ERROR | zinopara
2021-11-12 at 17:56:00 | ERROR | set()
2021-11-12 at 17:56:00 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:56:00 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:56:00 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10c630a40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10c6549f0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10c654a40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10c656910>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 17:56:00 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10c656910>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10c630a40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:56:00 | CRITICAL | order_view
2021-11-12 at 17:56:00 | CRITICAL | set()
2021-11-12 at 17:56:00 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:56:00 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:59:12 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:59:13 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:59:13 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:59:13 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:59:13 | ERROR | Exception at gen_schema() name 'INTEGER' is not defined 
2021-11-12 at 17:59:13 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:59:13 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 17:59:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e2f00c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e281b30>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e2f8270>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e3066d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e30d250>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e30d2e0>}, 'description': 'customers'}
2021-11-12 at 17:59:13 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e2f8270>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e30d250>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e30d2e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e2f00c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:13 | ERROR | customers
2021-11-12 at 17:59:13 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:59:13 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:59:13 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:59:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e2f0d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e2f8310>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e306090>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e2f86d0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e3064a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e2ffeb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e2fff40>}, 'description': 'employees'}
2021-11-12 at 17:59:13 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e306090>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e2f86d0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e2ffeb0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e2fff40>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e2f0d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:13 | ERROR | employees
2021-11-12 at 17:59:13 | ERROR | {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}
2021-11-12 at 17:59:13 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:59:13 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:59:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e304ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e306810>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e3068b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e30d670>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e30d6d0>}, 'description': 'items'}
2021-11-12 at 17:59:13 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e30d670>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e30d6d0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e304ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:13 | ERROR | items
2021-11-12 at 17:59:13 | ERROR | set()
2021-11-12 at 17:59:13 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:59:13 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:59:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e2fb4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e2f8720>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e2f8b30>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e2ff7f0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e2ff880>}, 'description': 'offices'}
2021-11-12 at 17:59:13 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e2ff7f0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e2ff880>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e2fb4c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:13 | ERROR | offices
2021-11-12 at 17:59:13 | ERROR | set()
2021-11-12 at 17:59:13 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:59:13 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:59:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e304e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e3069a0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e306ef0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e306ae0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e31c7c0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e323cd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e323d60>}, 'description': 'orderdetails'}
2021-11-12 at 17:59:13 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e306ef0>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e306ae0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e323cd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e323d60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e304e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:13 | ERROR | orderdetails
2021-11-12 at 17:59:13 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:59:13 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:59:13 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:59:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e3130c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e306b30>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e306b80>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e306d60>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e3172e0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e317370>}, 'description': 'orders'}
2021-11-12 at 17:59:13 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e306b80>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e3172e0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e317370>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e3130c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:13 | ERROR | orders
2021-11-12 at 17:59:13 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:59:13 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:59:13 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:59:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e3286c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e31c950>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e31c9f0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e31cae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e32e460>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e32e4c0>}, 'description': 'payments'}
2021-11-12 at 17:59:13 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e31c9f0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e32e460>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e32e4c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e3286c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:13 | ERROR | payments
2021-11-12 at 17:59:13 | ERROR | set()
2021-11-12 at 17:59:13 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:59:13 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:59:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e31e240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e31c360>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e31c450>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e317fa0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e323040>}, 'description': 'productlines'}
2021-11-12 at 17:59:13 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e317fa0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e323040>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e31e240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:13 | ERROR | productlines
2021-11-12 at 17:59:13 | ERROR | set()
2021-11-12 at 17:59:13 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:59:13 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:59:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e313d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e306f40>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10e317790>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10e317790>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e31c310>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10e317790>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e31c630>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e323730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e3237c0>}, 'description': 'products'}
2021-11-12 at 17:59:13 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10e317790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e31c310>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10e317790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e323730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e3237c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e313d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10e317790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:13 | ERROR | products
2021-11-12 at 17:59:13 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:59:13 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10e317790>, for_update=False), comment='产品代码'))
2021-11-12 at 17:59:13 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:59:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e328d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e31cb80>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e31cbd0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e32e730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e32e790>}}
2021-11-12 at 17:59:13 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e32e730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e32e790>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e328d40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:13 | ERROR | tokens
2021-11-12 at 17:59:13 | ERROR | set()
2021-11-12 at 17:59:13 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:59:13 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:59:13 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e333040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e31cd10>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e31cf90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e32ed00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10e32ed60>}, 'description': 'zinopara'}
2021-11-12 at 17:59:13 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e32ed00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10e32ed60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e333040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:13 | ERROR | zinopara
2021-11-12 at 17:59:13 | ERROR | set()
2021-11-12 at 17:59:13 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:59:13 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:59:13 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10e5d76c0>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10e622ae0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10e622ea0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10e638d60>, 'dialect_options': {}}
2021-11-12 at 17:59:13 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10e638d60>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10e5d76c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:13 | CRITICAL | order_view
2021-11-12 at 17:59:13 | CRITICAL | set()
2021-11-12 at 17:59:13 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:59:13 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 17:59:54 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 17:59:54 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 17:59:54 | DEBUG | Generate Schema file from database ...
2021-11-12 at 17:59:54 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 17:59:55 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 17:59:55 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 17:59:55 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10aa2c0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10a99ac20>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aa99360>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10aaac7c0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10aab3250>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10aab32e0>}, 'description': 'customers'}
2021-11-12 at 17:59:55 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aa99360>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10aab3250>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10aab32e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10aa2c0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:55 | ERROR | customers
2021-11-12 at 17:59:55 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 17:59:55 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 17:59:55 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 17:59:55 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10aa2cd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aa99400>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aaac180>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aa997c0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10aaac590>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10aaa5eb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10aaa5f40>}, 'description': 'employees'}
2021-11-12 at 17:59:55 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aaac180>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aa997c0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10aaa5eb0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10aaa5f40>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10aa2cd40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:55 | ERROR | employees
2021-11-12 at 17:59:55 | ERROR | {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}
2021-11-12 at 17:59:55 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 17:59:55 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 17:59:55 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10aaaaac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aaac900>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10aaac9a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10aab3670>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10aab36d0>}, 'description': 'items'}
2021-11-12 at 17:59:55 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10aab3670>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10aab36d0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10aaaaac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:55 | ERROR | items
2021-11-12 at 17:59:55 | ERROR | set()
2021-11-12 at 17:59:55 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 17:59:55 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 17:59:55 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10aaa14c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aa99810>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10aa99c20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10aaa57f0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10aaa5880>}, 'description': 'offices'}
2021-11-12 at 17:59:55 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10aaa57f0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10aaa5880>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10aaa14c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:55 | ERROR | offices
2021-11-12 at 17:59:55 | ERROR | set()
2021-11-12 at 17:59:55 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 17:59:55 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 17:59:55 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10aaaae40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aaaca90>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aac2040>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aaacbd0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10aac28b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10aac9cd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10aac9d60>}, 'description': 'orderdetails'}
2021-11-12 at 17:59:55 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aac2040>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aaacbd0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10aac9cd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10aac9d60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10aaaae40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:55 | ERROR | orderdetails
2021-11-12 at 17:59:55 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 17:59:55 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 17:59:55 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 17:59:55 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10aab90c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aaacc20>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aaacc70>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10aaace50>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10aabd2e0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10aabd370>}, 'description': 'orders'}
2021-11-12 at 17:59:55 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aaacc70>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10aabd2e0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10aabd370>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10aab90c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:55 | ERROR | orders
2021-11-12 at 17:59:55 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 17:59:55 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 17:59:55 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 17:59:55 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10aace6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aac2a40>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aac2ae0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10aac2bd0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10aad4460>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10aad44c0>}, 'description': 'payments'}
2021-11-12 at 17:59:55 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aac2ae0>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10aad4460>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10aad44c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10aace6c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:55 | ERROR | payments
2021-11-12 at 17:59:55 | ERROR | set()
2021-11-12 at 17:59:55 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 17:59:55 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 17:59:55 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10aac4240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aac2450>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10aac2540>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10aabdfa0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10aac9040>}, 'description': 'productlines'}
2021-11-12 at 17:59:55 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10aabdfa0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10aac9040>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10aac4240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:55 | ERROR | productlines
2021-11-12 at 17:59:55 | ERROR | set()
2021-11-12 at 17:59:55 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 17:59:55 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 17:59:55 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10aab9d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aac2090>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10aabd790>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10aabd790>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aac2400>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10aabd790>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10aac2720>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10aac9730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10aac97c0>}, 'description': 'products'}
2021-11-12 at 17:59:55 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10aabd790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aac2400>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10aabd790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10aac9730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10aac97c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10aab9d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10aabd790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:55 | ERROR | products
2021-11-12 at 17:59:55 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 17:59:55 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10aabd790>, for_update=False), comment='产品代码'))
2021-11-12 at 17:59:55 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 17:59:55 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10aaced40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aac2c70>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10aac2cc0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10aad4730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10aad4790>}, 'description': 'tokens'}
2021-11-12 at 17:59:55 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10aad4730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10aad4790>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10aaced40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:55 | ERROR | tokens
2021-11-12 at 17:59:55 | ERROR | set()
2021-11-12 at 17:59:55 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 17:59:55 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 17:59:55 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10aad9040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10aac2e00>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10aade0e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10aad4d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10aad4d60>}, 'description': 'zinopara'}
2021-11-12 at 17:59:55 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10aad4d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10aad4d60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10aad9040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:55 | ERROR | zinopara
2021-11-12 at 17:59:55 | ERROR | set()
2021-11-12 at 17:59:55 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 17:59:55 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 17:59:55 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10ad82e40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10adb2ef0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10adb2f40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10ada9700>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 17:59:55 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10ada9700>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10ad82e40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 17:59:55 | CRITICAL | order_view
2021-11-12 at 17:59:55 | CRITICAL | set()
2021-11-12 at 17:59:55 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 17:59:55 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 18:02:13 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 18:02:13 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 18:02:13 | DEBUG | Generate Schema file from database ...
2021-11-12 at 18:02:13 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 18:02:14 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 18:02:14 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 18:02:14 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1054570c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105455a90>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1053ff4a0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1054db5e0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1054de250>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1054de2e0>}, 'description': 'customers'}
2021-11-12 at 18:02:14 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1053ff4a0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1054de250>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1054de2e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1054570c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:14 | ERROR | customers
2021-11-12 at 18:02:14 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 18:02:14 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 18:02:14 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 18:02:14 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105457d40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054c9220>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054c9f40>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054c95e0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1054db3b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1054cfeb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1054cff40>}, 'description': 'employees'}
2021-11-12 at 18:02:14 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054c9f40>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054c95e0>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1054cfeb0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1054cff40>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105457d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:14 | ERROR | employees
2021-11-12 at 18:02:14 | ERROR | {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}
2021-11-12 at 18:02:14 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 18:02:14 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 18:02:14 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1054d5ac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054db720>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1054db7c0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1054de670>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1054de6d0>}, 'description': 'items'}
2021-11-12 at 18:02:14 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1054de670>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1054de6d0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1054d5ac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:14 | ERROR | items
2021-11-12 at 18:02:14 | ERROR | set()
2021-11-12 at 18:02:14 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 18:02:14 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 18:02:14 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1054cc4c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054c9630>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1054c9a40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1054cf7f0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1054cf880>}, 'description': 'offices'}
2021-11-12 at 18:02:14 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1054cf7f0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1054cf880>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1054cc4c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:14 | ERROR | offices
2021-11-12 at 18:02:14 | ERROR | set()
2021-11-12 at 18:02:14 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 18:02:14 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 18:02:14 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1054d5e40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054db8b0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054dbe00>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054db9f0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1054ed6d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1054f4cd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1054f4d60>}, 'description': 'orderdetails'}
2021-11-12 at 18:02:14 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054dbe00>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054db9f0>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1054f4cd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1054f4d60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1054d5e40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:14 | ERROR | orderdetails
2021-11-12 at 18:02:14 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 18:02:14 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 18:02:14 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 18:02:14 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1054e40c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054dba40>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054dba90>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1054dbc70>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1054e72e0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1054e7370>}, 'description': 'orders'}
2021-11-12 at 18:02:14 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054dba90>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1054e72e0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1054e7370>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1054e40c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:14 | ERROR | orders
2021-11-12 at 18:02:14 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 18:02:14 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 18:02:14 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 18:02:14 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1054f96c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054ed860>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054ed900>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1054ed9f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1054ff460>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1054ff4c0>}, 'description': 'payments'}
2021-11-12 at 18:02:14 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054ed900>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1054ff460>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1054ff4c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1054f96c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:14 | ERROR | payments
2021-11-12 at 18:02:14 | ERROR | set()
2021-11-12 at 18:02:14 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 18:02:14 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 18:02:14 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1054ee240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054ed270>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1054ed360>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1054e7fa0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1054f4040>}, 'description': 'productlines'}
2021-11-12 at 18:02:14 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1054e7fa0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1054f4040>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1054ee240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:14 | ERROR | productlines
2021-11-12 at 18:02:14 | ERROR | set()
2021-11-12 at 18:02:14 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 18:02:14 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 18:02:14 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1054e4d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054dbe50>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1054e7790>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1054e7790>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054ed220>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1054e7790>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1054ed540>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1054f4730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1054f47c0>}, 'description': 'products'}
2021-11-12 at 18:02:14 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1054e7790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054ed220>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1054e7790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1054f4730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1054f47c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1054e4d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1054e7790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:14 | ERROR | products
2021-11-12 at 18:02:14 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 18:02:14 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x1054e7790>, for_update=False), comment='产品代码'))
2021-11-12 at 18:02:14 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 18:02:14 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1054f9d40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054eda90>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1054edae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1054ff730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1054ff790>}, 'description': 'tokens'}
2021-11-12 at 18:02:14 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1054ff730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1054ff790>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1054f9d40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:14 | ERROR | tokens
2021-11-12 at 18:02:14 | ERROR | set()
2021-11-12 at 18:02:14 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 18:02:14 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 18:02:14 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105504040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1054edc20>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1054edea0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1054ffd00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1054ffd60>}, 'description': 'zinopara'}
2021-11-12 at 18:02:14 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1054ffd00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1054ffd60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105504040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:14 | ERROR | zinopara
2021-11-12 at 18:02:14 | ERROR | set()
2021-11-12 at 18:02:14 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 18:02:14 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 18:02:14 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1057b4a40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1057d9950>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1057d99a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1057db910>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 18:02:14 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1057db910>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1057b4a40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:14 | CRITICAL | order_view
2021-11-12 at 18:02:14 | CRITICAL | set()
2021-11-12 at 18:02:14 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 18:02:14 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 18:02:53 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 18:02:53 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 18:02:53 | DEBUG | Generate Schema file from database ...
2021-11-12 at 18:02:53 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 18:02:53 | ERROR | Exception at gen_schema() name 'INTEGER' is not defined 
2021-11-12 at 18:02:53 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 18:02:53 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 18:02:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105fdd0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x105fdba90>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10604f1d0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x106061630>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x106064250>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1060642e0>}, 'description': 'customers'}
2021-11-12 at 18:02:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10604f1d0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x106064250>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1060642e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105fdd0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:53 | ERROR | customers
2021-11-12 at 18:02:53 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 18:02:53 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 18:02:53 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 18:02:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x105fddd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10604f270>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10604ff90>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10604f630>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x106061400>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x106056eb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x106056f40>}, 'description': 'employees'}
2021-11-12 at 18:02:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10604ff90>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10604f630>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x106056eb0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x106056f40>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x105fddd40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:53 | ERROR | employees
2021-11-12 at 18:02:53 | ERROR | {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}
2021-11-12 at 18:02:53 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 18:02:53 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 18:02:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10605bac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x106061770>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x106061810>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x106064670>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1060646d0>}, 'description': 'items'}
2021-11-12 at 18:02:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x106064670>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1060646d0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10605bac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:53 | ERROR | items
2021-11-12 at 18:02:53 | ERROR | set()
2021-11-12 at 18:02:53 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 18:02:53 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 18:02:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1060524c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10604f680>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10604fa90>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1060567f0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x106056880>}, 'description': 'offices'}
2021-11-12 at 18:02:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1060567f0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x106056880>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1060524c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:53 | ERROR | offices
2021-11-12 at 18:02:53 | ERROR | set()
2021-11-12 at 18:02:53 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 18:02:53 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 18:02:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10605be40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x106061900>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x106061e50>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x106061a40>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x106074720>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10607acd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10607ad60>}, 'description': 'orderdetails'}
2021-11-12 at 18:02:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x106061e50>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x106061a40>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10607acd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10607ad60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10605be40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:53 | ERROR | orderdetails
2021-11-12 at 18:02:53 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 18:02:53 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 18:02:53 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 18:02:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10606a0c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x106061a90>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x106061ae0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x106061cc0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10606e2e0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10606e370>}, 'description': 'orders'}
2021-11-12 at 18:02:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x106061ae0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10606e2e0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10606e370>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10606a0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:53 | ERROR | orders
2021-11-12 at 18:02:53 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 18:02:53 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 18:02:53 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 18:02:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10607f6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1060748b0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x106074950>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x106074a40>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x106085460>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1060854c0>}, 'description': 'payments'}
2021-11-12 at 18:02:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x106074950>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x106085460>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1060854c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10607f6c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:53 | ERROR | payments
2021-11-12 at 18:02:53 | ERROR | set()
2021-11-12 at 18:02:53 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 18:02:53 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 18:02:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x106075240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1060742c0>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1060743b0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10606efa0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10607a040>}, 'description': 'productlines'}
2021-11-12 at 18:02:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10606efa0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10607a040>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x106075240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:53 | ERROR | productlines
2021-11-12 at 18:02:53 | ERROR | set()
2021-11-12 at 18:02:53 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 18:02:53 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 18:02:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10606ad40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x106061ea0>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10606e790>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10606e790>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x106074270>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10606e790>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x106074590>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10607a730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10607a7c0>}, 'description': 'products'}
2021-11-12 at 18:02:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10606e790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x106074270>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10606e790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10607a730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10607a7c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10606ad40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10606e790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:53 | ERROR | products
2021-11-12 at 18:02:53 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 18:02:53 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10606e790>, for_update=False), comment='产品代码'))
2021-11-12 at 18:02:53 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 18:02:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10607fd40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x106074ae0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x106074b30>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x106085730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x106085790>}}
2021-11-12 at 18:02:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x106085730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x106085790>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10607fd40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:53 | ERROR | tokens
2021-11-12 at 18:02:53 | ERROR | set()
2021-11-12 at 18:02:53 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 18:02:53 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 18:02:53 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10608a040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x106074c70>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x106074ef0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x106085d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x106085d60>}, 'description': 'zinopara'}
2021-11-12 at 18:02:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x106085d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x106085d60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10608a040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:53 | ERROR | zinopara
2021-11-12 at 18:02:53 | ERROR | set()
2021-11-12 at 18:02:53 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 18:02:53 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 18:02:53 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10632f6c0>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x106379cc0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x106097e00>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10638f9a0>, 'dialect_options': {}}
2021-11-12 at 18:02:53 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10638f9a0>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10632f6c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:02:53 | CRITICAL | order_view
2021-11-12 at 18:02:53 | CRITICAL | set()
2021-11-12 at 18:02:53 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 18:02:53 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 18:06:28 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 18:06:29 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 18:06:29 | DEBUG | Generate Schema file from database ...
2021-11-12 at 18:06:29 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 18:06:29 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 18:06:29 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 18:06:29 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102f9d0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x102f98bd0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10300b310>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10301d770>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x103024250>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1030242e0>}, 'description': 'customers'}
2021-11-12 at 18:06:29 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10300b310>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x103024250>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1030242e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102f9d0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:29 | ERROR | customers
2021-11-12 at 18:06:29 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 18:06:29 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 18:06:29 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 18:06:29 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x102f9dd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10300b3b0>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10301d130>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10300b770>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10301d540>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x103016eb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x103016f40>}, 'description': 'employees'}
2021-11-12 at 18:06:29 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10301d130>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10300b770>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x103016eb0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x103016f40>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x102f9dd40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:29 | ERROR | employees
2021-11-12 at 18:06:29 | ERROR | {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}
2021-11-12 at 18:06:29 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 18:06:29 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 18:06:29 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10301bac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10301d8b0>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10301d950>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x103024670>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1030246d0>}, 'description': 'items'}
2021-11-12 at 18:06:29 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x103024670>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1030246d0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10301bac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:29 | ERROR | items
2021-11-12 at 18:06:29 | ERROR | set()
2021-11-12 at 18:06:29 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 18:06:29 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 18:06:29 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1030124c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10300b7c0>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10300bbd0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1030167f0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x103016880>}, 'description': 'offices'}
2021-11-12 at 18:06:29 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1030167f0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x103016880>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1030124c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:29 | ERROR | offices
2021-11-12 at 18:06:29 | ERROR | set()
2021-11-12 at 18:06:29 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 18:06:29 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 18:06:29 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10301be40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10301da40>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10301df90>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10301db80>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x103033860>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10303acd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10303ad60>}, 'description': 'orderdetails'}
2021-11-12 at 18:06:29 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10301df90>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10301db80>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10303acd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10303ad60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10301be40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:29 | ERROR | orderdetails
2021-11-12 at 18:06:29 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 18:06:29 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 18:06:29 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 18:06:29 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10302a0c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10301dbd0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10301dc20>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10301de00>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10302e2e0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10302e370>}, 'description': 'orders'}
2021-11-12 at 18:06:29 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10301dc20>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10302e2e0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10302e370>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10302a0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:29 | ERROR | orders
2021-11-12 at 18:06:29 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 18:06:29 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 18:06:29 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 18:06:29 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10303f6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1030339f0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x103033a90>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x103033b80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x103045460>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1030454c0>}, 'description': 'payments'}
2021-11-12 at 18:06:29 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x103033a90>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x103045460>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1030454c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10303f6c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:29 | ERROR | payments
2021-11-12 at 18:06:29 | ERROR | set()
2021-11-12 at 18:06:29 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 18:06:29 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 18:06:29 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x103035240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x103033400>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1030334f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10302efa0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10303a040>}, 'description': 'productlines'}
2021-11-12 at 18:06:29 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10302efa0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10303a040>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x103035240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:29 | ERROR | productlines
2021-11-12 at 18:06:29 | ERROR | set()
2021-11-12 at 18:06:29 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 18:06:29 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 18:06:29 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10302ad40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x103033040>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10302e790>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10302e790>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1030333b0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10302e790>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1030336d0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10303a730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10303a7c0>}, 'description': 'products'}
2021-11-12 at 18:06:29 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10302e790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1030333b0>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10302e790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10303a730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10303a7c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10302ad40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10302e790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:29 | ERROR | products
2021-11-12 at 18:06:29 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 18:06:29 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10302e790>, for_update=False), comment='产品代码'))
2021-11-12 at 18:06:29 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 18:06:29 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10303fd40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x103033c20>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x103033c70>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x103045730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x103045790>}, 'description': 'tokens'}
2021-11-12 at 18:06:29 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x103045730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x103045790>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10303fd40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:29 | ERROR | tokens
2021-11-12 at 18:06:29 | ERROR | set()
2021-11-12 at 18:06:29 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 18:06:29 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 18:06:29 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10304a040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x103033db0>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10304e090>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x103045d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x103045d60>}, 'description': 'zinopara'}
2021-11-12 at 18:06:29 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x103045d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x103045d60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10304a040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:29 | ERROR | zinopara
2021-11-12 at 18:06:29 | ERROR | set()
2021-11-12 at 18:06:29 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 18:06:29 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 18:06:29 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1032fca40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10331ea90>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10331eae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x103320910>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 18:06:29 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x103320910>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1032fca40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:29 | CRITICAL | order_view
2021-11-12 at 18:06:29 | CRITICAL | set()
2021-11-12 at 18:06:29 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 18:06:29 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
2021-11-12 at 18:06:49 | DEBUG | Connect use uri [ mysql+pymysql://root:passw0rd@192.168.50.10:3306/mysqlsrc ]
2021-11-12 at 18:06:49 | DEBUG | Metadata cache exists, load meta from cache file [ /Users/zhangjun/.neptune_cache/neptune_metadata ]
2021-11-12 at 18:06:49 | DEBUG | Generate Schema file from database ...
2021-11-12 at 18:06:49 | DEBUG | Generate Schema from : [ mysqlsrc ] with db schema [ mysqlsrc ]
2021-11-12 at 18:06:50 | DEBUG | Loading schema from /Users/zhangjun/PycharmProjects/neptune/config/metadata.json
2021-11-12 at 18:06:50 | DEBUG | Schema load with [ 11 ] tables and [ 1 ] views
2021-11-12 at 18:06:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10848c0c0>, 'name': 'customers', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108487b80>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.customers', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1084fb2c0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10850c720>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108513250>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1085132e0>}, 'description': 'customers'}
2021-11-12 at 18:06:50 | DEBUG | {
    "_columns": "DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1084fb2c0>, None, name='customers_ibfk_1', link_to_name=True, table=Table('customers', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False), Column('customerName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactLastName', VARCHAR(length=50), table=<customers>, nullable=False), Column('contactFirstName', VARCHAR(length=50), table=<customers>, nullable=False), Column('phone', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine1', VARCHAR(length=50), table=<customers>, nullable=False), Column('addressLine2', VARCHAR(length=50), table=<customers>), Column('city', VARCHAR(length=50), table=<customers>, nullable=False), Column('state', VARCHAR(length=50), table=<customers>), Column('postalCode', VARCHAR(length=15), table=<customers>), Column('country', VARCHAR(length=50), table=<customers>, nullable=False), Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>), Column('creditLimit', DECIMAL(precision=10, scale=2), table=<customers>), schema='mysqlsrc')), PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))}",
    "description": "customers",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108513250>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1085132e0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10848c0c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.customers",
    "implicit_returning": true,
    "indexes": "{Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "customers",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:50 | ERROR | customers
2021-11-12 at 18:06:50 | ERROR | {Index('salesRepEmployeeNumber', Column('salesRepEmployeeNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<customers>))}
2021-11-12 at 18:06:50 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), table=<customers>, primary_key=True, nullable=False))
2021-11-12 at 18:06:50 | ERROR | DedupeColumnCollection(customers.customerNumber, customers.customerName, customers.contactLastName, customers.contactFirstName, customers.phone, customers.addressLine1, customers.addressLine2, customers.city, customers.state, customers.postalCode, customers.country, customers.salesRepEmployeeNumber, customers.creditLimit)
2021-11-12 at 18:06:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10848cd40>, 'name': 'employees', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1084fb360>, 'primary_key': PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}, 'fullname': 'mysqlsrc.employees', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10850c0e0>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1084fb720>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10850c4f0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108505eb0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108505f40>}, 'description': 'employees'}
2021-11-12 at 18:06:50 | DEBUG | {
    "_columns": "DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10850c0e0>, None, name='employees_ibfk_1', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x1084fb720>, None, name='employees_ibfk_2', link_to_name=True, table=Table('employees', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False), Column('lastName', VARCHAR(length=50), table=<employees>, nullable=False), Column('firstName', VARCHAR(length=50), table=<employees>, nullable=False), Column('extension', VARCHAR(length=10), table=<employees>, nullable=False), Column('email', VARCHAR(length=100), table=<employees>, nullable=False), Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False), Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>), Column('jobTitle', VARCHAR(length=50), table=<employees>, nullable=False), schema='mysqlsrc'))}",
    "description": "employees",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108505eb0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108505f40>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10848cd40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.offices.officeCode'), ForeignKey('mysqlsrc.employees.employeeNumber')}",
    "fullname": "mysqlsrc.employees",
    "implicit_returning": true,
    "indexes": "{Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "employees",
    "primary_key": "PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:50 | ERROR | employees
2021-11-12 at 18:06:50 | ERROR | {Index('reportsTo', Column('reportsTo', INTEGER(display_width=11), ForeignKey('mysqlsrc.employees.employeeNumber'), table=<employees>)), Index('officeCode', Column('officeCode', VARCHAR(length=10), ForeignKey('mysqlsrc.offices.officeCode'), table=<employees>, nullable=False))}
2021-11-12 at 18:06:50 | ERROR | PrimaryKeyConstraint(Column('employeeNumber', INTEGER(display_width=11), table=<employees>, primary_key=True, nullable=False))
2021-11-12 at 18:06:50 | ERROR | DedupeColumnCollection(employees.employeeNumber, employees.lastName, employees.firstName, employees.extension, employees.email, employees.officeCode, employees.reportsTo, employees.jobTitle)
2021-11-12 at 18:06:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10850aac0>, 'name': 'items', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10850c860>, 'primary_key': PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.items', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10850c900>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108513670>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1085136d0>}, 'description': 'items'}
2021-11-12 at 18:06:50 | DEBUG | {
    "_columns": "DedupeColumnCollection(items.id, items.item_no)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(items.id, items.item_no)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))}",
    "description": "items",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108513670>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1085136d0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10850aac0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.items",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "items",
    "primary_key": "PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:50 | ERROR | items
2021-11-12 at 18:06:50 | ERROR | set()
2021-11-12 at 18:06:50 | ERROR | PrimaryKeyConstraint(Column('id', INTEGER(display_width=11), table=<items>, primary_key=True, nullable=False))
2021-11-12 at 18:06:50 | ERROR | DedupeColumnCollection(items.id, items.item_no)
2021-11-12 at 18:06:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1085014c0>, 'name': 'offices', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1084fb770>, 'primary_key': PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.offices', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1084fbb80>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x1085057f0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108505880>}, 'description': 'offices'}
2021-11-12 at 18:06:50 | DEBUG | {
    "_columns": "DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))}",
    "description": "offices",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x1085057f0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108505880>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1085014c0>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.offices",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "offices",
    "primary_key": "PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:50 | ERROR | offices
2021-11-12 at 18:06:50 | ERROR | set()
2021-11-12 at 18:06:50 | ERROR | PrimaryKeyConstraint(Column('officeCode', VARCHAR(length=10), table=<offices>, primary_key=True, nullable=False))
2021-11-12 at 18:06:50 | ERROR | DedupeColumnCollection(offices.officeCode, offices.city, offices.phone, offices.addressLine1, offices.addressLine2, offices.state, offices.country, offices.postalCode, offices.territory)
2021-11-12 at 18:06:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10850ae40>, 'name': 'orderdetails', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10850c9f0>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}, 'fullname': 'mysqlsrc.orderdetails', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}, 'constraints': {ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10850cf40>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10850cb30>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108522810>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108529cd0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108529d60>}, 'description': 'orderdetails'}
2021-11-12 at 18:06:50 | DEBUG | {
    "_columns": "DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)",
    "comment": null,
    "constraints": "{ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10850cf40>, None, name='orderdetails_ibfk_2', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc')), PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10850cb30>, None, name='orderdetails_ibfk_1', link_to_name=True, table=Table('orderdetails', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False), Column('quantityOrdered', INTEGER(display_width=11), table=<orderdetails>, nullable=False), Column('priceEach', DECIMAL(precision=10, scale=2), table=<orderdetails>, nullable=False), Column('orderLineNumber', SMALLINT(display_width=6), table=<orderdetails>, nullable=False), schema='mysqlsrc'))}",
    "description": "orderdetails",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108529cd0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108529d60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10850ae40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.orders.orderNumber'), ForeignKey('mysqlsrc.products.productCode')}",
    "fullname": "mysqlsrc.orderdetails",
    "implicit_returning": true,
    "indexes": "{Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orderdetails",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:50 | ERROR | orderdetails
2021-11-12 at 18:06:50 | ERROR | {Index('productCode', Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))}
2021-11-12 at 18:06:50 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.orders.orderNumber'), table=<orderdetails>, primary_key=True, nullable=False), Column('productCode', VARCHAR(length=15), ForeignKey('mysqlsrc.products.productCode'), table=<orderdetails>, primary_key=True, nullable=False))
2021-11-12 at 18:06:50 | ERROR | DedupeColumnCollection(orderdetails.orderNumber, orderdetails.productCode, orderdetails.quantityOrdered, orderdetails.priceEach, orderdetails.orderLineNumber)
2021-11-12 at 18:06:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1085190c0>, 'name': 'orders', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10850cb80>, 'primary_key': PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.orders', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}, 'constraints': {PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10850cbd0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10850cdb0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10851d2e0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x10851d370>}, 'description': 'orders'}
2021-11-12 at 18:06:50 | DEBUG | {
    "_columns": "DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x10850cbd0>, None, name='orders_ibfk_1', link_to_name=True, table=Table('orders', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False), Column('orderDate', DATE(), table=<orders>, nullable=False), Column('requiredDate', DATE(), table=<orders>, nullable=False), Column('shippedDate', DATE(), table=<orders>), Column('status', VARCHAR(length=15), table=<orders>, nullable=False), Column('comments', TEXT(), table=<orders>), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False), schema='mysqlsrc'))}",
    "description": "orders",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10851d2e0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x10851d370>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1085190c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.orders",
    "implicit_returning": true,
    "indexes": "{Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "orders",
    "primary_key": "PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:50 | ERROR | orders
2021-11-12 at 18:06:50 | ERROR | {Index('customerNumber', Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<orders>, nullable=False))}
2021-11-12 at 18:06:50 | ERROR | PrimaryKeyConstraint(Column('orderNumber', INTEGER(display_width=11), table=<orders>, primary_key=True, nullable=False))
2021-11-12 at 18:06:50 | ERROR | DedupeColumnCollection(orders.orderNumber, orders.orderDate, orders.requiredDate, orders.shippedDate, orders.status, orders.comments, orders.customerNumber)
2021-11-12 at 18:06:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10852e6c0>, 'name': 'payments', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1085229a0>, 'primary_key': PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), 'foreign_keys': {ForeignKey('mysqlsrc.customers.customerNumber')}, 'fullname': 'mysqlsrc.payments', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108522a40>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108522b30>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108534460>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1085344c0>}, 'description': 'payments'}
2021-11-12 at 18:06:50 | DEBUG | {
    "_columns": "DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False)), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108522a40>, None, name='payments_ibfk_1', link_to_name=True, table=Table('payments', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False), Column('paymentDate', DATE(), table=<payments>, nullable=False), Column('amount', DECIMAL(precision=10, scale=2), table=<payments>, nullable=False), schema='mysqlsrc'))}",
    "description": "payments",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108534460>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1085344c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10852e6c0>",
    "foreign_keys": "{ForeignKey('mysqlsrc.customers.customerNumber')}",
    "fullname": "mysqlsrc.payments",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "payments",
    "primary_key": "PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:50 | ERROR | payments
2021-11-12 at 18:06:50 | ERROR | set()
2021-11-12 at 18:06:50 | ERROR | PrimaryKeyConstraint(Column('customerNumber', INTEGER(display_width=11), ForeignKey('mysqlsrc.customers.customerNumber'), table=<payments>, primary_key=True, nullable=False), Column('checkNumber', VARCHAR(length=50), table=<payments>, primary_key=True, nullable=False))
2021-11-12 at 18:06:50 | ERROR | DedupeColumnCollection(payments.customerNumber, payments.checkNumber, payments.paymentDate, payments.amount)
2021-11-12 at 18:06:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108524240>, 'name': 'productlines', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x1085223b0>, 'primary_key': PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.productlines', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x1085224a0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x10851dfa0>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108529040>}, 'description': 'productlines'}
2021-11-12 at 18:06:50 | DEBUG | {
    "_columns": "DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))}",
    "description": "productlines",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x10851dfa0>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108529040>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108524240>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.productlines",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "productlines",
    "primary_key": "PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:50 | ERROR | productlines
2021-11-12 at 18:06:50 | ERROR | set()
2021-11-12 at 18:06:50 | ERROR | PrimaryKeyConstraint(Column('productLine', VARCHAR(length=50), table=<productlines>, primary_key=True, nullable=False))
2021-11-12 at 18:06:50 | ERROR | DedupeColumnCollection(productlines.productLine, productlines.textDescription, productlines.htmlDescription, productlines.image)
2021-11-12 at 18:06:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108519d40>, 'name': 'products', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10850cf90>, 'primary_key': PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10851d790>, for_update=False), comment='产品代码')), 'foreign_keys': {ForeignKey('mysqlsrc.productlines.productLine')}, 'fullname': 'mysqlsrc.products', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}, 'constraints': {PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10851d790>, for_update=False), comment='产品代码')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108522360>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10851d790>, for_update=False), comment='产品代码'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='产品名称'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='库存'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='价格'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='建议零售价'), schema='mysqlsrc'))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108522680>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108529730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x1085297c0>}, 'description': 'products'}
2021-11-12 at 18:06:50 | DEBUG | {
    "_columns": "DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10851d790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801')), ForeignKeyConstraint(<sqlalchemy.sql.base.DedupeColumnCollection object at 0x108522360>, None, name='products_ibfk_1', link_to_name=True, table=Table('products', MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10851d790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'), Column('productName', VARCHAR(length=70), table=<products>, nullable=False, comment='\u4ea7\u54c1\u540d\u79f0'), Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'), Column('productScale', VARCHAR(length=10), table=<products>, nullable=False), Column('productVendor', VARCHAR(length=50), table=<products>, nullable=False), Column('productDescription', TEXT(), table=<products>, nullable=False), Column('quantityInStock', SMALLINT(display_width=6), table=<products>, nullable=False, comment='\u5e93\u5b58'), Column('buyPrice', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u4ef7\u683c'), Column('MSRP', DECIMAL(precision=10, scale=2), table=<products>, nullable=False, comment='\u5efa\u8bae\u96f6\u552e\u4ef7'), schema='mysqlsrc'))}",
    "description": "products",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108529730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x1085297c0>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108519d40>",
    "foreign_keys": "{ForeignKey('mysqlsrc.productlines.productLine')}",
    "fullname": "mysqlsrc.products",
    "implicit_returning": true,
    "indexes": "{Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='\u4ea7\u54c1\u7ebf'))}",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "products",
    "primary_key": "PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10851d790>, for_update=False), comment='\u4ea7\u54c1\u4ee3\u7801'))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:50 | ERROR | products
2021-11-12 at 18:06:50 | ERROR | {Index('productLine', Column('productLine', VARCHAR(length=50), ForeignKey('mysqlsrc.productlines.productLine'), table=<products>, nullable=False, comment='产品线'))}
2021-11-12 at 18:06:50 | ERROR | PrimaryKeyConstraint(Column('productCode', VARCHAR(length=15), table=<products>, primary_key=True, nullable=False, server_default=DefaultClause(<sqlalchemy.sql.elements.TextClause object at 0x10851d790>, for_update=False), comment='产品代码'))
2021-11-12 at 18:06:50 | ERROR | DedupeColumnCollection(products.productCode, products.productName, products.productLine, products.productScale, products.productVendor, products.productDescription, products.quantityInStock, products.buyPrice, products.MSRP)
2021-11-12 at 18:06:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x10852ed40>, 'name': 'tokens', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108522bd0>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.tokens', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x108522c20>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108534730>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108534790>}, 'description': 'tokens'}
2021-11-12 at 18:06:50 | DEBUG | {
    "_columns": "DedupeColumnCollection(tokens.s)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(tokens.s)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "tokens",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108534730>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108534790>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x10852ed40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.tokens",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "tokens",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:50 | ERROR | tokens
2021-11-12 at 18:06:50 | ERROR | set()
2021-11-12 at 18:06:50 | ERROR | PrimaryKeyConstraint()
2021-11-12 at 18:06:50 | ERROR | DedupeColumnCollection(tokens.s)
2021-11-12 at 18:06:50 | DEBUG | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x108539040>, 'name': 'zinopara', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x108522d60>, 'primary_key': PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False)), 'foreign_keys': set(), 'fullname': 'mysqlsrc.zinopara', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10853f040>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108534d00>, 'dialect_options': {'mysql': <sqlalchemy.sql.base._DialectArgDict object at 0x108534d60>}, 'description': 'zinopara'}
2021-11-12 at 18:06:50 | DEBUG | {
    "_columns": "DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))}",
    "description": "zinopara",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108534d00>",
    "dialect_options": {
        "mysql": "<sqlalchemy.sql.base._DialectArgDict object at 0x108534d60>"
    },
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x108539040>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.zinopara",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "zinopara",
    "primary_key": "PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:50 | ERROR | zinopara
2021-11-12 at 18:06:50 | ERROR | set()
2021-11-12 at 18:06:50 | ERROR | PrimaryKeyConstraint(Column('id', VARCHAR(collation='utf8mb4_unicode_ci', length=255), table=<zinopara>, primary_key=True, nullable=False))
2021-11-12 at 18:06:50 | ERROR | DedupeColumnCollection(zinopara.id, zinopara.type, zinopara.creatorid, zinopara.json, zinopara.json_updates)
2021-11-12 at 18:06:50 | SUCCESS | {'dispatch': <sqlalchemy.event.base.DDLEventsDispatch object at 0x1087eaa40>, 'name': 'order_view', '_columns': <sqlalchemy.sql.base.DedupeColumnCollection object at 0x10880ea90>, 'primary_key': PrimaryKeyConstraint(), 'foreign_keys': set(), 'fullname': 'mysqlsrc.order_view', 'metadata': MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc)), 'schema': 'mysqlsrc', 'indexes': set(), 'constraints': {PrimaryKeyConstraint()}, 'columns': <sqlalchemy.sql.base.ImmutableColumnCollection object at 0x10880eae0>, '_extra_dependencies': set(), 'implicit_returning': True, 'comment': None, '_prefixes': [], 'dialect_kwargs': <sqlalchemy.sql.base._DialectArgView object at 0x108810910>, 'dialect_options': {}, 'description': 'order_view'}
2021-11-12 at 18:06:50 | DEBUG | {
    "_columns": "DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "_extra_dependencies": "set()",
    "_prefixes": [],
    "columns": "ImmutableColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)",
    "comment": null,
    "constraints": "{PrimaryKeyConstraint()}",
    "description": "order_view",
    "dialect_kwargs": "<sqlalchemy.sql.base._DialectArgView object at 0x108810910>",
    "dialect_options": {},
    "dispatch": "<sqlalchemy.event.base.DDLEventsDispatch object at 0x1087eaa40>",
    "foreign_keys": "set()",
    "fullname": "mysqlsrc.order_view",
    "implicit_returning": true,
    "indexes": "set()",
    "metadata": "MetaData(bind=Engine(mysql+pymysql://root:***@192.168.50.10:3306/mysqlsrc))",
    "name": "order_view",
    "primary_key": "PrimaryKeyConstraint()",
    "schema": "mysqlsrc"
}
2021-11-12 at 18:06:50 | CRITICAL | order_view
2021-11-12 at 18:06:50 | CRITICAL | set()
2021-11-12 at 18:06:50 | CRITICAL | PrimaryKeyConstraint()
2021-11-12 at 18:06:50 | CRITICAL | DedupeColumnCollection(order_view.orderNumber, order_view.orderDate, order_view.requiredDate, order_view.shippedDate, order_view.productCode)
